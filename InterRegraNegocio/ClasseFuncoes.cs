using DanfeSharp;
using DanfeSharp.Modelo;
using interRegraNegocio.B2W;
using interRegraNegocio.FortePlus;
using interRegraNegocio.MercadoLivre;
using InterRegraNegocio.B2W;
using InterRegraNegocio.Bling;
using InterRegraNegocio.CorreiosLocal;
using InterRegraNegocio.FortePlus;
using InterRegraNegocio.GNRE;
using InterRegraNegocio.JADLOG;
using InterRegraNegocio.MagazineLuiza;
using InterRegraNegocio.MercadoLivre;
using InterRegraNegocio.ORLA;
using InterRegraNegocio.ServicoCorreios;

using MercadoLibre.SDK;
using MySql.Data.MySqlClient;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types.InputFiles;
using Attribute = interRegraNegocio.MercadoLivre.Attribute;
using Exception = System.Exception;
//

namespace InterRegraNegocio
{
    public static class ClasseFuncoes
    {
        private static string sDataOntem = DateTime.Now.AddDays(-4).ToString("dd/MM/yyyy");
        private static string sDataAgora = DateTime.Now.ToString("dd/MM/yyyy");
        private static Thread oThreadNotaEntrada = null;
        private static Thread oThreadNotaSaidaAutorizadas = null;
        private static Thread oThreadNotaSaidaCanceladas = null;
        private static Thread oThreadNotaSaidaEmitidas = null;



        public static void RecebeMensagemTelegram()
        {

            var me = ClasseParametros.oClienteTelegram.GetMeAsync().Result;
            Console.WriteLine(
              $"Hello, World! I am user {me.Id} and my name is {me.FirstName}."
            );

            ClasseParametros.oClienteTelegram.OnMessage += Bot_OnMessage;
            ClasseParametros.oClienteTelegram.StartReceiving();
        }

        public static object RelatorioCustoBling(int iCodigoCliente)
        {
            int i = 1;
            while (true)
            {
                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/pedidos/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling + "");

                //var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/notasfiscais/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling +
                // "&filters=dataEmissao[" + sDataInicial + " 00:00:00 TO " + sDataFinal + " 23:59:59]; situacao[6];loja[todas];tipo[S]");



                request.ContentType = "application/json";
                request.Method = "GET";
                string sNotas = "";
                var oNotas = "";

                string sSql = "";
                Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                {
                    if (response.StatusCode != HttpStatusCode.OK)
                        return null;


                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                    {
                        var content = reader.ReadToEnd();
                        if (string.IsNullOrWhiteSpace(content))
                            Console.Out.WriteLine("Empty Response");
                        else
                            sNotas = content;
                    }
                }

                PedidoJsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<PedidoJsonBling>(sNotas);

                if (oListXML.retorno.pedidos == null)
                {
                    return null;
                }

                foreach (PedidoBling oPedido in oListXML.retorno.pedidos)
                {
                    DataTable dtbResult = null;
                    try
                    {
                        if (oPedido.pedido.nota == null)
                            continue;

                        Console.WriteLine(oPedido.pedido.nota.numero);
                        int iNOTA = int.Parse(oPedido.pedido.nota.numero);
                        string sPEDIDO = oPedido.pedido.numero;
                        string sDATA = DateTime.Parse(oPedido.pedido.data).ToString("yyyy-MM-dd HH:mm:ss");
                        string sPEDIDOMARKETPLACE = oPedido.pedido.numeroPedidoLoja;
                        string sMARKETPLACE = oPedido.pedido.tipoIntegracao;
                        decimal eDESCONTO = decimal.Parse(oPedido.pedido.desconto.Replace(".", ","));
                        decimal eFRETE = decimal.Parse(oPedido.pedido.valorfrete.Replace(".", ","));
                        decimal eVALORNOTA = decimal.Parse(oPedido.pedido.nota.valorNota.Replace(".", ","));
                        decimal eVALORPRODUTO = decimal.Parse(oPedido.pedido.totalprodutos.Replace(".", ","));
                        decimal eCUSTOPRODUTO = 0;
                        string sLOJACENTRAL = ClasseParametros.ClienteSelecionado;

                        decimal eVALORPEDIDO = 0;

                        #region MKP
                        if (sMARKETPLACE == "MercadoLivre")
                        {

                            IRestResponse oResposta = null;
                            MercadoLivrePedido oPedidoMercadoLivre = null;

                            while (oPedidoMercadoLivre == null || oPedidoMercadoLivre.results == null)
                            {
                                try
                                {
                                    List<Parameter> ps = new List<Parameter>();
                                    Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                    ps.Add(p);
                                    p = new Parameter("q", oPedido.pedido.numeroPedidoLoja, ParameterType.QueryString);
                                    ps.Add(p);
                                    p = new Parameter("seller", ClasseParametros.oMeli.UserId, ParameterType.QueryString);
                                    ps.Add(p);

                                    var oRespostaPedido = ClasseParametros.oMeli.Get("/orders/search", ps);
                                    oPedidoMercadoLivre = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivrePedido>(oRespostaPedido.Content);
                                    eVALORPEDIDO = decimal.Parse(oPedidoMercadoLivre.results[0].total_amount.ToString());
                                    //Result[] aRessult = oPedidoMercadoLivre.results.Where(x => x.id.ToString() == "2538010356" || x.id.ToString() == "2531056580" || x.id.ToString() == "2530212967" || x.id.ToString() == "2526833324" || x.id.ToString() == "2535966174").ToArray();

                                }

                                catch
                                {
                                    Console.WriteLine("Erro mercado livre");
                                }
                            }
                        }
                        else if(sMARKETPLACE=="Shopee")
                        {

                        }
                        else if(sMARKETPLACE=="SkyHub")
                        {
                            DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                            string sKey = d.Rows[0]["KEYB2W"].ToString();
                            string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                            string sAccount = "0MDxaksT8d";
                            d.Dispose();

                            IRestResponse oResposta = null;
                            while (oResposta == null)
                            {
                                //client = new RestClient("https://api.skyhub.com.br/orders?filters[statuses][]=payment_received&page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                                //order_invoiced
                                //client = new RestClient("https://api.skyhub.com.br/orders?filters[statuses][]=" + sStatus + "&page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                                
                                //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());


                                RestClient client = new RestClient("https://api.skyhub.com.br/orders/"+oPedido.pedido.numeroPedidoLoja);

                                ///
                                //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                                //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
                                RestRequest oRequest = new RestRequest(Method.GET);
                                oRequest.AddHeader("cache-control", "no-cache");
                                oRequest.AddHeader("Accept", "application/json");
                                oRequest.AddHeader("Content-Type", "application/json");
                                oRequest.AddHeader("x-Api-Key", sKey);
                                oRequest.AddHeader("X-User-Email", sUsuario);
                                oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                                oResposta = client.Execute(oRequest);

                                if (oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError)
                                {
                                    oResposta = null;

                                }
                                else if (oResposta.StatusCode == HttpStatusCode.BadGateway)
                                {
                                    oResposta = null;

                                }
                            }
                            Thread.Sleep(2000);

                            if (oResposta.Content == "Account  not found")
                            {
                                continue;
                            }
                            if (oResposta.Content.Contains("504 Gateway Time-ou"))
                            {
                                continue;
                            }


                            B2WPedido oPedidoB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPedido>(oResposta.Content);

                            if(oPedidoB2W != null)
                            {
                                eVALORPEDIDO =decimal.Parse(oPedidoB2W.total_ordered.ToString());
                            }


                        }
                        else
                        {

                        }


                        #endregion





                        foreach (InterRegraNegocio.Bling.Iten oItem in oPedido.pedido.itens)
                        {
                            eCUSTOPRODUTO += decimal.Parse(oItem.item.precocusto.Replace(".", ","));
                        }

                        sSql = "SELECT * FROM RELATORIOVENDACUSTO WHERE NOTA = '" + iNOTA.ToString() + "' AND PEDIDO = '" + sPEDIDO + "' ";
                        dtbResult = ClasseParametros.ConsultaBancoMysql(sSql);
                        if (dtbResult.Rows.Count == 0)
                        {
                            sSql = "INSERT INTO RELATORIOVENDACUSTO(NOTA,PEDIDO,DATA,PEDIDOMARKETPLACE,MARKETPLACE,DESCONTO,FRETE,VALORPEDIDO,VALORNOTA,VALORPRODUTO,CUSTOPRODUTO,LOJACENTRAL) ";
                            sSql += " VALUES(@NOTA,@PEDIDO,@DATA,@PEDIDOMARKETPLACE,@MARKETPLACE,@DESCONTO,@FRETE,@VALORPEDIDO,@VALORNOTA,@VALORPRODUTO,@CUSTOPRODUTO,@LOJACENTRAL)";

                            ParametrosSQL.Add("NOTA", iNOTA);
                            ParametrosSQL.Add("PEDIDO", sPEDIDO);
                            ParametrosSQL.Add("DATA", sDATA);
                            ParametrosSQL.Add("PEDIDOMARKETPLACE", sPEDIDOMARKETPLACE);
                            ParametrosSQL.Add("MARKETPLACE", sMARKETPLACE);
                            ParametrosSQL.Add("DESCONTO", eDESCONTO);
                            ParametrosSQL.Add("FRETE", eFRETE);






                            ParametrosSQL.Add("VALORPEDIDO", eVALORPEDIDO);
                            ParametrosSQL.Add("VALORNOTA", eVALORNOTA);
                            ParametrosSQL.Add("VALORPRODUTO", eVALORPRODUTO);
                            ParametrosSQL.Add("CUSTOPRODUTO", eCUSTOPRODUTO);
                            ParametrosSQL.Add("LOJACENTRAL", sLOJACENTRAL);

                            ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                        }







                    }
                    catch
                    {

                    }
                    finally
                    {
                        if (dtbResult != null)
                            dtbResult.Dispose();

                    }
                }
                i++;
            }

            return 1;





        }

        public static void EnviaRelatorioTelegramAsync()
        {
            bool lGeraRelatorio = true;
            string sData7dias = "";
            DataTable dtbEtiquetasGeradas = new DataTable();
            DataTable dtbEtiquetasImpressas = new DataTable();
            DataTable dtbRelatorio = new DataTable();
            bool oRetorno = false;
            string sMensagem = "";
            Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();


            #region Relatorio de etiquetas
            DataTable dtbTelegram = ClasseParametros.ConsultaBancoMysql("SELECT VALOR FROM AVISOS WHERE DESCRICAO = 'AVISOETQ1' ");

            if (dtbTelegram.Rows.Count == 0)
            {


                lGeraRelatorio = false;
            }

            DateTime dUltimoAViso = DateTime.Parse(dtbTelegram.Rows[0]["VALOR"].ToString());
            if (DateTime.Now.Subtract(dUltimoAViso).Hours == 0 || DateTime.Now.Hour > 17 || DateTime.Now.Hour < 8)
            {


                lGeraRelatorio = false;
            }

            if (lGeraRelatorio)
            {
                sData7dias = DateTime.Now.AddDays(-7).ToString("yyyyMMdd");

                dtbEtiquetasGeradas = ClasseParametros.ConsultaBancoMysql(@"SELECT COUNT(LOJA) AS IMPRESSOS,LOJA FROM VENDAS WHERE DATACRIADO > '" + sData7dias + "' GROUP BY LOJA");
                dtbEtiquetasImpressas = ClasseParametros.ConsultaBancoMysql(@"SELECT COUNT(LOJA) AS IMPRESSOS,LOJA FROM VENDAS WHERE DATACRIADO > '" + sData7dias + "' AND IMPRESSOES IS NULL GROUP BY LOJA");

                //cria relatorio
                dtbRelatorio.Columns.Add("DATA");
                dtbRelatorio.Columns.Add("LOJA");
                dtbRelatorio.Columns.Add("GERADAS");
                dtbRelatorio.Columns.Add("IMPRESSAS");

                for (int i = 0; i < dtbEtiquetasGeradas.Rows.Count; i++)
                {
                    try
                    {
                        DataRow r = dtbRelatorio.NewRow();
                        r["DATA"] = DateTime.Now.ToShortDateString();
                        r["LOJA"] = dtbEtiquetasGeradas.Rows[i]["LOJA"];
                        r["GERADAS"] = dtbEtiquetasGeradas.Rows[i]["IMPRESSOS"];
                        r["IMPRESSAS"] = dtbEtiquetasImpressas.Rows[i]["IMPRESSOS"];

                        dtbRelatorio.Rows.Add(r);
                    }
                    catch (Exception ex)
                    {

                    }
                }

                sMensagem = "Relatório de hora em hora das etiquetas\n";
                sMensagem += DateTime.Now.ToString() + "\n";
                //sMensagem += "Loja".PadRight(38 - "Loja".Length) + "Geradas".PadRight(12) + "Impressas".PadRight(12) + "\n";
                foreach (DataRow r in dtbRelatorio.Rows)
                {
                    sMensagem += "A " + r["LOJA"].ToString() + " gerou " + r["GERADAS"].ToString() + " etiquetas e faltam imprimir " + r["IMPRESSAS"].ToString() + "\n";
                }

                //oRetorno = EnviaMensagemTelegramAsync(sMensagem, "0");


                ParametrosSQL.Add("VALOR", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));
                ParametrosSQL.Add("DESCRICAO", "AVISOETQ1");
                ClasseParametros.ExecutabancoMySql("UPDATE AVISOS SET VALOR = @VALOR WHERE DESCRICAO = @DESCRICAO ", ParametrosSQL);


                dtbRelatorio.Dispose();
            }
            #endregion


            #region Relatorio de etiquetas
            dtbTelegram = ClasseParametros.ConsultaBancoMysql("SELECT VALOR FROM AVISOS WHERE DESCRICAO = 'AVISOVENDA1' ");

            if (dtbTelegram.Rows.Count == 0)
            {


                lGeraRelatorio = false;
            }

            dUltimoAViso = DateTime.Parse(dtbTelegram.Rows[0]["VALOR"].ToString());
            if (DateTime.Now.Subtract(dUltimoAViso).Hours == 0 || DateTime.Now.Hour > 17 || DateTime.Now.Hour < 8)
            {


                lGeraRelatorio = false;
            }

            if (lGeraRelatorio)
            {
                sData7dias = DateTime.Now.AddDays(-7).ToString("yyyyMMdd");

                //dtbEtiquetasGeradas = ClasseParametros.ConsultaBanco(@"SELECT COUNT(LOJA) AS IMPRESSOS,LOJA FROM VENDAS WHERE DATACRIADO > '" + sData7dias + "' GROUP BY LOJA");
                //dtbEtiquetasImpressas = ClasseParametros.ConsultaBanco(@"SELECT COUNT(LOJA) AS IMPRESSOS,LOJA FROM VENDAS WHERE DATACRIADO > '" + sData7dias + "' AND IMPRESSOES IS NULL GROUP BY LOJA");

                ////cria relatorio
                //dtbRelatorio.Columns.Add("DATA");
                //dtbRelatorio.Columns.Add("LOJA");
                //dtbRelatorio.Columns.Add("GERADAS");
                //dtbRelatorio.Columns.Add("IMPRESSAS");

                //for (int i = 0; i < dtbEtiquetasGeradas.Rows.Count; i++)
                //{
                //    try
                //    {
                //        DataRow r = dtbRelatorio.NewRow();
                //        r["DATA"] = DateTime.Now.ToShortDateString();
                //        r["LOJA"] = dtbEtiquetasGeradas.Rows[i]["LOJA"];
                //        r["GERADAS"] = dtbEtiquetasGeradas.Rows[i]["IMPRESSOS"];
                //        r["IMPRESSAS"] = dtbEtiquetasImpressas.Rows[i]["IMPRESSOS"];

                //        dtbRelatorio.Rows.Add(r);
                //    }
                //    catch (Exception ex)
                //    {

                //    }
                //}

                //sMensagem = "Relatório de hora em hora das etiquetas\n";
                //sMensagem += DateTime.Now.ToString() + "\n";
                ////sMensagem += "Loja".PadRight(38 - "Loja".Length) + "Geradas".PadRight(12) + "Impressas".PadRight(12) + "\n";
                //foreach (DataRow r in dtbRelatorio.Rows)
                //{
                //    sMensagem += "A " + r["LOJA"].ToString() + " gerou " + r["GERADAS"].ToString() + " etiquetas e faltam imprimir " + r["IMPRESSAS"].ToString() + "\n";
                //}

                //oRetorno = EnviaMensagemTelegramAsync(sMensagem, "0");


                //ParametrosSQL.Add("VALOR", DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss"));
                //ParametrosSQL.Add("DESCRICAO", "AVISOETQ1");
                //ClasseParametros.ExecutabancoMySql("UPDATE AVISOS SET VALOR = @VALOR WHERE DESCRICAO = @DESCRICAO ", ParametrosSQL);


                dtbRelatorio.Dispose();
            }
            #endregion




        }


        public static void RetornaFilial(int? iFilial)
        {
            //get id filial

            IRestResponse response = null;
            response = null;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Filial/Id/" + iFilial.ToString());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }

            ClasseParametros.iFilial = int.Parse(response.Content.Split(':')[1].Replace("}", ""));
        }



        public static List<PedidoItemFortPlus> RetornaItensPedido(int? iPedido)
        {
            //get id filial

            IRestResponse response = null;
            response = null;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/PedidoItem/Pedido/" + iPedido.ToString());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }

            List<PedidoItemFortPlus> oItem = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PedidoItemFortPlus>>(response.Content);
            return oItem;

        }


        public static void aTUALIZAGNRE(TextBox editLog = null)
        {
            DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM DIFAL");
            List<FortPlusXML> oListaXML = RetornaListaXMLFortPlus();  //retorna xmlnotas

            foreach (DataRow r in d.Rows)
            {
                List<FortPlusXML> oListaXMLFiltrado = oListaXML.Where(x => x.trDocto.ToString() == r["CODIGO"].ToString()).ToList();


                string sSql = "UPDATE DIFAL SET DATAHORAEMISSAO = '" + ((DateTime)oListaXMLFiltrado[0].trDmaEmissao).ToString("yyyy-MM-dd HH:mm:ss") + "' WHERE CODIGO = " + r["CODIGO"].ToString().ToString();
                ClasseParametros.ExecutabancoMySql(sSql);
            }
        }


        public static void GeraGNRE(int iCodigoCliente)
        {
            string[] aSiglasEstados = { "AC", "AL", "AP", "AM", "CE", "DF", "GO", "MT", "PA", "PB", "PE", "PI", "RO", "RR", "SC", "SE", "TO" };

            List<GlobalFortPlus> oListaGlobal = RetornaListaGlobalMK("IEST");  //retorna convenios da GNRE
            List<FortPlusXML> oListaXML = RetornaListaXMLFortPlus();  //retorna xmlnotas

            List<FortPlusXML> lstPedidos = oListaXML.Where(x => x.trDmaEmissao > DateTime.Parse(DateTime.Now.ToShortDateString() + " 00:00:00")).ToList();

            foreach (string sSiglaEstado in aSiglasEstados)
            {
                // List<GlobalFortPlus> lstTemp = oListaGlobal.Where(x => x.glCodigo == sSiglaEstado).ToList();

                foreach (FortPlusXML oPedido in lstPedidos)
                {
                    try
                    {
                        if (oPedido.trArquivoRetorno == null)
                            continue;
                        DanfeViewModel oModel = DanfeViewModelCreator.CriarDeStringXml(oPedido.trArquivoRetorno);
                        if (oModel.Destinatario.EnderecoUf == sSiglaEstado)
                        {
                            if (oModel.CalculoImposto.vICMSUFDest > 0)
                            {
                                Console.WriteLine("  Salva GNRE da nota " + oPedido.trDocto.ToString());
                                string sSql = "SELECT * FROM DIFAL WHERE CODIGO = '" + oPedido.trDocto.ToString() + "' AND ESTADO='" + sSiglaEstado + "' ";
                                DataTable dtbDIFAL = ClasseParametros.ConsultaBancoMysql(sSql);
                                if (dtbDIFAL.Rows.Count == 0)
                                {
                                    List<FortPlusXML> oListaXMLFiltrado = oListaXML.Where(x => x.trDocto.ToString() == oPedido.trDocto.ToString()).ToList();
                                    if (oListaXMLFiltrado.Count == 0)
                                        continue;
                                    sSql = "INSERT INTO DIFAL(CODIGO,ESTADO,VALORNOTA,VALOR,DATAHORAEMISSAO,DATAHORA,STATUS) VALUES('" + oPedido.trDocto.ToString() + "','" + sSiglaEstado + "','" + oModel.CalculoImposto.ValorTotalNota.ToString().Replace(",", ".") + "','" + oModel.CalculoImposto.vICMSUFDest.ToString().Replace(",", ".") + "','" + ((DateTime)oListaXMLFiltrado[0].trDmaEmissao).ToString("yyyy-MM-dd HH:mm:ss") + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "',0)";
                                    ClasseParametros.ExecutabancoMySql(sSql);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
        }


        public static void AtualizaProdutoB2W(string sSKU, int iCodigoCliente)
        {
            int iPagina = 1;
            int iPorPagina = 50;
            RestClient client = null;
            RestRequest oRequest = null;
            IRestResponse oResposta = null;
            int? iLocalEstoque31 = RetornaCodigoLocalEstoque("LE", "31");
            int? iLocalEstoque33 = RetornaCodigoLocalEstoque("LE", "33");
            DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
            string sKeyB2w = d.Rows[0]["KEYB2W"].ToString();
            string sUsuarioB2W = d.Rows[0]["USUARIOB2W"].ToString();
            string sAccountB2W = d.Rows[0]["ACCOUNTB2W"].ToString();
            d.Dispose();

            try
            {
                oResposta = null;
                while (oResposta == null)
                {
                    client = new RestClient("https://api.skyhub.com.br/products/" + sSKU);
                    //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                    //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
                    oRequest = new RestRequest(Method.GET);
                    oRequest.AddHeader("cache-control", "no-cache");
                    oRequest.AddHeader("Accept", "application/json");
                    oRequest.AddHeader("Content-Type", "application/json");
                    oRequest.AddHeader("x-Api-Key", sKeyB2w);
                    oRequest.AddHeader("X-User-Email", sUsuarioB2W);
                    oRequest.AddHeader("X-Accountmanager-Key", sAccountB2W);
                    oResposta = client.Execute(oRequest);

                    if (oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError)
                    {
                        oResposta = null;

                    }
                    else if (oResposta.StatusCode == HttpStatusCode.BadGateway)
                    {
                        oResposta = null;

                    }
                }

                interRegraNegocio.B2W.Product oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<interRegraNegocio.B2W.Product>(oResposta.Content);

                if (oProduto == null)
                    return;

                try
                {
                    if (oProduto.sku.Length < 3)
                        return;

                    Console.WriteLine(" Atualiza estoque B2W produto " + oProduto.sku);

                    int? iMarketplace = RetornaCodigoGlobal("MK", "B2W");

                    ProdutoComplemento oProdutoComplementoFortPlus = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(oProduto.sku, iMarketplace);
                    ProdutoFortePlus oProdutoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplementoFortPlus.cmIdProduto.ToString()).Content);

                    if (oProdutoFortPlus.prIdParent != null)
                    {
                        oProdutoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoFortPlus.prIdParent.ToString()).Content);
                        oProduto.sku = oProdutoFortPlus.prCodigo;
                    }

                    double eEstoque = RetornaEstoque(oProduto.sku);
                    eEstoque = eEstoque * 30 / 100;
                    eEstoque = Math.Floor(eEstoque);

                    if (eEstoque == 0)
                        return;

                    oProduto.qty = (int)eEstoque;

                    B2WProdutoAtualiza oProdutoAtualiza = new B2WProdutoAtualiza();
                    oProdutoAtualiza.product = new interRegraNegocio.B2W.Produto();

                    oProdutoAtualiza.product.brand = oProduto.brand;
                    oProdutoAtualiza.product.categories = oProduto.categories;
                    oProdutoAtualiza.product.cost = oProduto.cost;
                    oProdutoAtualiza.product.description = oProduto.description;
                    oProdutoAtualiza.product.ean = oProduto.ean;
                    oProdutoAtualiza.product.height = oProduto.height;
                    oProdutoAtualiza.product.images = oProduto.images;
                    oProdutoAtualiza.product.length = oProduto.length;
                    oProdutoAtualiza.product.name = oProduto.name;
                    oProdutoAtualiza.product.nbm = oProduto.nbm;

                    oProdutoAtualiza.product.price = oProdutoComplementoFortPlus.cmPrecoDePor;
                    oProdutoAtualiza.product.promotional_price = oProdutoComplementoFortPlus.cmPrecoDePor;
                    oProdutoAtualiza.product.qty = (int)oProduto.qty;
                    oProdutoAtualiza.product.sku = oProduto.sku;
                    oProdutoAtualiza.product.specifications = oProduto.specifications;
                    oProdutoAtualiza.product.status = oProduto.status;
                    oProdutoAtualiza.product.variations = oProduto.variations;
                    oProdutoAtualiza.product.variation_attributes = oProduto.variation_attributes;
                    oProdutoAtualiza.product.weight = oProduto.weight;
                    oProdutoAtualiza.product.width = oProduto.width;

                    float? eValor = oProdutoAtualiza.product.price;

                    while (true)
                    {
                        string sJSON = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoAtualiza);

                        client = new RestClient("https://api.skyhub.com.br/products/" + sSKU.ToUpper());
                        oRequest = new RestRequest(Method.PUT);
                        oRequest.AddHeader("cache-control", "no-cache");
                        oRequest.AddHeader("Accept", "application/json");
                        oRequest.AddHeader("Content-Type", "application/json");
                        oRequest.AddHeader("x-Api-Key", sKeyB2w);
                        oRequest.AddHeader("X-User-Email", sUsuarioB2W);
                        oRequest.AddHeader("X-Accountmanager-Key", sAccountB2W);
                        oRequest.AddParameter("application/json", sJSON, ParameterType.RequestBody);
                        oResposta = client.Execute(oRequest);

                        Thread.Sleep(500);
                        if (oResposta.StatusCode == HttpStatusCode.NoContent)
                        {
                            break;
                        }

                        else
                        {

                        }
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Item nao encontrado " + oProduto.sku);
                }
            }
            catch
            {

            }
            iPagina++;

            Thread.Sleep(500);


        }

        public static void AtualizaB2W(int iCodigoCliente)
        {
            int iPagina = 1;
            int iPorPagina = 50;
            double eQtdEstoque = -06011988;

            RestClient client = null;
            RestRequest oRequest = null;
            IRestResponse oResposta = null;
            int? iLocalEstoque31 = RetornaCodigoLocalEstoque("LE", "31");
            int? iLocalEstoque33 = RetornaCodigoLocalEstoque("LE", "33");
            DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
            string sKeyB2w = d.Rows[0]["KEYB2W"].ToString();
            string sUsuarioB2W = d.Rows[0]["USUARIOB2W"].ToString();
            string sAccountB2W = d.Rows[0]["ACCOUNTB2W"].ToString();
            d.Dispose();

            while (true)
            {
                try
                {
                    oResposta = null;
                    while (oResposta == null)
                    {
                        client = new RestClient("https://api.skyhub.com.br/products/?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                        //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                        //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
                        oRequest = new RestRequest(Method.GET);
                        oRequest.AddHeader("cache-control", "no-cache");
                        oRequest.AddHeader("Accept", "application/json");
                        oRequest.AddHeader("Content-Type", "application/json");
                        oRequest.AddHeader("x-Api-Key", sKeyB2w);
                        oRequest.AddHeader("X-User-Email", sUsuarioB2W);
                        oRequest.AddHeader("X-Accountmanager-Key", sAccountB2W);
                        oResposta = client.Execute(oRequest);

                        if (oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError)
                        {
                            oResposta = null;

                        }
                        else if (oResposta.StatusCode == HttpStatusCode.BadGateway)
                        {
                            oResposta = null;

                        }
                    }

                    ProdutosB2W oProdutoB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutosB2W>(oResposta.Content);

                    if (oProdutoB2W.products.Length == 0)
                        break;

                    foreach (interRegraNegocio.B2W.Product oProduto in oProdutoB2W.products)
                    {
                        try
                        {
                            string sSKU = oProduto.sku;
                            Console.WriteLine("Produto: " + oProduto.sku);
                            //if (oProduto.sku != "KIT33372202514")
                            //{
                            //    continue;
                            //}


                            Console.WriteLine(" Atualiza estoque B2W produto " + oProduto.sku);


                            int? iMarketplace = RetornaCodigoGlobal("MK", "B2W");

                            ProdutoComplemento oProdutoComplementoFortPlus = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(oProduto.sku, iMarketplace);
                            ProdutoFortePlus oProdutoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplementoFortPlus.cmIdProduto.ToString()).Content);

                            if (oProdutoFortPlus.prIdParent != null)
                            {
                                oProdutoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoFortPlus.prIdParent.ToString()).Content);
                                oProduto.sku = oProdutoFortPlus.prCodigo;
                            }

                            if (oProduto.sku.Contains("KIT"))
                            {

                                oResposta = null;

                                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                {
                                    client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + oProdutoFortPlus.id.ToString());
                                    RestRequest request = new RestRequest(Method.GET);
                                    request.AddHeader("Cache-Control", "no-cache");
                                    request.AddHeader("Accept", "*/*");
                                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                    request.AddHeader("Content-Type", "application/json");
                                    if (ClasseParametros.oJsonFortePluslogin == null)
                                        ClasseFuncoes.ConectaForteplus(5);
                                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                    oResposta = client.Execute(request);

                                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                    {
                                        ClasseFuncoes.ConectaForteplus(5);
                                    }
                                }

                                List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
                                float? eValorTotalComposicao = 0;
                                double eEstoquetemp = -06011988;
                                foreach (FortPlusProdutoComposicao oProdutoComposicao in oListFormaPagamento)
                                {
                                    int iLocalEstoque34 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "34");
                                    eQtdEstoque = ClasseFuncoes.RetornaSeTemEstoque(oProdutoComposicao.pcIdProdutoComposicao.ToString(), iLocalEstoque34);

                                    iLocalEstoque34 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");
                                    eQtdEstoque = eQtdEstoque + ClasseFuncoes.RetornaSeTemEstoque(oProdutoComposicao.pcIdProdutoComposicao.ToString(), iLocalEstoque34);

                                    int iLocalEstoque32 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "32");
                                    eQtdEstoque = eQtdEstoque + ClasseFuncoes.RetornaSeTemEstoque(oProdutoComposicao.pcIdProdutoComposicao.ToString(), iLocalEstoque32);

                                    if (eEstoquetemp == -06011988)
                                        eEstoquetemp = eQtdEstoque;
                                    else if (eQtdEstoque < eEstoquetemp)
                                        eEstoquetemp = eQtdEstoque;




                                }

                                eQtdEstoque = eEstoquetemp;
                            }

                            double eEstoque = RetornaEstoque(oProduto.sku);
                            eEstoque = eEstoque * 30 / 100;
                            eEstoque = Math.Floor(eEstoque);

                            if (eEstoque == 0)
                                continue;

                            oProduto.qty = (int)eEstoque;

                            B2WProdutoEstoquepreco oProdutoAtualiza = new B2WProdutoEstoquepreco();
                            oProdutoAtualiza.productEstoquePreco = new ProductPostEstoquepreco();

                            oProdutoAtualiza.productEstoquePreco.price = oProdutoComplementoFortPlus.cmPrecoDePor;
                            oProdutoAtualiza.productEstoquePreco.promotional_price = oProdutoAtualiza.productEstoquePreco.price;
                            oProdutoAtualiza.productEstoquePreco.qty = (float?)eEstoque;


                            while (true)
                            {




                                string sJSON = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoAtualiza);
                                sJSON = sJSON.Replace("productEstoquePreco", "product");

                                client = new RestClient("https://api.skyhub.com.br/products/" + sSKU.ToUpper());
                                oRequest = new RestRequest(Method.PUT);
                                oRequest.AddHeader("cache-control", "no-cache");
                                oRequest.AddHeader("Accept", "application/json");
                                oRequest.AddHeader("Content-Type", "application/json");
                                oRequest.AddHeader("x-Api-Key", sKeyB2w);
                                oRequest.AddHeader("X-User-Email", sUsuarioB2W);
                                oRequest.AddHeader("X-Accountmanager-Key", sAccountB2W);
                                oRequest.AddParameter("application/json", sJSON, ParameterType.RequestBody);
                                oResposta = client.Execute(oRequest);

                                Thread.Sleep(500);
                                if (oResposta.StatusCode == HttpStatusCode.NoContent)
                                    break;
                                else
                                {

                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine("Item nao encontrado " + oProduto.sku);
                        }
                    }
                }
                catch (Exception ex)
                {

                }
                iPagina++;

                Thread.Sleep(500);
            }


        }

        public static void AtualizaEstoque(TextBox editLog)
        {
            ClasseFuncoes.SalvaLogServicos("Envia Atualização de Produtos");

            int iPagina = 1;
            int iPorpagina = 50;

            MAGALUClasseFuncoes.AtualizaEstoqueProdutos(5);

        }

        public static void EnviaProdutosNovos(TextBox editLog)
        {
            ClasseFuncoes.SalvaLogServicos("Envia Produtos Novos");
            DataTable dtbProduto = ClasseParametros.ConsultaBancoMysql("SELECT * FROM PRODUTO WHERE ATUALIZADO = 0");

            foreach (DataRow r in dtbProduto.Rows)
            {
                try
                {
                    if (r["MARKETPLACE"].ToString().ToUpper().Contains("MAGAZINE"))
                    {
                        MAGALUClasseFuncoes.EnviaProdutosNovos(editLog, r["CODIGO"].ToString());
                    }
                }
                catch (Exception ex)
                {

                }
            }
        }

        static async void Bot_OnMessage(object sender, MessageEventArgs e)
        {
            if (e.Message.Text != null)
            {
                Console.WriteLine($"Received a text message in chat {e.Message.Chat.Id.ToString()}.");

                DataTable dtbContatos = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CONTATOSTELEGRAM WHERE CODIGOIDTELEGRAM = " + e.Message.Chat.Id.ToString());
                if (dtbContatos.Rows.Count == 0)
                {
                    Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                    string sSql = "INSERT INTO CONTATOSTELEGRAM(CODIGOIDTELEGRAM,NOME) VALUES(@CODIGOIDTELEGRAM,@NOME)";
                    ParametrosSQL.Add("CODIGOIDTELEGRAM", e.Message.Chat.Id.ToString());
                    ParametrosSQL.Add("NOME", e.Message.Chat.FirstName + " " + e.Message.Chat.LastName);
                    if (ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL))
                    {
                        ClasseParametros.oClienteTelegram.SendTextMessageAsync(
       chatId: e.Message.Chat,
       text: "Olá " + e.Message.Chat.FirstName + " " + e.Message.Chat.LastName + ",\nvocê receberá notificações da 2ELETRO aqui pelo telegram.\nObrigado :D :D"
       );
                    }
                    ParametrosSQL.Clear();
                }



            }
        }

        public static void GeraRemessa()
        {
            //Boleto2Net.Banco 

            //Boleto2Net.ArquivoRemessa oRemessa = new Boleto2Net.ArquivoRemessa();
            //oRemessa.TipoArquivo = Boleto2Net.TipoArquivo.CNAB240;







        }

        public static void EnviaMensagemTelegramAsync(string sMensagem, string sTipo, string sTipoMensagem, string sChave, int iCancelado = -1)
        {
            bool lRetorno = false;

            string sSql = "SELECT * FROM LOGMENSAGEM WHERE CODIGO ='" + sChave + "' AND TIPOMENSAGEM = '" + sTipoMensagem + "'";
            DataTable dtbContatos = ClasseParametros.ConsultaBancoMysql(sSql);
            bool lEnviarMensagem = true;
            if (dtbContatos.Rows.Count > 0)
            {
                DateTime dUltimaMensagem = DateTime.Parse(dtbContatos.Rows[0]["DATAHORA"].ToString());

                TimeSpan diferenca = DateTime.Now.Subtract(dUltimaMensagem);
                if (diferenca.TotalMinutes < 11)
                {
                    lEnviarMensagem = false;
                }
            }

            if (lEnviarMensagem)
            {
                bool lNovo = dtbContatos.Rows.Count == 0;
                sSql = "SELECT * FROM CONTATOSTELEGRAM WHERE TIPOMENSAGEM IN (" + sTipo + ")";
                if (iCancelado > -1)
                {
                    sSql += " AND MENSAGEMPEDIDOCANCELADO = " + iCancelado.ToString();
                }

                dtbContatos = ClasseParametros.ConsultaBancoMysql(sSql);

                foreach (DataRow r in dtbContatos.Rows)
                {
                    try
                    {
                        Telegram.Bot.Types.ChatId oChat = new Telegram.Bot.Types.ChatId(int.Parse(r["CODIGOIDTELEGRAM"].ToString()));
                        System.Threading.Tasks.Task<Telegram.Bot.Types.Message> oTarefaMensagem = ClasseParametros.oClienteTelegram.SendTextMessageAsync(oChat, sMensagem, Telegram.Bot.Types.Enums.ParseMode.Markdown, true);
                        oTarefaMensagem.Start();
                    }
                    catch (Exception ex)
                    {

                    }
                }

                if (lNovo)
                {
                    sSql = "INSERT INTO LOGMENSAGEM VALUES('" + sChave + "','" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "','" + sTipoMensagem + "')";
                    ClasseParametros.ExecutabancoMySql(sSql);
                }
                else
                {
                    sSql = "UPDATE LOGMENSAGEM SET DATAHORA='" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "' WHERE CODIGO = '" + sChave + "' AND TIPOMENSAGEM='" + sTipoMensagem + "'";
                    ClasseParametros.ExecutabancoMySql(sSql);
                }

                dtbContatos.Dispose();
            }

        }

        public static void EnviaImagemTelegramAsync(string sMensagem, string sTipo)
        {
            bool lRetorno = false;

            DataTable dtbContatos = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CONTATOSTELEGRAM WHERE TIPOMENSAGEM IN (" + sTipo + ")");
            foreach (DataRow r in dtbContatos.Rows)
            {
                try
                {
                    Telegram.Bot.Types.ChatId oChat = new Telegram.Bot.Types.ChatId(int.Parse(r["CODIGOIDTELEGRAM"].ToString()));
                    ClasseParametros.oClienteTelegram.SendChatActionAsync(oChat, Telegram.Bot.Types.Enums.ChatAction.UploadPhoto);
                    var fileStream = new FileStream(sMensagem, FileMode.Open, FileAccess.Read, FileShare.Read);
                    var fileName = sMensagem.Split(Path.DirectorySeparatorChar).Last();
                    ClasseParametros.oClienteTelegram.SendPhotoAsync(
                       chatId: oChat.Identifier,
                       photo: new InputOnlineFile(fileStream, fileName),
                       caption: "Etiquetas não impressas"
                   );
                }
                catch
                {

                }
            }
        }

        public static void EnviaMensagemMLAsync(int iCliente)
        {
            try
            {
                IRestResponse oResposta = null;

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                    RestRequest request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        break;
                    }
                }
                List<Pedido> oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);
                int? iVendedor = RetornaVendedorFortPlus("MERCADO LIVRE");
                List<Pedido> lstPedidoTemp = oPedido.Where(x => x.dmaInclusao > DateTime.Now.AddDays(-35) && x.mvEntidade == "PDV" && x.mvIdVendedor == iVendedor).ToList();
                List<Pedido> lstPedidoTemp1 = lstPedidoTemp.Where(x => x.mvIdExterno == "2480798708").ToList();


                foreach (Pedido oPedidoAtual in lstPedidoTemp)
                {


                    Console.WriteLine(" Enviando mensagem pedido " + oPedidoAtual.mvIdExterno + " Data: " + oPedidoAtual.dmaInclusao.ToString());
                    if (oPedidoAtual.mvIdExterno == "2523799841")
                    {

                    }
                    if (oPedidoAtual.mvIdExterno == "2485397433")
                    {

                    }
                    string sCodigoUsado = "";
                    try
                    {
                        MercadoLivrePedido oPedidoML = null;
                        List<Pedido> lstPedidoNota = oPedido.Where(x => x.mvIdParent == oPedidoAtual.id).ToList();

                        while (oPedidoML == null)
                        {
                            if (ClasseParametros.oMeli == null || ClasseParametros.oMeli.ClientId == null)
                            {
                                ConectaMercadoLivreAsync(iCliente);
                            }

                            List<Parameter> ps = new List<Parameter>();
                            Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                            ps.Add(p);

                            p = new Parameter("seller", ClasseParametros.oMeli.UserId, ParameterType.QueryString);
                            ps.Add(p);

                            p = new Parameter("q", oPedidoAtual.mvIdExterno, ParameterType.QueryString);
                            ps.Add(p);

                            oResposta = ClasseParametros.oMeli.Get("/orders/search", ps);

                            oPedidoML = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivrePedido>(oResposta.Content);

                            if (oResposta.StatusCode == 0)
                            {
                                break;
                            }

                        }

                        if (oPedidoML.results[0].shipping.status == "cancelled")
                        {
                            continue;
                        }

                        sCodigoUsado = oPedidoML.results[0].id.ToString();
                        string sStatus = oPedidoML.results[0].shipping.status;
                        if (oPedidoML.results[0].pack_id != null)
                        {
                            sCodigoUsado = oPedidoML.results[0].pack_id.ToString();

                        }

                        MercadoLivreEntrega oEntregaML = null;
                        while (oEntregaML == null)
                        {
                            List<Parameter> ps = new List<Parameter>();
                            Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                            ps.Add(p);


                            oResposta = ClasseParametros.oMeli.Get("/shipments/" + oPedidoML.results[0].shipping.id, ps);

                            oEntregaML = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);

                        }
                        sStatus = oEntregaML.status;

                        // Mensagens boas vindas
                        MercadoLivreMensagens oMensagemML = null;
                        while (oMensagemML == null)
                        {
                            List<Parameter> ps = new List<Parameter>();
                            Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                            ps.Add(p);
                            oResposta = ClasseParametros.oMeli.Get("/messages/packs/" + sCodigoUsado + "/sellers/" + ClasseParametros.oMeli.UserId, ps);


                            oMensagemML = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreMensagens>(oResposta.Content);
                        }

                        DataTable dtbPedidoAtual = new DataTable();
                        if (!oResposta.Content.ToLower().Contains("identificamos que seu pedido foi entregue")) // pedido entregue
                        {
                            if (sStatus == "delivered")
                            {
                                dtbPedidoAtual = ClasseParametros.ConsultaBancoMysql("SELECT * FROM MENSAGEMVENDAS WHERE IDVENDA='" + sCodigoUsado + "' AND TIPOMENSAGEM = 3");
                                if (dtbPedidoAtual.Rows.Count == 0)
                                {
                                    string sMensagem = string.Format(ClasseParametros.sMensagemPedidoEntregue, oPedidoML.results[0].buyer.first_name + " " + oPedidoML.results[0].buyer.last_name);
                                    EnviaMensagemMercadoLivreAsync(sCodigoUsado, oPedidoML.results[0].seller.id.ToString(), oPedidoML.results[0].buyer.id.ToString(), sMensagem, "", 3);
                                }
                            }
                        }

                        if (!oResposta.Content.ToLower().Contains("em instantes iniciaremos a emissão da nota fiscal e preparação do pedido para expedição."))// pedido novo
                        {
                            if (sStatus == "ready_to_ship")
                            {
                                dtbPedidoAtual = ClasseParametros.ConsultaBancoMysql("SELECT * FROM MENSAGEMVENDAS WHERE IDVENDA='" + sCodigoUsado + "' AND TIPOMENSAGEM = 0");
                                if (dtbPedidoAtual.Rows.Count == 0)
                                {
                                    string sMensagem = string.Format(ClasseParametros.sMensagemAcabouComprar, oPedidoML.results[0].buyer.first_name + " " + oPedidoML.results[0].buyer.last_name);
                                    EnviaMensagemMercadoLivreAsync(sCodigoUsado, oPedidoML.results[0].seller.id.ToString(), oPedidoML.results[0].buyer.id.ToString(), sMensagem, "", 0);
                                }
                            }
                        }

                        if (!oResposta.Content.ToLower().Contains("seu pedido já foi enviado para expedição"))// Pedido Faturado
                        {
                            if ((sStatus == "ready_to_ship" || sStatus == "shipped") && oPedidoML.results[0].shipping.status != "delivered")
                            {

                                dtbPedidoAtual = ClasseParametros.ConsultaBancoMysql("SELECT * FROM MENSAGEMVENDAS WHERE IDVENDA='" + sCodigoUsado + "' AND TIPOMENSAGEM = 1");

                                if (dtbPedidoAtual.Rows.Count == 0)
                                {
                                    DataTable dtbMarketPlace = ClasseParametros.ConsultaBancoMysql("SELECT * FROM XMLVENDAS WHERE NOTAFISCAL = '" + lstPedidoNota[0].mvChaveAcesso + "'");
                                    MercadoLivreAnexo oAnexo = null;

                                    string sXML = Encoding.ASCII.GetString((byte[])dtbMarketPlace.Rows[0]["XML"]);
                                    if (sXML != "")
                                    {
                                        string sPasta = Directory.GetCurrentDirectory();
                                        DanfeViewModel oModel = DanfeViewModelCreator.CriarDeStringXml(sXML);
                                        if (!Directory.Exists(sPasta + "\\PDFNOTATEMP\\"))
                                        {
                                            Directory.CreateDirectory(sPasta + "\\PDFNOTATEMP\\");
                                        }
                                        string sNota = oModel.NfNumero.ToString();
                                        string sChaveNota = oModel.ChaveAcesso;

                                        //Inicia o Danfe com o modelo criado
                                        using (Danfe danfe = new Danfe(oModel))
                                        {
                                            danfe.AdicionarLogoImagem(sPasta + "\\2eletro.jpg");
                                            danfe.Gerar();
                                            danfe.Salvar(sPasta + "\\PDFNOTATEMP\\NOTAPDFTEMP.pdf");
                                        }

                                        oResposta = null;

                                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
                                        {
                                            RestClient client = new RestClient("https://api.mercadolibre.com/messages/attachments?access_token=" + ClasseParametros.oMeli.AccessToken);
                                            RestRequest request = new RestRequest(Method.POST);
                                            request.AddHeader("Cache-Control", "no-cache");
                                            request.AddHeader("Accept", "*/*");
                                            request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                            request.AddHeader("Content-Type", "multipart/form-data");
                                            request.AddFile("file", sPasta + "\\PDFNOTATEMP\\NOTAPDFTEMP.pdf");

                                            oResposta = client.Execute(request);

                                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                            {
                                                ConectaForteplus(5);
                                            }
                                        }
                                        oAnexo = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreAnexo>(oResposta.Content);
                                    }

                                    string sMensagem = string.Format(ClasseParametros.sMensagemNotaGerada, oPedidoML.results[0].buyer.first_name + " " + oPedidoML.results[0].buyer.last_name);
                                    EnviaMensagemMercadoLivreAsync(sCodigoUsado, oPedidoML.results[0].seller.id.ToString(), oPedidoML.results[0].buyer.id.ToString(), sMensagem, oAnexo.id, 1);
                                }
                            }
                        }

                        if (!oResposta.Content.ToLower().Contains("enviamos seu pedido conforme"))// pedido expedido
                        {
                            if (sStatus == "shipped")
                            {
                                dtbPedidoAtual = ClasseParametros.ConsultaBancoMysql("SELECT * FROM MENSAGEMVENDAS WHERE IDVENDA='" + sCodigoUsado + "' AND TIPOMENSAGEM = 2");
                                if (dtbPedidoAtual.Rows.Count == 0)
                                {
                                    string sMensagem = string.Format(ClasseParametros.sMensagemPedidoEnviado, oPedidoML.results[0].buyer.first_name + " " + oPedidoML.results[0].buyer.last_name, oEntregaML.tracking_number);
                                    EnviaMensagemMercadoLivreAsync(sCodigoUsado, oPedidoML.results[0].seller.id.ToString(), oPedidoML.results[0].buyer.id.ToString(), sMensagem, "", 2);
                                }
                            }
                        }

                        //if (oPedidoAtual.Count == 0)
                        //{
                        //    //string sSql = "UPDATE VENDAMARKETPLACE SET STATUSMENSAGEM = 3 WHERE TRIM(ID) ='" + r["ID"].ToString() + "'";
                        //    //ClasseParametros.ExecutabancoMySql(sSql);
                        //    continue;
                        //}
                        //Pedido oPedidoTemp = oPedidoAtual[0];

                    }
                    catch (Exception ex)
                    {
                        if (ClasseParametros.oMeli == null)
                        {
                            ConectaMercadoLivreAsync(iCliente);
                        }
                    }


                }
            }
            catch
            {

            }
        }


        public static void GeraRelatorioVendasMLAsync()
        {
            //int iOffset = 0;
            //int ilimit = 50;
            //IRestResponse oResposta = null;
            //MercadoLivrePedido oPedidoMercadoLivre = null;

            //string sRealtorio = "";
            //oResposta = null;
            //while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            //{
            //    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
            //    RestRequest request = new RestRequest(Method.GET);
            //    request.AddHeader("Cache-Control", "no-cache");
            //    request.AddHeader("Accept", "*/*");
            //    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //    request.AddHeader("Content-Type", "application/json");
            //    if (ClasseParametros.oJsonFortePluslogin == null)
            //        ConectaForteplus(5);
            //    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //    oResposta = client.Execute(request);

            //    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //    {
            //        ClasseFuncoes.ConectaForteplus(5);
            //    }
            //    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
            //    {
            //        break;
            //    }
            //}
            //List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);

            //while (true)
            //{
            //    try
            //    {

            //        List<Parameter> ps = new List<Parameter>();
            //        Parameter p = new Parameter();
            //        p.Name = "access_token";
            //        p.Value = ClasseParametros.oMeli.AccessToken;
            //        ps.Add(p);
            //        p = new Parameter();
            //        p.Name = "seller";
            //        p.Value = ClasseParametros.oUsuarioMercadoLivre.id;
            //        ps.Add(p);
            //        p = new Parameter();
            //        p.Name = "order.status";
            //        p.Value = "paid";
            //        ps.Add(p);
            //        p = new Parameter();
            //        p.Name = "offset";
            //        p.Value = iOffset;
            //        ps.Add(p);
            //        p = new Parameter();
            //        p.Name = "limit";
            //        p.Value = ilimit;
            //        ps.Add(p);



            //        var oRespostaPedido = ClasseParametros.oMeli.Get("/orders/search", ps);


            //        oPedidoMercadoLivre = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivrePedido>(oRespostaPedido.Content);


            //        if (oPedidoMercadoLivre.results.Length == 0)
            //            break;

            //        List<Result> lstRelatorio = oPedidoMercadoLivre.results.Where(x => x.shipping.status != "delivered").ToList();

            //        if (oPedidoMercadoLivre.results.Length == 0)
            //            break;

            //        foreach (Result oPedido in lstRelatorio)
            //        {
            //            List<Pedido> lstPedidoTemp = lstPedido.Where(x => x.mvIdExterno == oPedido.id.ToString() && x.mvEntidade == "NFE" && x.dmaInclusao > DateTime.Now.AddDays(-3)).ToList();
            //            if (lstPedidoTemp.Count == 0)
            //                continue;
            //            sRealtorio += lstPedidoTemp[0].mvDocto.ToString() + "-" + oPedido.buyer.first_name + " " + oPedido.buyer.last_name + "\r\n";

            //        }
            //        iOffset++;

            //    }
            //    catch
            //    { }
            //}



        }

        public static void EnviaMensagemPedidoCanceladoAsync(int iCliente)
        {

            //IRestResponse oResposta = null;
            //MercadoLivrePedido oPedidoML = null;
            //try
            //{
            //    if (ClasseParametros.oMeli == null)
            //    {

            //        ConectaMercadoLivreAsync(iCliente);
            //    }
            //    while (oPedidoML == null)
            //    {
            //        List<Parameter> ps = new List<Parameter>();
            //        Parameter p = new Parameter();
            //        p.Name = "access_token";
            //        p.Value = ClasseParametros.oMeli.AccessToken;
            //        ps.Add(p);
            //        p = new Parameter();
            //        p.Name = "seller";
            //        p.Value = ClasseParametros.oUsuarioMercadoLivre.id;
            //        ps.Add(p);
            //        p = new Parameter();
            //        p.Name = "order.status";
            //        p.Value = "cancelled";
            //        ps.Add(p);
            //        p = new Parameter();
            //        p.Name = "sort";
            //        p.Value = "date_desc";
            //        ps.Add(p);

            //        var oRespostaPedido = ClasseParametros.oMeli.Get("/orders/search", ps);

            //        oPedidoML = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivrePedido>(oRespostaPedido.Content);
            //        //Console.WriteLine(oResposta.Content);

            //    }

            //    foreach (Result oPedido in oPedidoML.results)
            //    {
            //        Console.WriteLine(" Pedido " + oPedido.id.ToString());

            //        Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

            //        string sSql = "SELECT * FROM VENDAMARKETPLACE WHERE ID = @ID AND PEDIDOCANCELADO = @PEDIDOCANCELADO";
            //        ParametrosSQL.Add("ID", oPedido.id);
            //        ParametrosSQL.Add("PEDIDOCANCELADO", 0);

            //        DataTable dtbPedidoML = ClasseParametros.ConsultaBancoMysql(sSql, ParametrosSQL);
            //        if (dtbPedidoML.Rows.Count > 0)
            //        {
            //            string sMensagem = "Pedido Cancelado Mercado Livre:\n";
            //            sMensagem += "Pedido: " + oPedido.id.ToString() + "\n";
            //            sMensagem += "Cliente: " + oPedido.buyer.first_name + " " + oPedido.buyer.last_name + "\n";
            //            DateTime dCancelado = DateTime.Parse(oPedido.date_last_updated.ToString());
            //            string sCancelado = dCancelado.ToString("dd/MM/yyyy hh:mm:ss");
            //            sMensagem += "as " + sCancelado;
            //            EnviaMensagemTelegramAsync(sMensagem, "0,1", "Pedido Cancelado", oPedido.id.ToString(), 1);
            //            sSql = "UPDATE VENDAMARKETPLACE SET STATUSMENSAGEMCANCELADO = 1, PEDIDOCANCELADO = 1 WHERE ID = " + oPedido.id.ToString();
            //            ClasseParametros.ExecutabancoMySql(sSql);
            //            //("MM/dd/yyyy HH:mm:ss")

            //        }
            //    }
            //}
            //catch
            //{
            //    if (ClasseParametros.oMeli == null)
            //    {
            //        ConectaMercadoLivreAsync(iCliente);
            //    }
            //}

        }

        public static Pedido RetornaPedidoFortePlusPorDocto(string sDocto)
        {

            IRestResponse oResposta = null;
            DanfeViewModel oRetorno = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    break;
                }
            }

            List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);
            List<Pedido> lstPedidoFiltrado = lstPedido.Where(x => x.mvDocto.ToString() == sDocto && x.mvEntidade == "NFE").ToList();

            if (lstPedidoFiltrado.Count == 0)
            {
                return null;
            }

            Pedido oPedido = lstPedidoFiltrado[0];
            if (oPedido == null)
                return null;
            return oPedido;
        }

        public static List<PedidoItemFortPlus> RetornaPedidosItensFortePlus()
        {

            IRestResponse oResposta = null;
            DanfeViewModel oRetorno = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/PedidoItem");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    break;
                }
            }

            List<PedidoItemFortPlus> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PedidoItemFortPlus>>(oResposta.Content);

            return lstPedido;
        }

        public static List<Pedido> RetornaPedidosFortePlus()
        {

            IRestResponse oResposta = null;
            DanfeViewModel oRetorno = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    break;
                }
            }

            List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);

            return lstPedido;
        }

        public static Pedido RetornaPedidoFortePlusPorId(string sID)
        {

            IRestResponse oResposta = null;
            DanfeViewModel oRetorno = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    break;
                }
            }

            List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);
            List<Pedido> lstPedidoFiltrado = lstPedido.Where(x => x.id.ToString() == sID && x.mvEntidade == "NFE").ToList();

            if (lstPedidoFiltrado.Count == 0)
            {
                return null;
            }

            Pedido oPedido = lstPedidoFiltrado[0];
            if (oPedido == null)
                return null;
            return oPedido;
        }


        public static void CorrigeEndereco()
        {
            IRestResponse oResposta = null;
            DanfeViewModel oRetorno = null;
            RestClient client = null;
            RestRequest request = null;





            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    break;
                }
            }


            List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);
            List<Pedido> lstPedidoFiltrado = lstPedido.Where(x => x.mvIdVendedor == 72 && x.mvStatus == "0" && x.mvEntidade == "PDV" && x.dmaInclusao > DateTime.Parse("01/04/2020")).ToList();


            foreach (Pedido oPedido in lstPedidoFiltrado)
            {
                oResposta = null;
                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    client = new RestClient(ClasseParametros.sURlFortPlus + "/api/FinanceiroMovto/" + oPedido.id.ToString());
                    request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        break;
                    }
                }


                if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                {

                    FortPlusFinanceiroReduzido oFinanceiro = new FortPlusFinanceiroReduzido();
                    oFinanceiro.email = "rodrigonunes@2eletro.com.br";
                    oFinanceiro.idFilial = oPedido.idFilial;
                    oFinanceiro.idMovto = oPedido.id;
                    oFinanceiro.idFormaPagamento = RetornaCodigoFormaPagamento("CREDIT_CARD");
                    oFinanceiro.idCondicaoPagamento = RetornaCodigoCondicaoPagamento("À VISTA");
                    oFinanceiro.valor = Math.Round(double.Parse(oPedido.mvValorTotal.ToString()), 3);
                    oFinanceiro = CadastraFinanceiroReduzido(oFinanceiro);
                }



            }


            foreach (Pedido oPedido in lstPedidoFiltrado)
            {
                oResposta = null;

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente/Id/" + oPedido.mvIdPessoa.ToString());
                    request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        break;
                    }
                }
                ClienteFortPlus oCliente = Newtonsoft.Json.JsonConvert.DeserializeObject<ClienteFortPlus>(oResposta.Content);

                string sBairro = "";
                //List<ClienteFortPlus> lstClienteFiltrado = lstPedido.Where(x => x.).ToList();
                if (oCliente.psBairro == null)
                {

                    enderecoERP oERP = ClasseCorreiosLocal.RetornaEnderecoPorCEP(oCliente.psCep);
                    sBairro = oERP.bairro;
                    if (sBairro == "")
                    {
                        sBairro = "Bairro";
                    }

                    oCliente.id = oCliente.id;
                    oCliente.psCodigo = oCliente.psCodigo;
                    oCliente.psBairro = sBairro;

                    string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);

                    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.NoContent)
                    {
                        client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente/" + oCliente.id);
                        request = new RestRequest(Method.PUT);
                        request.AddHeader("Cache-Control", "no-cache");
                        request.AddHeader("Accept", "*/*");
                        request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                        request.AddHeader("Content-Type", "application/json");
                        request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                        if (ClasseParametros.oJsonFortePluslogin == null)
                            ConectaForteplus(5);
                        request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                        oResposta = client.Execute(request);

                        if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                        {
                            ClasseFuncoes.ConectaForteplus(5);
                        }

                    }
                }




            }





        }

        public static Pedido RetornaPedidoFortePlusPorIdExterno(string sIDExterno)
        {

            IRestResponse oResposta = null;
            DanfeViewModel oRetorno = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    break;
                }
            }


            List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);
            List<Pedido> lstPedidoFiltrado = lstPedido.Where(x => x.mvIdExterno == sIDExterno && x.mvEntidade == "NFE").ToList();

            Pedido oPedidoRetorno = null;
            if (lstPedidoFiltrado.Count > 0)
                oPedidoRetorno = lstPedidoFiltrado[0];




            return oPedidoRetorno;
        }

        public static void EnviaNotasFaturadasB2W(int iCodigoCliente)
        {
            try
            {
                RestRequest oRequest = null;
                IRestResponse oResposta = null;
                RestClient client = null;

                DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                string sKey = d.Rows[0]["KEYB2W"].ToString();
                string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                string sAccount = "0MDxaksT8d";
                d.Dispose();

                int iPagina = 1;
                int iPorPagina = 50;

                List<Pedido> oListaPedidoFortePlus = RetornaListaPedidoFortePlus();
                List<FortPlusXML> oListaXMLFortePlus = RetornaListaXMLFortPlus();
                List<ProdutoFortePlus> oListaProdutosFortePlus = RetornaListProdutosFortPlus();

                List<string> lstStatus = new List<string>();
                lstStatus.Add("payment_received");
                lstStatus.Add("order_invoiced");

                foreach (string sStatus in lstStatus)
                {
                    iPagina = 1;
                    while (true)
                    {
                        oResposta = null;
                        while (oResposta == null)
                        {
                            //client = new RestClient("https://api.skyhub.com.br/orders?filters[statuses][]=payment_received&page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                            //order_invoiced
                            client = new RestClient("https://api.skyhub.com.br/orders?filters[statuses][]=" + sStatus + "&page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                            //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());


                            //client = new RestClient("https://api.skyhub.com.br/orders/Lojas Americanas-407890045");

                            ///
                            //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                            //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
                            oRequest = new RestRequest(Method.GET);
                            oRequest.AddHeader("cache-control", "no-cache");
                            oRequest.AddHeader("Accept", "application/json");
                            oRequest.AddHeader("Content-Type", "application/json");
                            oRequest.AddHeader("x-Api-Key", sKey);
                            oRequest.AddHeader("X-User-Email", sUsuario);
                            oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                            oResposta = client.Execute(oRequest);

                            if (oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError)
                            {
                                oResposta = null;

                            }
                            else if (oResposta.StatusCode == HttpStatusCode.BadGateway)
                            {
                                oResposta = null;

                            }
                        }
                        Thread.Sleep(2000);

                        if (oResposta.Content == "Account  not found")
                        {
                            continue;
                        }
                        if (oResposta.Content.Contains("504 Gateway Time-ou"))
                        {
                            continue;
                        }


                        B2WPedidos lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPedidos>(oResposta.Content);
                        if (lstPedido.orders == null || lstPedido.orders.Length == 0)
                        {
                            break;
                        }

                        foreach (B2WPedido oPedido in lstPedido.orders)
                        {
                            if (oPedido.code.Contains("276421954301"))
                            {

                            }

                            //if (oPedido.invoices.Length > 0)
                            //{
                            //    continue;
                            //}

                            //if(oPedido.code.Trim().Contains("Americanas Empresas"))
                            //{
                            //    oPedido.code = oPedido.code.Replace("Americanas Empresas", "Lojas Americanas");
                            //}

                            DataTable dtbMarketPlace = ClasseParametros.ConsultaBancoMysql("SELECT * FROM XMLVENDAS WHERE PEDIDO = '" + oPedido.code.Trim() + "'");
                            List<Pedido> lstPedidoFiltrado = oListaPedidoFortePlus.Where(x => x.mvIdExterno == oPedido.code.Trim() && x.mvEntidade == "NFE").ToList();
                            Pedido oPedidoFortePlus = null;
                            if (lstPedidoFiltrado.Count > 0)
                                oPedidoFortePlus = lstPedidoFiltrado[0];

                            if (oPedidoFortePlus == null)
                                continue;

                            Console.WriteLine("Envia nota do pedido " + oPedido.code.Trim());

                            DanfeViewModel oDanfe = null;
                            string sXML = "";
                            if (dtbMarketPlace.Rows.Count == 0)
                            {
                                List<FortPlusXML> oListXMLFiltrado = oListaXMLFortePlus.Where(x => x.trIdMovto == oPedidoFortePlus.id).ToList();
                                if (oListXMLFiltrado.Count == 0)
                                    continue;
                                sXML = oListXMLFiltrado[0].trArquivoRetorno;
                            }
                            else
                            {
                                //sXML = System.Text.Encoding.UTF8.GetString(dtbMarketPlace.Rows[0]["XML"]);;

                                sXML = Encoding.ASCII.GetString((byte[])dtbMarketPlace.Rows[0]["XML"]);
                            }


                            if (sXML != null && sXML != "")
                            {
                                string sPasta = Directory.GetCurrentDirectory();
                                oDanfe = DanfeViewModelCreator.CriarDeStringXml(sXML);
                            }

                            if (oDanfe == null)
                            {
                                continue;
                            }

                            B2WInvoiced oFaturado = new B2WInvoiced();
                            oFaturado.status = "order_invoiced";
                            InvoiceInvoiced oNota = new InvoiceInvoiced();
                            oNota.issue_date = ((DateTime)oDanfe.DataHoraEmissao).ToString("yyyy-MM-ddTHH:mm:ss") + "-03:00";
                            oNota.key = oDanfe.ChaveAcesso;
                            oNota.volume_qty = int.Parse(oDanfe.Transportadora.QuantidadeVolumes.ToString());
                            oFaturado.invoice = oNota;

                            string sJSON = Newtonsoft.Json.JsonConvert.SerializeObject(oFaturado);
                            oResposta = null;
                            while (oResposta == null)
                            {
                                client = new RestClient("https://api.skyhub.com.br/orders/" + oPedido.code + "/invoice");
                                oRequest = new RestRequest(Method.POST);
                                oRequest.AddHeader("cache-control", "no-cache");
                                oRequest.AddHeader("Accept", "application/json");
                                oRequest.AddHeader("Content-Type", "application/json");
                                oRequest.AddHeader("x-Api-Key", sKey);
                                oRequest.AddHeader("X-User-Email", sUsuario);
                                oRequest.AddParameter("application/json", sJSON, ParameterType.RequestBody);
                                oResposta = client.Execute(oRequest);
                                if (oResposta.StatusCode == HttpStatusCode.Created)
                                {
                                    break;
                                }
                            }

                            Thread.Sleep(1000);

                            // Atualiza status no forteplus
                            oPedidoFortePlus.mvIdStatus = 623;

                            string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oPedidoFortePlus);

                            oResposta = null;

                            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                            {
                                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/" + oPedidoFortePlus.id);
                                RestRequest request = new RestRequest(Method.PUT);
                                request.AddHeader("Cache-Control", "no-cache");
                                request.AddHeader("Accept", "*/*");
                                request.AddHeader("Content-Type", "application/json");
                                request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                                if (ClasseParametros.oJsonFortePluslogin == null)
                                    ConectaForteplus(5);
                                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                oResposta = client.Execute(request);

                                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                {
                                    ClasseFuncoes.ConectaForteplus(5);
                                }
                                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                                {
                                    break;
                                }
                                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NoContent)
                                {

                                    break;
                                }

                            }

                            //if(oDanfe.Transportadora.RazaoSocial.Contains("jadlog"))
                            //{
                            //    B2WEnvioTracking oEnvioTracking = new B2WEnvioTracking();
                            //    oEnvioTracking.shipment= new ShipmentEnvioTracking();
                            //    oEnvioTracking.shipment.code = oPedido.code;
                            //    oEnvioTracking.shipment.delivered_carrier_date =DateTime.Parse(DateTime.Now.ToString("yyyy-MM-dd") + "T18:00:00");
                            //    List<PedidoItemFortPlus> oListaPedidoItemFortePlus = RetornaItensPedido(oPedidoFortePlus.id);

                            //    ItemEnvioTracking[] aItem = new ItemEnvioTracking[oListaPedidoItemFortePlus.Count];

                            //    int i = 0;
                            //    foreach(PedidoItemFortPlus oItem in oListaPedidoItemFortePlus)
                            //    {
                            //       List<ProdutoFortePlus> oListaProdutosFortePlusTemp


                            //        //aItem[i].sku = oItem.co
                            //    }







                            //    //oEnvioTracking.shipment.

                            //    InvoiceInvoiced oNota = new InvoiceInvoiced();
                            //    string dAgora = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");
                            //    oNota.issue_date = DateTime.Parse(dAgora);
                            //    oNota.issue_date = oNota.issue_date.AddHours(3);
                            //    oNota.key = oDanfe.ChaveAcesso;
                            //    oNota.volume_qty = int.Parse(oDanfe.Transportadora.QuantidadeVolumes.ToString());
                            //    oFaturado.invoice = oNota;

                            //    string sJSON = Newtonsoft.Json.JsonConvert.SerializeObject(oFaturado);

                            //    client = new RestClient("https://api.skyhub.com.br/orders/" + oPedido.code + "/invoice");
                            //    oRequest = new RestRequest(Method.POST);
                            //    oRequest.AddHeader("cache-control", "no-cache");
                            //    oRequest.AddHeader("Accept", "application/json");
                            //    oRequest.AddHeader("Content-Type", "application/json");
                            //    oRequest.AddHeader("x-Api-Key", sKey);
                            //    oRequest.AddHeader("X-User-Email", sUsuario);
                            //    oRequest.AddParameter("application/json", sJSON, ParameterType.RequestBody);
                            //    oResposta = client.Execute(oRequest);










                            //}
                            ////}
                        }
                        iPagina += 1;

                    }

                }
            }
            catch (Exception ex)
            {

            }
        }

        public static List<FortPlusXML> RetornaListaXMLFortPlus()
        {
            IRestResponse oResposta = null;
            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Transmissao/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<FortPlusXML> oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusXML>>(oResposta.Content);

            return oListXML;
        }

        public static List<Pedido> RetornaListaPedidoFortePlus()
        {
            IRestResponse oResposta = null;
            DanfeViewModel oRetorno = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    break;
                }
            }


            List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);

            return lstPedido;
        }

        public static void SalvaXMLBling(int iCodigoCliente)
        {
            try
            {

                IRestResponse oResposta = null;

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Transmissao");
                    RestRequest request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                }
                List<FortPlusXML> oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusXML>>(oResposta.Content);

                //oListXML = oListXML.Where(x => x.trChaveAcesso.Contains("25496")).ToList();



                List<FortPlusXML> oListXMLFiltrado = oListXML.Where(x => x.dmaInclusao > DateTime.Now.AddDays(-7) && x.trTipo.Trim() == "A" && x.trStatus.Trim() == "1").ToList();




                #region RetornaPedidos
                oResposta = null;

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                    RestRequest request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                }
                List<Pedido> oListPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);

                #endregion

                foreach (FortPlusXML oXML in oListXMLFiltrado)
                {
                    Console.WriteLine(" Salvando XML da Nota " + oXML.trDocto.ToString());


                    if (oXML.trChaveAcesso.Contains("18443"))
                    {

                    }

                    DataTable dtbXMLVendas = ClasseParametros.ConsultaBancoMysql("SELECT * FROM XMLVENDAS WHERE NOTAFISCAL = '" + oXML.trChaveAcesso + "'");
                    List<Pedido> oListPedidoFiltrado = oListPedido.Where(x => x.id == oXML.trIdMovto).ToList();
                    if (oListPedidoFiltrado.Count == 0)
                    {
                        continue;
                    }
                    //Pedido oPedido = RetornaPedidoFortePlusPorId(oXML.trIdMovto.ToString());
                    Pedido oPedido = oListPedidoFiltrado[0];
                    if (oPedido == null)
                        continue;

                    Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                    if (dtbXMLVendas.Rows.Count == 0 || dtbXMLVendas.Rows[0]["XML"].ToString() == "")
                    {

                        ParametrosSQL.Clear();
                        ParametrosSQL.Add("NOTAFISCAL", oXML.trChaveAcesso);
                        ParametrosSQL.Add("XML", oXML.trArquivoRetorno);
                        ParametrosSQL.Add("DATA", DateTime.Now);
                        ParametrosSQL.Add("STATUS", 0);
                        ParametrosSQL.Add("PEDIDO", oPedido.mvIdExterno);

                        ClasseParametros.ExecutabancoMySql("INSERT INTO XMLVENDAS(NOTAFISCAL,XML,DATA,STATUS,PEDIDO) VALUES (@NOTAFISCAL,@XML,@DATA,@STATUS,@PEDIDO)", ParametrosSQL);

                        ParametrosSQL.Clear();
                        dtbXMLVendas.Dispose();
                    }
                    else if (dtbXMLVendas.Rows[0]["PEDIDO"].ToString() == "" || dtbXMLVendas.Rows[0]["PEDIDO"].ToString() == "0")
                    {
                        ParametrosSQL.Clear();
                        ParametrosSQL.Add("NOTAFISCAL", oXML.trChaveAcesso);
                        ParametrosSQL.Add("XML", oXML.trArquivoRetorno);
                        ParametrosSQL.Add("DATA", DateTime.Now);
                        ParametrosSQL.Add("STATUS", 0);
                        ParametrosSQL.Add("PEDIDO", oPedido.mvIdExterno);
                        ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET XML=@XML,DATA=@DATA,STATUS=@STATUS,PEDIDO = @PEDIDO WHERE NOTAFISCAL = @NOTAFISCAL", ParametrosSQL);
                    }
                }
            }
            catch { }
        }


        public static void BaixaXML(int iCodigoCliente)
        {
            try
            {

                IRestResponse oResposta = null;

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Transmissao");
                    RestRequest request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                }
                List<FortPlusXML> oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusXML>>(oResposta.Content);

                //oListXML = oListXML.Where(x => x.trChaveAcesso.Contains("25496")).ToList();



                List<FortPlusXML> oListXMLFiltrado = oListXML.Where(x => x.dmaInclusao > DateTime.Now.AddDays(-7) && x.trTipo.Trim() == "A" && x.trStatus.Trim() == "1").ToList();




                #region RetornaPedidos
                oResposta = null;

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                    RestRequest request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                }
                List<Pedido> oListPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);

                #endregion

                foreach (FortPlusXML oXML in oListXMLFiltrado)
                {
                    Console.WriteLine(" Salvando XML da Nota " + oXML.trDocto.ToString());


                    if (oXML.trChaveAcesso.Contains("18443"))
                    {

                    }

                    DataTable dtbXMLVendas = ClasseParametros.ConsultaBancoMysql("SELECT * FROM XMLVENDAS WHERE NOTAFISCAL = '" + oXML.trChaveAcesso + "'");
                    List<Pedido> oListPedidoFiltrado = oListPedido.Where(x => x.id == oXML.trIdMovto).ToList();
                    if (oListPedidoFiltrado.Count == 0)
                    {
                        continue;
                    }
                    //Pedido oPedido = RetornaPedidoFortePlusPorId(oXML.trIdMovto.ToString());
                    Pedido oPedido = oListPedidoFiltrado[0];
                    if (oPedido == null)
                        continue;

                    Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                    if (dtbXMLVendas.Rows.Count == 0 || dtbXMLVendas.Rows[0]["XML"].ToString() == "")
                    {

                        ParametrosSQL.Clear();
                        ParametrosSQL.Add("NOTAFISCAL", oXML.trChaveAcesso);
                        ParametrosSQL.Add("XML", oXML.trArquivoRetorno);
                        ParametrosSQL.Add("DATA", DateTime.Now);
                        ParametrosSQL.Add("STATUS", 0);
                        ParametrosSQL.Add("PEDIDO", oPedido.mvIdExterno);

                        ClasseParametros.ExecutabancoMySql("INSERT INTO XMLVENDAS(NOTAFISCAL,XML,DATA,STATUS,PEDIDO) VALUES (@NOTAFISCAL,@XML,@DATA,@STATUS,@PEDIDO)", ParametrosSQL);

                        ParametrosSQL.Clear();
                        dtbXMLVendas.Dispose();
                    }
                    else if (dtbXMLVendas.Rows[0]["PEDIDO"].ToString() == "" || dtbXMLVendas.Rows[0]["PEDIDO"].ToString() == "0")
                    {
                        ParametrosSQL.Clear();
                        ParametrosSQL.Add("NOTAFISCAL", oXML.trChaveAcesso);
                        ParametrosSQL.Add("XML", oXML.trArquivoRetorno);
                        ParametrosSQL.Add("DATA", DateTime.Now);
                        ParametrosSQL.Add("STATUS", 0);
                        ParametrosSQL.Add("PEDIDO", oPedido.mvIdExterno);
                        ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET XML=@XML,DATA=@DATA,STATUS=@STATUS,PEDIDO = @PEDIDO WHERE NOTAFISCAL = @NOTAFISCAL", ParametrosSQL);
                    }
                }
            }
            catch { }
        }


        public static double RetornaSeTemEstoque(string sCodigo, int iLocalEstoque)
        {
            double eEstoque = 0;
            bool lMultiploProduto = false;
            //string sCodigoEstoque = sCodigo.Substring(sCodigo.Length - 3);
            string sCodigoEstoqueInicial = "";
            string[] aProduto = { };
            //if (sCodigoEstoque.ToUpper() == "VAR")
            //{
            //    sCodigoEstoqueInicial = sCodigo.Substring(0, sCodigo.Length - 5);
            //    aProduto = sCodigoEstoque.Split('G');
            //    lMultiploProduto = true;
            //}
            //else
            //{
            aProduto = sCodigo.Split(';');
            //}



            foreach (string sProduto in aProduto)
            {
                IRestResponse oResposta = null;

                if (lMultiploProduto)
                {
                    oResposta = ClasseFuncoes.RetornaProdutoEstoqueFortPlus(sCodigoEstoqueInicial + sProduto);
                }
                else
                {
                    oResposta = ClasseFuncoes.RetornaProdutoEstoqueFortPlus(sProduto);
                }

                List<FortPlusEstoque> oJsonProdutoEstoqueFortePlus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusEstoque>>(oResposta.Content);
                List<ProdutoFortePlus> o = RetornaListProdutosFortPlus();
                o = o.Where(x => x.id.ToString() == sCodigo).ToList();


                //oJsonProdutoEstoqueFortePlus = oJsonProdutoEstoqueFortePlus.Where(x => x.id == sCodigo.ToString()).ToList();
                //oJsonProdutoEstoqueFortePlus = oJsonProdutoEstoqueFortePlus.Where(x => x.idLocalEstoque == iLocalEstoque.ToString()).ToList();




                oJsonProdutoEstoqueFortePlus = oJsonProdutoEstoqueFortePlus.Where(x => x.idLocalEstoque == iLocalEstoque.ToString() && x.id == sCodigo).ToList();
                if (oJsonProdutoEstoqueFortePlus.Count > 0)
                    eEstoque = double.Parse(oJsonProdutoEstoqueFortePlus[0].qtdeAtual);

                //if (sProduto.Contains("KIT"))
                //{
                //    int? iCodigoProduto = RetornaCodigoProdutoFortPlusPorSKU(sProduto);
                //    List<FortPlusProdutoComposicao> lstProduto = RetornaProdutoComposicao(iCodigoProduto.ToString());
                //    eEstoque = 10000000000000;
                //    foreach (FortPlusProdutoComposicao oProdutoComposicao in lstProduto)
                //    {
                //        ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(RetornaProdutoFortPlus(oProdutoComposicao.pcIdProdutoComposicao.ToString()).Content);
                //        foreach (FortPlusEstoque oEstoque in oJsonProdutoEstoqueFortePlus)
                //        {
                //            if (oEstoque.idLocalEstoque == iLocalEstoque.ToString())
                //                if (oEstoque.codigo == oProduto.prCodigo)
                //                {
                //                    if (int.Parse(oEstoque.reserva) > 0)
                //                    {

                //                    }

                //                    if (double.Parse(oEstoque.estoqueAtual) > 0)
                //                    {
                //                        if (double.Parse(oEstoque.estoqueAtual) < eEstoque)
                //                        {
                //                            eEstoque = double.Parse(oEstoque.estoqueAtual);
                //                            break;
                //                        }
                //                    }
                //                }
                //        }
                //    }
                //}
                //else
                //{
                //    foreach (FortPlusEstoque oEstoque in oJsonProdutoEstoqueFortePlus)
                //    {
                //        if (oEstoque.idLocalEstoque == iLocalEstoque.ToString())
                //            if (oEstoque.codigo == sCodigoEstoqueInicial + sProduto)
                //            {
                //                if (int.Parse(oEstoque.reserva) > 0)
                //                {

                //                }

                //                eEstoque += double.Parse(oEstoque.estoqueAtual);
                //                break;
                //            }
                //    }
                //}
            }
            return eEstoque;
        }

        public static double RetornaEstoque(string sCodigo)
        {
            int? iLocalEstoque31 = ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "31");
            int? iLocalEstoque33 = ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");
            int? iLocalEstoque34 = ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "34");
            double eEstoque = 0;
            bool lMultiploProduto = false;
            string sCodigoEstoque = sCodigo.Substring(sCodigo.Length - 3);
            string sCodigoEstoqueInicial = "";
            string[] aProduto = { };
            if (sCodigoEstoque.ToUpper() == "VAR")
            {
                sCodigoEstoqueInicial = sCodigo.Substring(0, sCodigo.Length - 5);
                aProduto = sCodigoEstoque.Split('G');
                lMultiploProduto = true;
            }
            else
            {
                aProduto = sCodigo.Split(';');
            }



            foreach (string sProduto in aProduto)
            {
                IRestResponse oResposta = null;

                if (lMultiploProduto)
                {
                    oResposta = ClasseFuncoes.RetornaProdutoEstoqueFortPlus(sCodigoEstoqueInicial + sProduto);
                }
                else
                {
                    oResposta = ClasseFuncoes.RetornaProdutoEstoqueFortPlus(sProduto);
                }

                List<FortPlusEstoque> oJsonProdutoEstoqueFortePlus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusEstoque>>(oResposta.Content);

                if (sProduto.Contains("KIT"))
                {
                    int? iCodigoProduto = RetornaCodigoProdutoFortPlusPorSKU(sProduto);
                    List<FortPlusProdutoComposicao> lstProduto = RetornaProdutoComposicao(iCodigoProduto.ToString());
                    eEstoque = 10000000000000;
                    foreach (FortPlusProdutoComposicao oProdutoComposicao in lstProduto)
                    {
                        ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(RetornaProdutoFortPlus(oProdutoComposicao.pcIdProdutoComposicao.ToString()).Content);
                        foreach (FortPlusEstoque oEstoque in oJsonProdutoEstoqueFortePlus)
                        {
                            if (oEstoque.idLocalEstoque == iLocalEstoque31.ToString() || oEstoque.idLocalEstoque == iLocalEstoque33.ToString())
                                if (oEstoque.codigo == oProduto.prCodigo)
                                {
                                    if (int.Parse(oEstoque.reserva) > 0)
                                    {

                                    }

                                    if (double.Parse(oEstoque.estoqueAtual) > 0)
                                    {
                                        if (double.Parse(oEstoque.estoqueAtual) < eEstoque)
                                        {
                                            eEstoque = double.Parse(oEstoque.estoqueAtual);
                                            break;
                                        }
                                    }
                                }
                        }

                    }
                }
                else
                {
                    foreach (FortPlusEstoque oEstoque in oJsonProdutoEstoqueFortePlus)
                    {
                        if (oEstoque.idLocalEstoque == iLocalEstoque31.ToString() || oEstoque.idLocalEstoque == iLocalEstoque33.ToString())
                            if (oEstoque.codigo == sCodigoEstoqueInicial + sProduto)
                            {
                                if (int.Parse(oEstoque.reserva) > 0)
                                {

                                }

                                if (double.Parse(oEstoque.estoqueAtual) > 0)
                                {
                                    eEstoque += double.Parse(oEstoque.estoqueAtual);
                                    break;
                                }
                            }
                    }
                }
            }
            return eEstoque;
        }

        public static Stream ImageToStream(Image image)
        {
            var stream = new System.IO.MemoryStream();
            image.Save(stream, ImageFormat.Png);
            stream.Position = 0;
            return stream;
        }

        public static List<Image> DownloadFileFromFTP(string sCodigoProduto)
        {
            var request = (FtpWebRequest)WebRequest.Create("ftp://191.252.61.62/" + sCodigoProduto);
            request.Method = WebRequestMethods.Ftp.ListDirectory;

            request.Credentials = new NetworkCredential("integradorftp", "#integradorftp2019#");
            request.UseBinary = true;
            List<Image> oRetorno = new List<Image>();
            List<string> lstArquivos = new List<string>();
            try
            {

                using (var response = (FtpWebResponse)request.GetResponse())
                {
                    using (var stream = response.GetResponseStream())
                    {
                        using (var reader = new StreamReader(stream, true))
                        {
                            while (!reader.EndOfStream)
                            {
                                lstArquivos.Add(reader.ReadLine());
                            }
                        }
                    }
                }
            }
            catch (System.Exception ex)
            {
                SalvaLogServicos(ex.Message);

                if (ex.Message.Contains("550"))
                {
                    request = (FtpWebRequest)WebRequest.Create("ftp://191.252.61.62/" + sCodigoProduto);
                    request.Method = WebRequestMethods.Ftp.MakeDirectory;
                    request.Credentials = new NetworkCredential("integradorftp", "#integradorftp2019#");
                    request.UseBinary = true;
                    using (var resp = (FtpWebResponse)request.GetResponse())
                    {


                    }
                }
            }


            if (lstArquivos.Count > 0)
            {
                foreach (string sArquivo in lstArquivos)
                {
                    try
                    {
                        request = (FtpWebRequest)WebRequest.Create("ftp://191.252.61.62/" + sArquivo);
                        request.Method = WebRequestMethods.Ftp.DownloadFile;
                        request.Credentials = new NetworkCredential("integradorftp", "#integradorftp2019#");
                        request.UseBinary = true;
                        using (FtpWebResponse response = (FtpWebResponse)request.GetResponse())
                        {
                            using (Stream rs = response.GetResponseStream())
                            {
                                using (FileStream ws = new FileStream(Directory.GetCurrentDirectory() + "\\temp.png", FileMode.OpenOrCreate))
                                {
                                    byte[] buffer = new byte[2048];
                                    int bytesRead = rs.Read(buffer, 0, buffer.Length);
                                    while (bytesRead > 0)
                                    {
                                        ws.Write(buffer, 0, bytesRead);
                                        bytesRead = rs.Read(buffer, 0, buffer.Length);
                                    }
                                    ws.Flush();
                                    ws.Close();

                                }
                                Image oImage = Bitmap.FromFile(Directory.GetCurrentDirectory() + "\\temp.png");
                                oRetorno.Add(oImage);
                            }
                        }
                    }
                    catch (System.Exception ex)
                    {
                        SalvaLogServicos(ex.Message);
                    }
                }
            }
            return oRetorno;
        }

        public static void EnviaImagemFTP(string sCodigoProduto, string sID, Image oImagem, int iIdImagem)
        {


            try
            {
                Stream streamImage = ImageToStream(oImagem);
                string sArquivo = DateTime.Now.ToShortDateString().Replace("/", "_") + "_" + DateTime.Now.ToShortTimeString().Replace(":", "_");

                FtpWebRequest request = (FtpWebRequest)WebRequest.Create("ftp://191.252.61.62/" + sCodigoProduto.Trim() + "/" + sArquivo + ".png");
                request.Method = WebRequestMethods.Ftp.UploadFile;
                request.Credentials = new NetworkCredential("integradorftp", "#integradorftp2019#");
                request.UseBinary = true;
                request.ContentLength = streamImage.Length;
                byte[] buffer = new byte[streamImage.Length];
                int bytesSent = 0;
                int bytes = 0;
                using (Stream stream = request.GetRequestStream())
                {
                    while (bytesSent < streamImage.Length)
                    {
                        bytes = streamImage.Read(buffer, 0, buffer.Length);
                        stream.Write(buffer, 0, bytes);
                        bytesSent += bytes;
                    }
                }
                streamImage.Dispose();

                string sUrl = "http://191.252.61.62:8081/admin/ImagensProdutos/" + sCodigoProduto + "/" + sArquivo + ".png";
                string sSql = "INSERT INTO PRODUTOIMAGEM(ID,IDIMAGE,URLIMAGE) VALUES(@ID,@IDIMAGE,@URLIMAGE)";
                Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                ParametrosSQL.Add("ID", sID);
                ParametrosSQL.Add("IDIMAGE", iIdImagem.ToString());
                ParametrosSQL.Add("URLIMAGE", sID);

                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                ParametrosSQL.Clear();



            }
            catch (System.Exception ex)
            {
                SalvaLogServicos(ex.Message);
            }
        }

        public static void SalvaLogServicos(string sMensagem)
        {
            try
            {
                ClasseParametros.oEditLog.BeginInvoke((MethodInvoker)delegate ()
                 {
                     ClasseParametros.oEditLog.Text = sMensagem + " - " + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + Environment.NewLine + ClasseParametros.oEditLog.Text;
                     ClasseParametros.oEditLog.Refresh();
                 });

                try
                {
                    string sFile = Directory.GetCurrentDirectory() + "\\erro.txt";
                    FileInfo oFile = new FileInfo(sFile);
                    if (oFile.Length > 1000000)
                    {
                        File.Delete(Directory.GetCurrentDirectory() + "\\erro.txt");
                    }

                    using (System.IO.StreamWriter file = new System.IO.StreamWriter(Directory.GetCurrentDirectory() + "\\erro.txt", true))
                    {
                        file.WriteLine(sMensagem + " - " + DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() + Environment.NewLine + ClasseParametros.oEditLog.Text);
                    }
                }
                catch
                {

                }

                Application.DoEvents();
            }
            catch
            {

            }

        }


        public static void RecebePedidoEnviaFortPlusAsync(int iCliente)
        {
            //try
            //{
            //    if (ClasseParametros.iFilial == -1)
            //    {

            //    }

            //    if (ClasseParametros.oMeli == null)
            //    {
            //        ConectaMercadoLivreAsync(iCliente);
            //    }

            //    int iOffset = 1;
            //    int ilimit = 50;

            //    IRestResponse oResposta = null;
            //    MercadoLivrePedido oPedidoMercadoLivre = null;


            //    while (oPedidoMercadoLivre == null || oPedidoMercadoLivre.results == null)
            //    {
            //        try
            //        {
            //            List<Parameter> ps = new List<Parameter>();
            //            Parameter p = new Parameter();
            //            p.Name = "access_token";
            //            p.Value = ClasseParametros.oMeli.AccessToken;
            //            ps.Add(p);
            //            p = new Parameter();
            //            p.Name = "seller";
            //            p.Value = ClasseParametros.oMeli.UserId;
            //            ps.Add(p);
            //            p = new Parameter();
            //            p.Name = "order.status";
            //            p.Value = "paid";
            //            ps.Add(p);
            //            p = new Parameter();
            //            p.Name = "offset";
            //            p.Value = iOffset;
            //            ps.Add(p);
            //            p = new Parameter();
            //            p.Name = "limit";
            //            p.Value = ilimit;
            //            ps.Add(p);
            //            p = new Parameter();
            //            p.Name = "sort";
            //            p.Value = "date_desc";
            //            ps.Add(p);


            //            var oRespostaPedido = ClasseParametros.oMeli.Get("/orders/search", ps);
            //            oPedidoMercadoLivre = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivrePedido>(oRespostaPedido.Content);

            //            if (oPedidoMercadoLivre.results.Length == 0 || oPedidoMercadoLivre.results[0].status == "shipped")
            //                break;

            //            if (oPedidoMercadoLivre.results[0].date_created < DateTime.Now.AddDays(-30))
            //            {
            //                break;
            //            }

            //            //Result[] aRessult = oPedidoMercadoLivre.results.Where(x => x.id.ToString() == "2538010356" || x.id.ToString() == "2531056580" || x.id.ToString() == "2530212967" || x.id.ToString() == "2526833324" || x.id.ToString() == "2535966174").ToArray();

            //            foreach (Result oPedido in oPedidoMercadoLivre.results)
            //            // foreach (Result oPedido in aRessult)
            //            {

            //                //if (oPedido.date_created < DateTime.Now.AddDays(-2))
            //                //{
            //                //    break;
            //                //}

            //                Console.WriteLine(" Integrando pedido " + oPedido.id.ToString());
            //                string sCodigoUsado = oPedido.id.ToString();
            //                string spacote = "";
            //                if (oPedido.pack_id != null)
            //                {
            //                    spacote = oPedido.pack_id.ToString();
            //                }
            //                try
            //                {
            //                    if (oPedido.buyer.first_name.ToLower().Contains("adilio"))
            //                    {

            //                    }

            //                    if (spacote.ToString().Trim() == "2000001656755867")
            //                    {

            //                    }

            //                    if (sCodigoUsado.ToString().Trim() == "2644834061")
            //                    {

            //                    }
            //                    if (oPedido.shipping.status == "delivered")
            //                    {
            //                        continue;
            //                    }



            //                    if (oPedido.status == "paid" && (oPedido.shipping.status == "ready_to_ship" || oPedido.shipping.status == null))
            //                    {
            //                        oResposta = null;
            //                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            //                        {
            //                            RestClient client = null;
            //                            if (spacote != "")
            //                                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + spacote.ToString().Trim());
            //                            else
            //                                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + sCodigoUsado.ToString().Trim());

            //                            RestRequest request = new RestRequest(Method.GET);
            //                            request.AddHeader("Cache-Control", "no-cache");
            //                            request.AddHeader("Accept", "*/*");
            //                            request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                            request.AddHeader("Content-Type", "application/json");

            //                            if (ClasseParametros.oJsonFortePluslogin == null)
            //                                ConectaForteplus(5);

            //                            request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                            oResposta = client.Execute(request);

            //                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //                            {
            //                                ClasseFuncoes.ConectaForteplus(5);
            //                            }
            //                            else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
            //                            {

            //                                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + sCodigoUsado.ToString().Trim());

            //                                request = new RestRequest(Method.GET);
            //                                request.AddHeader("Cache-Control", "no-cache");
            //                                request.AddHeader("Accept", "*/*");
            //                                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                                request.AddHeader("Content-Type", "application/json");

            //                                if (ClasseParametros.oJsonFortePluslogin == null)
            //                                    ConectaForteplus(5);

            //                                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                                oResposta = client.Execute(request);



            //                                break;
            //                            }
            //                        }
            //                        Pedido oPedidoFortPlusConsulta = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);

            //                        #region Pega Itens do pedido
            //                        bool lIntegrarNovamente = false;

            //                        if (oPedidoFortPlusConsulta != null)
            //                        {
            //                            List<PedidoItemFortPlus> lstItem = RetornaItensPedido(oPedidoFortPlusConsulta.id);
            //                            lIntegrarNovamente = lstItem.Count == 0;

            //                            if (lIntegrarNovamente)
            //                            {

            //                            }
            //                        }

            //                        #endregion

            //                        if (lIntegrarNovamente || oPedidoFortPlusConsulta == null)
            //                        {
            //                            bool lAtualiza = false;

            //                            if (sCodigoUsado.ToString().Trim() == "4004720387")
            //                            {

            //                            }

            //                            if (oPedido.status == "paid" && (oPedido.shipping.status == "ready_to_ship" || oPedido.shipping.status == null))
            //                            {
            //                                string sSql = "";

            //                                if (spacote != "")
            //                                    sSql = "SELECT TRIM(PACKID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(PACKID) = '" + spacote.ToString().Trim() + "' AND STATUS = 0 AND MARKETPLACE = 'MERCADOLIVRE'";
            //                                else
            //                                    sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + sCodigoUsado.ToString().Trim() + "' AND STATUS = 0 AND MARKETPLACE = 'MERCADOLIVRE'";
            //                                DataTable d = ClasseParametros.ConsultaBancoMysql(sSql);
            //                                if (d.Rows.Count == 0)
            //                                {

            //                                    sSql = "INSERT INTO VENDAMARKETPLACE(ID,STATUS,MARKETPLACE, DATA,STATUSMENSAGEM,PACKID,USERID,EMAILML,PEDIDOML,SELLERID) " +
            //                                        "VALUES('" + sCodigoUsado.ToString().Trim() + "',0,'MERCADOLIVRE', CURDATE(),0,'" + spacote + "', " +
            //                                        "'" + oPedido.buyer.id.ToString() + "','" + oPedido.buyer.email + "','" + sCodigoUsado + "','" + oPedido.seller.id.ToString() + "')";
            //                                    ClasseParametros.ExecutabancoMySql(sSql);
            //                                }
            //                            }

            //                            try
            //                            {
            //                                if (sCodigoUsado.ToString().Trim() == "2436237643")
            //                                {

            //                                }

            //                                string sSql = "";
            //                                if (spacote != "")
            //                                    sSql = "SELECT TRIM(PACKID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(PACKID) = '" + spacote.ToString().Trim() + "' AND STATUS = 0 AND MARKETPLACE = 'MERCADOLIVRE'";
            //                                else
            //                                    sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + sCodigoUsado.ToString().Trim() + "' AND STATUS = 0 AND MARKETPLACE = 'MERCADOLIVRE'";
            //                                DataTable d = ClasseParametros.ConsultaBancoMysql(sSql);
            //                                if (lIntegrarNovamente || d.Rows.Count > 0)
            //                                {
            //                                    if (oPedido.shipping.status == "ready_to_ship" || oPedido.shipping.status == null)
            //                                    {
            //                                        oResposta = null;
            //                                        MercadoLivreEntrega oEntrega = null;
            //                                        while (oEntrega == null)
            //                                        {

            //                                            ps = new List<Parameter>();
            //                                            p = new Parameter();
            //                                            p.Name = "access_token";
            //                                            p.Value = ClasseParametros.oMeli.AccessToken;
            //                                            ps.Add(p);

            //                                            //HttpParams oParametroEntretga = new HttpParams().Add("access_token", ClasseParametros.oMeli.AccessToken);

            //                                            var oRespostaEntrega = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);


            //                                            oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oRespostaEntrega.Content);
            //                                        }
            //                                        ClienteFortPlus oCliente = CadastraClienteFortPlus(oPedido, oEntrega);
            //                                        string s = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);

            //                                        if (oCliente == null)
            //                                        {
            //                                            EnviaMensagemTelegramAsync("Pedido não cadastrado pois o endereço está com erro!\n" + oPedido.buyer.first_name + " " + oPedido.buyer.last_name, "0,1", "Pedido não cadastrado", sCodigoUsado.ToString().Trim());

            //                                            continue;
            //                                        }

            //                                        int iLocalEstoque = 32;
            //                                        ClasseFuncoes.CarregaFiliais("34.036.601/0003-38 - 2ELETRO VAREJISTA");
            //                                        //ClasseFuncoes.CarregaFiliais("34.036.601/0002-57 - 2ELETRO ATACADISTA");

            //                                        //34036601000257 - 2ELETRO ATACADISTA	
            //                                        //34036601000338 - 2ELETRO VAREJISTA


            //                                        //34.036.601/0001-76 - 	2ELETRO MATRIZ	
            //                                        //34.036.601/0002-57 - 2ELETRO ATACADISTA	
            //                                        //34.036.601/0003-38 - 2ELETRO VAREJISTA

            //                                        string sProduto = "";
            //                                        try
            //                                        {

            //                                            foreach (Shipping_Items oItem in oEntrega.shipping_items)
            //                                            {
            //                                                ProdutoComplemento oProdutoComplemento = RetornaProdutoComplementoFortPlusPorIdExterno(oItem.id.Trim());
            //                                                sProduto = "\nProduto: " + oItem.description + "\n";
            //                                                sProduto += " MLB: " + oItem.id.Trim();
            //                                                ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);
            //                                                string sProdutoTemp = "";
            //                                                //if (oProduto.prCodigo.ToString().Contains("MICFAC"))
            //                                                //{
            //                                                //    iLocalEstoque = 31;
            //                                                //    break;
            //                                                //}

            //                                                if (oProduto.prCodigo.Contains("KIT"))
            //                                                {
            //                                                    oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(oProduto.prCodigo);
            //                                                    oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);

            //                                                    oResposta = null;

            //                                                    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            //                                                    {
            //                                                        RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + oProduto.id.ToString());
            //                                                        RestRequest request = new RestRequest(Method.GET);
            //                                                        request.AddHeader("Cache-Control", "no-cache");
            //                                                        request.AddHeader("Accept", "*/*");
            //                                                        request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                                                        request.AddHeader("Content-Type", "application/json");
            //                                                        request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                                                        oResposta = client.Execute(request);

            //                                                        if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //                                                        {
            //                                                            ClasseFuncoes.ConectaForteplus(5);
            //                                                        }
            //                                                    }

            //                                                    List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
            //                                                    float? eValorTotalComposicao = 0;

            //                                                    foreach (FortPlusProdutoComposicao oProdutoComposicao in oListFormaPagamento)
            //                                                    {
            //                                                        oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComposicao.pcIdProdutoComposicao.ToString()).Content);
            //                                                        sProdutoTemp = oProduto.prCodigo;
            //                                                        ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();
            //                                                        int iLocalEstoque34 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "34");
            //                                                        double eQtdEstoque = ClasseFuncoes.RetornaSeTemEstoque(oProduto.id.ToString(), iLocalEstoque34);

            //                                                        if (oItem.quantity > eQtdEstoque)
            //                                                        {
            //                                                            iLocalEstoque = 33;
            //                                                            break;
            //                                                        }
            //                                                        else
            //                                                        {
            //                                                            iLocalEstoque = 32;
            //                                                        }
            //                                                    }
            //                                                }
            //                                                else
            //                                                {

            //                                                    int iLocalEstoque34 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "34");
            //                                                    double eQtdEstoque = RetornaSeTemEstoque(oProduto.id.ToString(), iLocalEstoque34);

            //                                                    if (oItem.quantity > eQtdEstoque)
            //                                                    {
            //                                                        iLocalEstoque = 33;


            //                                                        break;
            //                                                    }
            //                                                    else
            //                                                    {
            //                                                        DataTable dtbProdutoOrla = ClasseParametros.ConsultaBancoMysql("SELECT * FROM PRODUTOSORLA WHERE SKU = '" + oProduto.prCodigo + "'");

            //                                                        if (dtbProdutoOrla.Rows.Count > 0)
            //                                                            iLocalEstoque = 32;
            //                                                        else
            //                                                            iLocalEstoque = 33;

            //                                                        dtbProdutoOrla.Dispose();
            //                                                    }
            //                                                }
            //                                            }
            //                                        }
            //                                        catch (Exception ex)
            //                                        {
            //                                            SalvaLogServicos(ex.Message);
            //                                            EnviaMensagemTelegramAsync("Pedido com erro no item!\n" + sCodigoUsado + "\n" + oPedido.buyer.first_name + " " + oPedido.buyer.last_name + sProduto, "0,2", "Pedido com erro no item", sCodigoUsado.ToString());
            //                                            continue;
            //                                        }

            //                                        Pedido oPedidoFortPlus = new Pedido();

            //                                        Guid oGuid = Guid.NewGuid();
            //                                        oPedidoFortPlus.id = 0;
            //                                        oPedidoFortPlus.mvDocto = 0;
            //                                        oPedidoFortPlus.mvIdPessoa = int.Parse(oCliente.id);
            //                                        string sCNPJ = "";
            //                                        oPedidoFortPlus.mvIdVendedor = RetornaVendedorFortPlus("MERCADO LIVRE");
            //                                        oPedidoFortPlus.mvIdSerie = RetornaCodigoGlobal("SR", "1");
            //                                        oPedidoFortPlus.mvIdModelo = RetornaCodigoGlobal("MD", "55");
            //                                        oPedidoFortPlus.mvTipoMovimento = "1";
            //                                        oPedidoFortPlus.mvTipoPedido = "P";
            //                                        oPedidoFortPlus.mvIdTipoDocumento = RetornaCodigoGlobal("TD", "REC");

            //                                        oPedidoFortPlus.mvIdTipoFrete = RetornaCodigoGlobal("TF", "9");
            //                                        if (oEntrega.shipping_option.cost > 0.01)
            //                                        {
            //                                            oPedidoFortPlus.mvIdTipoFrete = RetornaCodigoGlobal("TF", "1");
            //                                        }

            //                                        oPedidoFortPlus.mvPreNota = "N";
            //                                        oPedidoFortPlus.mvFinNf = "1";
            //                                        oPedidoFortPlus.mvPresenca = RetornaCodigoParametro("_FPS_NFE_PRESENCA");
            //                                        oPedidoFortPlus.mvIdNatureza = RetornaCodigoGlobal("NO", "01");
            //                                        oPedidoFortPlus.mvIdParent = null;
            //                                        oPedidoFortPlus.idFilial = ClasseParametros.iFilial;
            //                                        oPedidoFortPlus.mvIdTransportadora = RetornaTransportadorFortPlus("MERCADO LIVRE");
            //                                        int? eTotal = 0;
            //                                        float? eTotalPago = 0;
            //                                        float? eTotalValor = 0;
            //                                        float? eTotalDesconto = 0;

            //                                        foreach (Shipping_Items oItem in oEntrega.shipping_items)
            //                                        {
            //                                            ps = new List<Parameter>();
            //                                            p = new Parameter();
            //                                            p.Name = "access_token";
            //                                            p.Value = ClasseParametros.oMeli.AccessToken;
            //                                            ps.Add(p);

            //                                            var oRespostaItem = ClasseParametros.oMeli.Get("/items/" + oItem.id.Trim(), ps);

            //                                            MercadoLivreProduto oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreProduto>(oRespostaItem.Content);



            //                                            var oRespostaEntrega = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);


            //                                            oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oRespostaEntrega.Content);


            //                                            eTotal += oItem.quantity;
            //                                            eTotalValor += oItem.quantity * oProduto.price;
            //                                            eTotalDesconto += oItem.quantity * oPedido.order_items[0].sale_fee;
            //                                        }

            //                                        s = Newtonsoft.Json.JsonConvert.SerializeObject(oPedidoFortPlus);
            //                                        List<interRegraNegocio.MercadoLivre.Payment> lstPagamento = oPedido.payments.OfType<interRegraNegocio.MercadoLivre.Payment>().ToList();
            //                                        foreach (interRegraNegocio.MercadoLivre.Payment oPagamento in lstPagamento)
            //                                        {
            //                                            if (oPagamento.status != "rejected")
            //                                            {
            //                                                eTotalPago += oPagamento.total_paid_amount;
            //                                            }
            //                                        }

            //                                        oPedidoFortPlus.mvQuantidade = eTotal;
            //                                        oPedidoFortPlus.mvPesoBruto = 0;
            //                                        oPedidoFortPlus.mvPesoLiquido = 0;

            //                                        oPedidoFortPlus.mvTpAmb = "1";
            //                                        oPedidoFortPlus.mvTpEmis = "1";
            //                                        oPedidoFortPlus.mvStatus = "0";
            //                                        oPedidoFortPlus.mvEntidade = "PDV";
            //                                        oPedidoFortPlus.ativo = "S";
            //                                        oPedidoFortPlus.mvGuid = oGuid.ToString();
            //                                        oPedidoFortPlus.dmaInclusao = DateTime.Now;
            //                                        oPedidoFortPlus.dmaAlteracao = DateTime.Now;
            //                                        oPedidoFortPlus.mvDmaEmissao = DateTime.Now;
            //                                        oPedidoFortPlus.mvDmaEntradaSaida = DateTime.Now;

            //                                        if (spacote != "")
            //                                            oPedidoFortPlus.mvIdExterno = spacote;
            //                                        else
            //                                            oPedidoFortPlus.mvIdExterno = sCodigoUsado;


            //                                        oPedidoFortPlus.mvValorFrete = oEntrega.shipping_option.cost;
            //                                        oPedidoFortPlus.mvValorDesconto = 0;


            //                                        oPedidoFortPlus.mvValorTotalProduto = eTotalValor;
            //                                        //oPedidoFortPlus.valo = oPedido.total_amount;
            //                                        oPedidoFortPlus.mvValorTotal = eTotalValor;
            //                                        //mais de uma unidade
            //                                        //04_02_2020
            //                                        if (oPedido.buyer.billing_info.doc_type == "CPF")
            //                                        {
            //                                            oPedidoFortPlus.mvValorTotalProduto = eTotalValor - eTotalDesconto;
            //                                            //oPedidoFortPlus.valo = oPedido.total_amount;
            //                                            oPedidoFortPlus.mvValorTotal = eTotalValor - eTotalDesconto;

            //                                            string smvValorTotalProduto = String.Format("{0:#,##0.00;(#,##0.00);Zero}", oPedidoFortPlus.mvValorTotalProduto);
            //                                            string smvValorTotal = String.Format("{0:#,##0.00;(#,##0.00);Zero}", oPedidoFortPlus.mvValorTotal);


            //                                            double eValorTemp = double.Parse(oPedidoFortPlus.mvValorTotalProduto.ToString());

            //                                            oPedidoFortPlus.mvValorTotalProduto = float.Parse(smvValorTotalProduto);

            //                                            eValorTemp = double.Parse(oPedidoFortPlus.mvValorTotal.ToString());

            //                                            oPedidoFortPlus.mvValorTotal = float.Parse(smvValorTotal);

            //                                        }

            //                                        oPedidoFortPlus.mvVersao = RetornaCodigoParametro("_FPS_NFE_VERSAO");

            //                                        //2322426297
            //                                        oResposta = null;

            //                                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            //                                        {
            //                                            RestClient client = null;
            //                                            if (spacote != "")
            //                                                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + spacote.ToString().Trim());
            //                                            else
            //                                                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + sCodigoUsado.ToString().Trim());
            //                                            RestRequest request = new RestRequest(Method.GET);
            //                                            request.AddHeader("Cache-Control", "no-cache");
            //                                            request.AddHeader("Accept", "*/*");
            //                                            request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                                            request.AddHeader("Content-Type", "application/json");
            //                                            if (ClasseParametros.oJsonFortePluslogin == null)
            //                                                ConectaForteplus(5);
            //                                            request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                                            oResposta = client.Execute(request);

            //                                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //                                            {
            //                                                ClasseFuncoes.ConectaForteplus(5);
            //                                            }
            //                                            else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
            //                                            {
            //                                                break;
            //                                            }
            //                                            else if (oResposta.StatusCode == System.Net.HttpStatusCode.OK)
            //                                            {

            //                                                oPedidoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);
            //                                                break;
            //                                            }

            //                                        }

            //                                        if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
            //                                            oPedidoFortPlus = CriaPedidoFortPlus(oPedidoFortPlus);


            //                                        //int iLocalEstoque = 33;
            //                                        //string sProduto = "";

            //                                        //try
            //                                        //{

            //                                        //    foreach (Shipping_Items oItem in oEntrega.shipping_items)
            //                                        //    {
            //                                        //        ProdutoComplemento oProdutoComplemento = RetornaProdutoComplementoFortPlusPorIdExterno(oItem.id.Trim());
            //                                        //        sProduto = "\nProduto: " + oItem.description + "\n";
            //                                        //        sProduto += " MLB: " + oItem.id.Trim();
            //                                        //        ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);

            //                                        //        if (oProduto.prCodigo.ToString().Contains("MICFAC"))
            //                                        //        {
            //                                        //            iLocalEstoque = 31;
            //                                        //            break;
            //                                        //        }
            //                                        //    }
            //                                        //}
            //                                        //catch (Exception ex)
            //                                        //{
            //                                        //    SalvaLogServicos(ex.Message);
            //                                        //    EnviaMensagemTelegramAsync("Pedido com erro no item!\n" + sCodigoUsado + "\n" + oPedido.buyer.first_name + " " + oPedido.buyer.last_name + sProduto, "0,2", "Pedido com erro no item", sCodigoUsado.ToString());
            //                                        //    return;
            //                                        //}




            //                                        List<ProdutoFortePlus> lstProduto = new List<ProdutoFortePlus>();
            //                                        float? eValorFreteProduto = oPedidoFortPlus.mvValorFrete / oEntrega.shipping_items.Length;

            //                                        foreach (Shipping_Items oItem in oEntrega.shipping_items)
            //                                        {

            //                                            ProdutoComplemento oProdutoComplemento = RetornaProdutoComplementoFortPlusPorIdExterno(oItem.id);
            //                                            ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);
            //                                            bool lTirarTarifa = oProduto.prPercentComissao == 1;

            //                                            if (oProduto.prCodigo.Substring(0, 3).Trim() == "KIT")
            //                                            {
            //                                                oResposta = null;

            //                                                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            //                                                {
            //                                                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + oProduto.id.ToString());
            //                                                    RestRequest request = new RestRequest(Method.GET);
            //                                                    request.AddHeader("Cache-Control", "no-cache");
            //                                                    request.AddHeader("Accept", "*/*");
            //                                                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                                                    request.AddHeader("Content-Type", "application/json");
            //                                                    if (ClasseParametros.oJsonFortePluslogin == null)
            //                                                        ConectaForteplus(5);
            //                                                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                                                    oResposta = client.Execute(request);

            //                                                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //                                                    {
            //                                                        ClasseFuncoes.ConectaForteplus(5);
            //                                                    }
            //                                                }

            //                                                List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
            //                                                float? eValorTotalComposicao = 0;

            //                                                foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
            //                                                {
            //                                                    try
            //                                                    {
            //                                                        if (oFormaPagamento.pcIdProdutoComposicao != null)
            //                                                        {
            //                                                            ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();
            //                                                            string sComposicao = RetornaProdutoComplementoFortPlus(oFormaPagamento.pcIdProdutoComposicao.ToString()).Content;
            //                                                            List<ProdutoComplemento> oProdutoComplementoComposicao = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(sComposicao);
            //                                                            foreach (ProdutoComplemento oPC in oProdutoComplementoComposicao)
            //                                                            {
            //                                                                string sMarketPlace = RetornaNomeGlobalMK("MK", oPC.cmIdMarketPlace);
            //                                                                if (sMarketPlace.Contains("MERCADO LIVRE"))
            //                                                                {
            //                                                                    oProdutoComplementoUsar = oPC;
            //                                                                    break;
            //                                                                }
            //                                                            }
            //                                                            if (oProdutoComplementoUsar.cmPrecoDePor != null)
            //                                                                eValorTotalComposicao += oProdutoComplementoUsar.cmPrecoDePor;
            //                                                        }
            //                                                    }
            //                                                    catch
            //                                                    {

            //                                                    }
            //                                                }

            //                                                foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
            //                                                {
            //                                                    PedidoItemFortPlus oItemPedido = new PedidoItemFortPlus();
            //                                                    oItemPedido.id = 0;
            //                                                    oItemPedido.mtIdNfOrigem = null;
            //                                                    oItemPedido.mtIdMovto = oPedidoFortPlus.id;
            //                                                    lstProduto.Add(oProduto);

            //                                                    float? eTotalSemTarifa = 0;
            //                                                    double? eQuantidade = 0;
            //                                                    float? eQtd = 0;

            //                                                    if (spacote != "")
            //                                                    {
            //                                                        eTotalSemTarifa = (eTotalValor - eTotalDesconto) / oEntrega.shipping_items.Length;
            //                                                        eQuantidade = oItem.quantity;
            //                                                        eQtd = float.Parse(eQuantidade.ToString());

            //                                                    }
            //                                                    else
            //                                                    {
            //                                                        eTotalSemTarifa = eTotalValor - eTotalDesconto;
            //                                                        eQuantidade = oItem.quantity * oFormaPagamento.pcQtde;
            //                                                        eQtd = float.Parse(eQuantidade.ToString());

            //                                                    }



            //                                                    if (oFormaPagamento.pcIdProdutoComposicao == null)
            //                                                        continue;


            //                                                    List<ProdutoComplemento> oProdutoComplementoComposicao = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(RetornaProdutoComplementoFortPlus(oFormaPagamento.pcIdProdutoComposicao.ToString()).Content);
            //                                                    ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();


            //                                                    foreach (ProdutoComplemento oPC in oProdutoComplementoComposicao)
            //                                                    {
            //                                                        string sMarketPlace = RetornaNomeGlobalMK("MK", oPC.cmIdMarketPlace);
            //                                                        if (sMarketPlace.Contains("MERCADO LIVRE"))
            //                                                        {
            //                                                            oProdutoComplementoUsar = oPC;
            //                                                            break;
            //                                                        }
            //                                                    }
            //                                                    float? ePercentual = 0;
            //                                                    double? eValorProduto = 0;

            //                                                    if (spacote != "")
            //                                                    {
            //                                                        ePercentual = ((oProdutoComplementoUsar.cmPrecoDePor * 100) / eValorTotalComposicao) / oEntrega.shipping_items.Length;
            //                                                        eValorProduto = eTotalSemTarifa;

            //                                                    }
            //                                                    else
            //                                                    {
            //                                                        ePercentual = (oProdutoComplementoUsar.cmPrecoDePor * 100) / eValorTotalComposicao;
            //                                                        eValorProduto = (eTotalValor * ePercentual) / 100;

            //                                                    }


            //                                                    oItemPedido.mtIdProduto = oFormaPagamento.pcIdProdutoComposicao;
            //                                                    oItemPedido.mtQtde = eQtd;
            //                                                    oItemPedido.mtValorUnitario = float.Parse(eValorProduto.ToString());
            //                                                    oItemPedido.mtValor = oItemPedido.mtValorUnitario * eQtd;
            //                                                    if (ePercentual == 100)
            //                                                    {
            //                                                        oItemPedido.mtValorUnitario = float.Parse(eValorTotalComposicao.ToString());
            //                                                        oItemPedido.mtValor = oItemPedido.mtValorUnitario * eQtd;


            //                                                        if (spacote != "")
            //                                                        {
            //                                                            eTotalSemTarifa = (eTotalValor - eTotalDesconto) / oEntrega.shipping_items.Length;
            //                                                            eQuantidade = oItem.quantity;
            //                                                            eQtd = float.Parse(eQuantidade.ToString());

            //                                                        }
            //                                                        else
            //                                                        {
            //                                                            eTotalSemTarifa = eTotalValor - eTotalDesconto;
            //                                                            eQuantidade = oItem.quantity * oFormaPagamento.pcQtde;
            //                                                            eQtd = float.Parse(eQuantidade.ToString());

            //                                                        }

            //                                                    }

            //                                                    oItemPedido.mtValorTotal = oItemPedido.mtValor + eValorFreteProduto;

            //                                                    ////mais de uma unidade
            //                                                    ////04_02_2020
            //                                                    if (oPedido.buyer.billing_info.doc_type == "CPF" && spacote == "")
            //                                                    {
            //                                                        ePercentual = (oProdutoComplementoUsar.cmPrecoDePor * 100) / eValorTotalComposicao;
            //                                                        eValorProduto = (eTotalSemTarifa * ePercentual) / 100;

            //                                                        if (oListFormaPagamento.Count == 1)
            //                                                        {
            //                                                            eValorProduto = eTotalSemTarifa / eQtd;
            //                                                        }

            //                                                        oItemPedido.mtValorUnitario = float.Parse(eValorProduto.ToString());
            //                                                        oItemPedido.mtValor = oItemPedido.mtValorUnitario * eQtd;
            //                                                        oItemPedido.mtValorTotal = oItemPedido.mtValor + eValorFreteProduto;
            //                                                    }

            //                                                    if (oItemPedido.mtQtde > 1)
            //                                                    {
            //                                                        string sMensagem = "Foi vendido itens comuns(KIT'S), com mais de uma unidade\n" + "Pedido: " + sCodigoUsado + "\nNome: " + oPedido.buyer.first_name + " " + oPedido.buyer.last_name;
            //                                                        EnviaMensagemTelegramAsync(sMensagem, "0,1", "Item com mais de um", sCodigoUsado.ToString());
            //                                                    }

            //                                                    oItemPedido.mtValorDesconto = 0;
            //                                                    oItemPedido.mtValorDescontoRateio = 0;
            //                                                    oItemPedido.mtPercDesconto = 0;
            //                                                    oItemPedido.mtValorFrete = eValorFreteProduto;
            //                                                    oItemPedido.mtValorSeguro = 0;
            //                                                    oItemPedido.mtValorOutrasDespesas = 0;
            //                                                    oItemPedido.mtCustoMedio = null;
            //                                                    oItemPedido.mtValorTabela = oProdutoComplementoUsar.cmPrecoVenda;
            //                                                    oItemPedido.mtPesoBruto = null;
            //                                                    oItemPedido.mtPesoLiquido = null;
            //                                                    oItemPedido.mtIdCfop = null;
            //                                                    oItemPedido.mtIdNcm = oProduto.prIdNcm;

            //                                                    oItemPedido.mtIdLocalEstoque = RetornaCodigoLocalEstoque("LE", iLocalEstoque.ToString());

            //                                                    oItemPedido.mtValorAproxImposto = null;
            //                                                    oItemPedido.mtValorTributoEstadual = null;
            //                                                    oItemPedido.mtValorTributoImportado = null;
            //                                                    oItemPedido.mtValorTributoMunicipal = null;
            //                                                    oItemPedido.mtValorTributoNacional = null;
            //                                                    oItemPedido.mtPercEstadual = null;
            //                                                    oItemPedido.mtPercImportado = null;
            //                                                    oItemPedido.mtPercMunicipal = null;
            //                                                    oItemPedido.mtPercNacional = null;
            //                                                    oItemPedido.mtVersaoIbpt = "";
            //                                                    oItemPedido.mtIdUnidade = oProduto.prIdUnidadePrincipal;
            //                                                    oItemPedido.mtOrdemCompra = "";
            //                                                    oItemPedido.mtOrdemItemCompra = "";
            //                                                    oItemPedido.mtReferencia = "";
            //                                                    oItemPedido.mtEntidade = "";
            //                                                    oItemPedido.mtModalidadeBcIcms = "";
            //                                                    oItemPedido.mtIdCstIcms = null;
            //                                                    oItemPedido.mtBaseIcms = null;
            //                                                    oItemPedido.mtAliquotaIcms = null;
            //                                                    oItemPedido.mtPercentReducaoBaseIcms = null;
            //                                                    oItemPedido.mtValorIcms = null;
            //                                                    oItemPedido.mtValorReducaoIcms = null;
            //                                                    oItemPedido.mtAliquotaIcmsCr = null;
            //                                                    oItemPedido.mtValorIcmsCr = null;
            //                                                    oItemPedido.mtBaseIcmsCr = null;
            //                                                    oItemPedido.mtModalidadeBcIcmsSt = "";
            //                                                    oItemPedido.mtPercentReducaoBaseIcmsSt = null;
            //                                                    oItemPedido.mtAliquotaIcmsSt = null;
            //                                                    oItemPedido.mtAliquotaMva = null;
            //                                                    oItemPedido.mtValorIcmsSt = null;
            //                                                    oItemPedido.mtValorReducaoIcmsSt = null;
            //                                                    oItemPedido.mtBaseIcmsSt = null;
            //                                                    oItemPedido.mtIdCstPis = null;
            //                                                    oItemPedido.mtBasePis = null;
            //                                                    oItemPedido.mtPercentReducaoBasePis = null;
            //                                                    oItemPedido.mtAliquotaPis = null;
            //                                                    oItemPedido.mtValorPis = null;
            //                                                    oItemPedido.mtIdCstCofins = null;
            //                                                    oItemPedido.mtBaseCofins = null;
            //                                                    oItemPedido.mtPercentReducaoBaseCofins = null;
            //                                                    oItemPedido.mtAliquotaCofins = null;
            //                                                    oItemPedido.mtValorCofins = null;
            //                                                    oItemPedido.mtIdCstIpi = null;
            //                                                    oItemPedido.mtBaseIpi = null;
            //                                                    oItemPedido.mtPercentReducaoBaseIpi = null;
            //                                                    oItemPedido.mtAliquotaIpi = null;
            //                                                    oItemPedido.mtValorIpi = null;
            //                                                    oItemPedido.mtIdCstIi = null;
            //                                                    oItemPedido.mtBaseIi = null;
            //                                                    oItemPedido.mtPercentReducaoBaseIi = null;
            //                                                    oItemPedido.mtValorIi = null;
            //                                                    oItemPedido.mtIdCstIssqn = null;
            //                                                    oItemPedido.mtBaseIssqn = null;
            //                                                    oItemPedido.mtPercentReducaoBaseIssqn = null;
            //                                                    oItemPedido.mtValorIssqn = null;
            //                                                    //oItemPedido.mtAliquotaInterEstadual = null;
            //                                                    oItemPedido.mtBaseDifal = null;
            //                                                    oItemPedido.mtAliquotaDifal = null;
            //                                                    oItemPedido.mtValorDifal = null;
            //                                                    oItemPedido.mtBaseFecp = null;
            //                                                    oItemPedido.mtAliquotaFecp = null;
            //                                                    oItemPedido.mtValorFecp = null;
            //                                                    oItemPedido.mtBaseFecpSt = null;
            //                                                    oItemPedido.mtAliquotaFecpSt = null;
            //                                                    oItemPedido.mtValorFecpSt = null;
            //                                                    oItemPedido.mtBaseFecpStRet = null;
            //                                                    oItemPedido.mtAliquotaFecpStRet = null;
            //                                                    oItemPedido.mtValorFecpStRet = null;
            //                                                    oItemPedido.mtValorIcmsPartUfOrigem = null;
            //                                                    oItemPedido.mtValorIcmsPartUfDestino = null;
            //                                                    oItemPedido.mtAliquotaIcmsPartUfOrigem = null;
            //                                                    oItemPedido.mtAliquotaIcmsPartUfDestino = null;
            //                                                    oItemPedido.mtBaseIcmsPartUfOrigem = null;
            //                                                    oItemPedido.mtBaseIcmsPartUfDestino = null;
            //                                                    oItemPedido.mtBaseCalculoKardex = null;
            //                                                    oItemPedido.mtPercentComissao = null;
            //                                                    oItemPedido.mtGuid = oPedidoFortPlus.mvGuid;
            //                                                    oItemPedido.mtObservacao = "";
            //                                                    oItemPedido.mtDmaItem = DateTime.Now;
            //                                                    oItemPedido.idFilial = ClasseParametros.iFilial;
            //                                                    oItemPedido.idIncluidoPor = null;
            //                                                    oItemPedido.idAltaradoPor = null;
            //                                                    oItemPedido.dmaInclusao = DateTime.Now;
            //                                                    oItemPedido.dmaAlteracao = DateTime.Now;
            //                                                    oItemPedido.ativo = "S";
            //                                                    oItemPedido.mtIdCest = oProduto.prIdCest;
            //                                                    oItemPedido.mtIdParent = null;
            //                                                    oItemPedido.mtQtdeLiberada = null;
            //                                                    oItemPedido.mtQtdeSaldo = null;
            //                                                    oItemPedido.mtVariacao = "";
            //                                                    oItemPedido.mtPrecoDePor = null;
            //                                                    oItemPedido.mtAjCusto = "";
            //                                                    oItemPedido.mtCEnqIpi = "";
            //                                                    oItemPedido.mtAgregaTotalFecp = "";
            //                                                    oItemPedido.mtIdLote = null;
            //                                                    oItemPedido.mtLote = "";
            //                                                    oItemPedido.mtDmaLote = DateTime.Now;
            //                                                    s = Newtonsoft.Json.JsonConvert.SerializeObject(oItemPedido);
            //                                                    InseriItensPedidoFortPlus(oItemPedido);

            //                                                }
            //                                            }
            //                                            else
            //                                            {

            //                                                PedidoItemFortPlus oItemPedido = new PedidoItemFortPlus();
            //                                                oItemPedido.id = 0;
            //                                                oItemPedido.mtIdNfOrigem = null;
            //                                                oItemPedido.mtIdMovto = oPedidoFortPlus.id;
            //                                                oItemPedido.mtValorFrete = eValorFreteProduto;

            //                                                lstProduto.Add(oProduto);

            //                                                oItemPedido.mtIdProduto = oProdutoComplemento.cmIdProduto;
            //                                                oItemPedido.mtQtde = oItem.quantity;
            //                                                oItemPedido.mtValorUnitario = oProdutoComplemento.cmPrecoDePor;
            //                                                oItemPedido.mtValor = (oProdutoComplemento.cmPrecoDePor * oItem.quantity);
            //                                                oItemPedido.mtValorTotal = oItemPedido.mtValor + eValorFreteProduto;

            //                                                //mais de uma unidade
            //                                                //04_02_2020
            //                                                float? eTotalSemTarifa = eTotalValor - eTotalDesconto;

            //                                                if (oPedido.buyer.billing_info.doc_type == "CPF")
            //                                                {
            //                                                    float? eValorProduto = eTotalSemTarifa / oItem.quantity;
            //                                                    oItemPedido.mtIdProduto = oProdutoComplemento.cmIdProduto;
            //                                                    oItemPedido.mtQtde = oItem.quantity;
            //                                                    oItemPedido.mtValorUnitario = eValorProduto;
            //                                                    oItemPedido.mtValor = (eValorProduto * oItem.quantity);
            //                                                    oItemPedido.mtValorTotal = oItemPedido.mtValor + eValorFreteProduto;
            //                                                }

            //                                                if (oItemPedido.mtQtde > 1)
            //                                                {
            //                                                    string sMensagem = "Foi vendido itens comuns(que não são KIT'S), com mais de uma unidade\n" + "Pedido: " + sCodigoUsado + "\nNome: " + oPedido.buyer.first_name + " " + oPedido.buyer.last_name;
            //                                                    EnviaMensagemTelegramAsync(sMensagem, "0,1", "Item com mais de um", sCodigoUsado.ToString());
            //                                                }

            //                                                oItemPedido.mtValorDesconto = 0;
            //                                                oItemPedido.mtValorDescontoRateio = 0;
            //                                                oItemPedido.mtPercDesconto = 0;
            //                                                oItemPedido.mtValorFrete = eValorFreteProduto;
            //                                                oItemPedido.mtValorSeguro = 0;
            //                                                oItemPedido.mtValorOutrasDespesas = 0;
            //                                                oItemPedido.mtCustoMedio = null;
            //                                                oItemPedido.mtValorTabela = oProdutoComplemento.cmPrecoVenda;
            //                                                oItemPedido.mtPesoBruto = null;
            //                                                oItemPedido.mtPesoLiquido = null;
            //                                                oItemPedido.mtIdCfop = null;
            //                                                oItemPedido.mtIdNcm = oProduto.prIdNcm;

            //                                                oItemPedido.mtIdLocalEstoque = RetornaCodigoLocalEstoque("LE", iLocalEstoque.ToString());

            //                                                oItemPedido.mtValorAproxImposto = null;
            //                                                oItemPedido.mtValorTributoEstadual = null;
            //                                                oItemPedido.mtValorTributoImportado = null;
            //                                                oItemPedido.mtValorTributoMunicipal = null;
            //                                                oItemPedido.mtValorTributoNacional = null;
            //                                                oItemPedido.mtPercEstadual = null;
            //                                                oItemPedido.mtPercImportado = null;
            //                                                oItemPedido.mtPercMunicipal = null;
            //                                                oItemPedido.mtPercNacional = null;
            //                                                oItemPedido.mtVersaoIbpt = "";
            //                                                oItemPedido.mtIdUnidade = oProduto.prIdUnidadePrincipal;
            //                                                oItemPedido.mtOrdemCompra = "";
            //                                                oItemPedido.mtOrdemItemCompra = "";
            //                                                oItemPedido.mtReferencia = "";
            //                                                oItemPedido.mtEntidade = "";
            //                                                oItemPedido.mtModalidadeBcIcms = "";
            //                                                oItemPedido.mtIdCstIcms = null;
            //                                                oItemPedido.mtBaseIcms = null;
            //                                                oItemPedido.mtAliquotaIcms = null;
            //                                                oItemPedido.mtPercentReducaoBaseIcms = null;
            //                                                oItemPedido.mtValorIcms = null;
            //                                                oItemPedido.mtValorReducaoIcms = null;
            //                                                oItemPedido.mtAliquotaIcmsCr = null;
            //                                                oItemPedido.mtValorIcmsCr = null;
            //                                                oItemPedido.mtBaseIcmsCr = null;
            //                                                oItemPedido.mtModalidadeBcIcmsSt = "";
            //                                                oItemPedido.mtPercentReducaoBaseIcmsSt = null;
            //                                                oItemPedido.mtAliquotaIcmsSt = null;
            //                                                oItemPedido.mtAliquotaMva = null;
            //                                                oItemPedido.mtValorIcmsSt = null;
            //                                                oItemPedido.mtValorReducaoIcmsSt = null;
            //                                                oItemPedido.mtBaseIcmsSt = null;
            //                                                oItemPedido.mtIdCstPis = null;
            //                                                oItemPedido.mtBasePis = null;
            //                                                oItemPedido.mtPercentReducaoBasePis = null;
            //                                                oItemPedido.mtAliquotaPis = null;
            //                                                oItemPedido.mtValorPis = null;
            //                                                oItemPedido.mtIdCstCofins = null;
            //                                                oItemPedido.mtBaseCofins = null;
            //                                                oItemPedido.mtPercentReducaoBaseCofins = null;
            //                                                oItemPedido.mtAliquotaCofins = null;
            //                                                oItemPedido.mtValorCofins = null;
            //                                                oItemPedido.mtIdCstIpi = null;
            //                                                oItemPedido.mtBaseIpi = null;
            //                                                oItemPedido.mtPercentReducaoBaseIpi = null;
            //                                                oItemPedido.mtAliquotaIpi = null;
            //                                                oItemPedido.mtValorIpi = null;
            //                                                oItemPedido.mtIdCstIi = null;
            //                                                oItemPedido.mtBaseIi = null;
            //                                                oItemPedido.mtPercentReducaoBaseIi = null;
            //                                                oItemPedido.mtValorIi = null;
            //                                                oItemPedido.mtIdCstIssqn = null;
            //                                                oItemPedido.mtBaseIssqn = null;
            //                                                oItemPedido.mtPercentReducaoBaseIssqn = null;
            //                                                oItemPedido.mtValorIssqn = null;
            //                                                //oItemPedido.mtAliquotaInterEstadual = null;
            //                                                oItemPedido.mtBaseDifal = null;
            //                                                oItemPedido.mtAliquotaDifal = null;
            //                                                oItemPedido.mtValorDifal = null;
            //                                                oItemPedido.mtBaseFecp = null;
            //                                                oItemPedido.mtAliquotaFecp = null;
            //                                                oItemPedido.mtValorFecp = null;
            //                                                oItemPedido.mtBaseFecpSt = null;
            //                                                oItemPedido.mtAliquotaFecpSt = null;
            //                                                oItemPedido.mtValorFecpSt = null;
            //                                                oItemPedido.mtBaseFecpStRet = null;
            //                                                oItemPedido.mtAliquotaFecpStRet = null;
            //                                                oItemPedido.mtValorFecpStRet = null;
            //                                                oItemPedido.mtValorIcmsPartUfOrigem = null;
            //                                                oItemPedido.mtValorIcmsPartUfDestino = null;
            //                                                oItemPedido.mtAliquotaIcmsPartUfOrigem = null;
            //                                                oItemPedido.mtAliquotaIcmsPartUfDestino = null;
            //                                                oItemPedido.mtBaseIcmsPartUfOrigem = null;
            //                                                oItemPedido.mtBaseIcmsPartUfDestino = null;
            //                                                oItemPedido.mtBaseCalculoKardex = null;
            //                                                oItemPedido.mtPercentComissao = null;
            //                                                oItemPedido.mtGuid = oPedidoFortPlus.mvGuid;
            //                                                oItemPedido.mtObservacao = "";
            //                                                oItemPedido.mtDmaItem = DateTime.Now;
            //                                                oItemPedido.idFilial = ClasseParametros.iFilial;
            //                                                oItemPedido.idIncluidoPor = null;
            //                                                oItemPedido.idAltaradoPor = null;
            //                                                oItemPedido.dmaInclusao = DateTime.Now;
            //                                                oItemPedido.dmaAlteracao = DateTime.Now;
            //                                                oItemPedido.ativo = "S";
            //                                                oItemPedido.mtIdCest = oProduto.prIdCest;
            //                                                oItemPedido.mtIdParent = null;
            //                                                oItemPedido.mtQtdeLiberada = null;
            //                                                oItemPedido.mtQtdeSaldo = null;
            //                                                oItemPedido.mtVariacao = "";
            //                                                oItemPedido.mtPrecoDePor = null;
            //                                                oItemPedido.mtAjCusto = "";
            //                                                oItemPedido.mtCEnqIpi = "";
            //                                                oItemPedido.mtAgregaTotalFecp = "";
            //                                                oItemPedido.mtIdLote = null;
            //                                                oItemPedido.mtLote = "";
            //                                                oItemPedido.mtDmaLote = DateTime.Now;
            //                                                s = Newtonsoft.Json.JsonConvert.SerializeObject(oItemPedido);
            //                                                InseriItensPedidoFortPlus(oItemPedido);
            //                                            }
            //                                        }


            //                                        AtualizaDadosFortPlus(oPedidoFortPlus.id);

            //                                        oResposta = null;
            //                                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            //                                        {
            //                                            RestClient client = null;
            //                                            if (spacote != "")
            //                                                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + spacote.ToString().Trim());
            //                                            else
            //                                                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + sCodigoUsado.ToString().Trim());
            //                                            RestRequest request = new RestRequest(Method.GET);
            //                                            request.AddHeader("Cache-Control", "no-cache");
            //                                            request.AddHeader("Accept", "*/*");
            //                                            request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                                            request.AddHeader("Content-Type", "application/json");
            //                                            if (ClasseParametros.oJsonFortePluslogin == null)
            //                                                ConectaForteplus(5);
            //                                            request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                                            oResposta = client.Execute(request);

            //                                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //                                            {
            //                                                ClasseFuncoes.ConectaForteplus(5);
            //                                            }
            //                                            else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
            //                                            {
            //                                                break;
            //                                            }
            //                                        }


            //                                        oPedidoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);

            //                                        foreach (interRegraNegocio.MercadoLivre.Payment oPagamento in lstPagamento)
            //                                        {
            //                                            if (oPagamento.status != "rejected")
            //                                            {
            //                                                FortPlusFinanceiroReduzido oFinanceiro = new FortPlusFinanceiroReduzido();
            //                                                oFinanceiro.email = "rodrigonunes@2eletro.com.br";
            //                                                oFinanceiro.idFilial = oPedidoFortPlus.idFilial;
            //                                                oFinanceiro.idMovto = oPedidoFortPlus.id;
            //                                                oFinanceiro.idFormaPagamento = RetornaCodigoFormaPagamento(oPagamento.payment_type);
            //                                                oFinanceiro.idCondicaoPagamento = RetornaCodigoCondicaoPagamento("À VISTA");
            //                                                oFinanceiro.valor = Math.Round(double.Parse((eTotalPago + oPagamento.shipping_cost).ToString()), 3);

            //                                                if (oPedido.buyer.billing_info.doc_type == "CPF")
            //                                                {
            //                                                    oFinanceiro.valor = oPedidoFortPlus.mvValorTotal + oPedidoFortPlus.mvValorFrete;
            //                                                }

            //                                                oFinanceiro = CadastraFinanceiroReduzido(oFinanceiro);
            //                                            }
            //                                        }

            //                                        if (spacote != "")
            //                                            sSql = "UPDATE VENDAMARKETPLACE SET STATUS = 1, QUANTIDADEACIMA = 0 WHERE TRIM(PACKID) ='" + spacote.ToString().Trim() + "'";

            //                                        else
            //                                            sSql = "UPDATE VENDAMARKETPLACE SET STATUS = 1, QUANTIDADEACIMA = 0 WHERE TRIM(ID) ='" + sCodigoUsado.ToString().Trim() + "'";
            //                                        ClasseParametros.ExecutabancoMySql(sSql);


            //                                        foreach (ProdutoFortePlus oProduto in lstProduto)
            //                                        {
            //                                            EnviaProdutosMercadoLivreAsync(oProduto.prCodigo.ToString());
            //                                        }


            //                                        if (eTotal > 1)
            //                                        {
            //                                            if (spacote != "")
            //                                                sSql = "UPDATE VENDAMARKETPLACE SET STATUSMENSAGEM = 3, QUANTIDADEACIMA = 1 WHERE TRIM(PACKID) ='" + spacote.ToString().Trim() + "'";

            //                                            else
            //                                                sSql = "UPDATE VENDAMARKETPLACE SET STATUSMENSAGEM = 3, QUANTIDADEACIMA = 1 WHERE TRIM(ID) ='" + sCodigoUsado.ToString().Trim() + "'";
            //                                            ClasseParametros.ExecutabancoMySql(sSql);
            //                                        }

            //                                        string smensagem = string.Format(ClasseParametros.sMensagemAcabouComprar, oCliente.psNome);

            //                                        string sPack = sCodigoUsado.ToString();
            //                                        if (oPedido.pack_id != null)
            //                                            sPack = oPedido.pack_id.ToString();

            //                                        //EnviaMensagemMercadoLivre(sPack, oPedido.seller.id.ToString(), oPedido.buyer.id.ToString(), smensagem, "1", sCodigoUsado.ToString(), null, "STATUSMENSAGEMRETIRADA", "");

            //                                        d.Dispose();
            //                                    }
            //                                }
            //                            }
            //                            catch (Exception ex)
            //                            {
            //                                string sMensagem = "Pedido não integrado, erro genérico.\n" + "Pedido: " + sCodigoUsado + "\nNome: " + oPedido.buyer.first_name + " " + oPedido.buyer.last_name;
            //                                EnviaMensagemTelegramAsync(sMensagem, "0,1", "Pedido não cadastrado", sCodigoUsado.ToString());
            //                            }
            //                        }
            //                    }
            //                    else if (oPedido.shipping.substatus != null && oPedido.shipping.substatus.ToString() == "waiting_for_withdrawal")
            //                    {
            //                        string sSql = "SELECT * FROM VENDAMARKETPLACE WHERE ID = '" + sCodigoUsado + "' ";
            //                        DataTable dtbVenda = ClasseParametros.ConsultaBancoMysql(sSql);
            //                        if (dtbVenda.Rows.Count > 0)
            //                            if (dtbVenda.Rows[0]["STATUSMENSAGEMRETIRADA"].ToString() == "")
            //                            {
            //                                string sMensagem = "Bom dia " + oPedido.buyer.first_name + " " + oPedido.buyer.last_name + ",\no produto esta aguardando a retirada nos correios perto de sua residência. Equipe 2ELETRO agradece";
            //                                //EnviaMensagemMercadoLivre(sCodigoUsado.ToString(), ClasseParametros.oMeli.UserId, oPedido.buyer.id.ToString(), sMensagem, "1", sCodigoUsado.ToString(), null, "STATUSMENSAGEMRETIRADA", "");


            //                            }
            //                        //STATUSMENSAGEMRETIRADA
            //                    }
            //                }
            //                catch (Exception ex)
            //                {


            //                }
            //            }
            //            iOffset += 50;
            //            oPedidoMercadoLivre = null;


            //        }
            //        catch (Exception ex)
            //        {

            //            if (oPedidoMercadoLivre == null || oPedidoMercadoLivre.results == null)
            //                ConectaMercadoLivreAsync(5);
            //        }
            //        Thread.Sleep(2000);
            //    }
            //}
            //catch
            //{

            //}
        }

        private static bool EnviaMensagemMercadoLivreAsync(string sPacksPedido, string sSellerID, string sUserID, string sMensagem, string sAnexo, int iTipoMensagem)
        {

            bool lOk = false;

            ////Adiciono produto no mercado livre
            //MercadoLivreEnvioMensagem oMLMensagem = new MercadoLivreEnvioMensagem();
            //From oFrom = new From();
            //oFrom.user_id = sSellerID;
            //oFrom.email = "rodrigonunes@2eletro.com.br";

            //To oTo = new To();
            //oTo.user_id = sUserID;


            //oMLMensagem.from = oFrom;
            //oMLMensagem.to = oTo;
            //oMLMensagem.text = sMensagem;
            //string[] aAnexo = new string[1];

            //if (sAnexo != "")
            //{
            //    aAnexo[0] = sAnexo;
            //    oMLMensagem.attachments = aAnexo;
            //}

            //List<Parameter> ps = new List<Parameter>();
            //Parameter p = new Parameter();
            //p.Name = "access_token";
            //p.Value = ClasseParametros.oMeli.AccessToken;
            //ps.Add(p);


            //var oRespostaEntrega = ClasseParametros.oMeli.Post("/messages/packs/" + sPacksPedido + "/sellers/" + sSellerID, ps, oMLMensagem);
            //if (oRespostaEntrega.StatusCode == HttpStatusCode.OK)
            //{
            //    string sSql = "INSERT INTO MENSAGEMVENDAS VALUES('" + sPacksPedido + "'," + iTipoMensagem.ToString() + ")";
            //    ClasseParametros.ExecutabancoMySql(sSql);
            //}

            return lOk;
        }

        public static FortPlusFinanceiroReduzido CadastraFinanceiroReduzido(FortPlusFinanceiroReduzido oFinanceiro)
        {
            //int i = 0;

            //string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oFinanceiro);
            //IRestResponse oResposta = null;

            //while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            //{
            //    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/PagamentoPedido");
            //    RestRequest request = new RestRequest(Method.POST);
            //    request.AddHeader("Cache-Control", "no-cache");
            //    request.AddHeader("Accept", "*/*");
            //    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //    request.AddHeader("Content-Type", "application/json");
            //    request.AddParameter("application/json", sJson, ParameterType.RequestBody);
            //    if (ClasseParametros.oJsonFortePluslogin == null)
            //        ConectaForteplus(5);
            //    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //    oResposta = client.Execute(request);

            //    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //    {
            //        ClasseFuncoes.ConectaForteplus(5);
            //    }

            //    if (i < 10)
            //    {
            //        break;
            //    }
            //    i++;

            //}

            //FortPlusFinanceiroReduzido oListPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<FortPlusFinanceiroReduzido>(oResposta.Content);

            return null;
        }

        public static ClienteFortPlus CadastraClienteB2WFortPlus(B2WPedido oPedidoB2W)
        {
            ClienteFortPlus oRetorno = null;

            ClienteFortPlus oCliente = new ClienteFortPlus();
            oCliente.id = "0";
            oCliente.psCodigo = "0";
            oCliente.psTipoPessoa = "1";

            oCliente.psNome = oPedidoB2W.customer.name;
            oCliente.psNomeFantasia = oPedidoB2W.customer.name;
            oCliente.psCpfCnpj = oPedidoB2W.customer.vat_number;

            //if (oPedidoB2W.CustomerPjCnpj != null)
            //{
            //    oCliente.psNome = oPedidoB2W.CustomerPjCorporatename;
            //    oCliente.psNomeFantasia = oPedidoB2W.CustomerPjCorporatename;
            //    oCliente.psCpfCnpj = oPedidoB2W.CustomerPjCnpj;
            //    oCliente.psInscricaoEstadual = oPedidoB2W.CustomerPjIe;
            //}

            if (oPedidoB2W.customer.date_of_birth != null && oPedidoB2W.customer.date_of_birth != "")
                oCliente.psDmaNascimento = DateTime.Parse(oPedidoB2W.customer.date_of_birth);
            oCliente.psCep = oPedidoB2W.shipping_address.postcode;
            enderecoERP oEndereco = ClasseCorreiosLocal.RetornaEnderecoPorCEP(oPedidoB2W.shipping_address.postcode);
            oCliente.psLogradouro = oPedidoB2W.shipping_address.street;
            if (oPedidoB2W.shipping_address.street.Length > 60)
            {
                oCliente.psLogradouro = oPedidoB2W.shipping_address.street.Substring(0, 60);

            }
            oCliente.psNumero = oPedidoB2W.shipping_address.number;
            if (oPedidoB2W.shipping_address.complement != null)
            {
                oCliente.psComplemento = oPedidoB2W.shipping_address.complement;
                if (oPedidoB2W.shipping_address.complement.Length > 60)
                    oCliente.psComplemento = oPedidoB2W.shipping_address.complement.Substring(0, 60);
            }
            oCliente.psBairro = oPedidoB2W.shipping_address.neighborhood;
            if (oCliente.psBairro == "")
            {
                oCliente.psBairro = oEndereco.bairro;
            }

            oCliente.psIdUf = RetornaCodigoGlobal("UF", oPedidoB2W.shipping_address.region);
            oCliente.psIdMunicipio = RetornaCodigoMunicipio(RetornaStringSemAcento(oPedidoB2W.shipping_address.city));

            if (oCliente.psIdMunicipio == 0)
            {
                string sMunicipio = "";
                if (oEndereco.cidade.Contains("("))
                {
                    sMunicipio = oEndereco.cidade.Split('(')[1].Replace(")", "");
                }

                oCliente.psIdMunicipio = RetornaCodigoMunicipio(RetornaStringSemAcento(sMunicipio));
            }

            oCliente.psIdPais = RetornaCodigoPais("Brasil");
            oCliente.psIdRegiao = 1;
            oCliente.psIdRota = null;
            oCliente.psEmail = "";
            oCliente.psSite = "MBL";
            if (oPedidoB2W.customer.phones[0] != null)
                oCliente.psTelFixo = oPedidoB2W.customer.phones[0];

            if (oPedidoB2W.customer.phones[0] != null)
                if (oPedidoB2W.customer.phones[0] != null)
                {
                    oCliente.psTelCelular = oPedidoB2W.customer.phones[0];
                    if (oPedidoB2W.customer.phones[0].Length > 20)
                        oCliente.psTelCelular = oPedidoB2W.customer.phones[0].Substring(0, 20);
                }

            oCliente.psTelFax = "";
            oCliente.psTelOutros = "";
            oCliente.psContatoFixo = "";
            oCliente.psContatoCelular = "";
            oCliente.psInscricaoMunicipal = "";
            oCliente.psInscricaoEstadual = "";
            oCliente.psInscricaoSuframa = "";
            oCliente.psRegimeTributario = "1";//falta

            oCliente.psTipoInscricao = "F";
            if (oPedidoB2W.channel == "Americanas Empresas")
                oCliente.psTipoInscricao = "J";

            oCliente.psTipoContribIcms = "9";//falta
            oCliente.psConsumidorFinal = "S";
            oCliente.psProdutorRural = "N";
            oCliente.psRecolheIss = "N";
            oCliente.psIdVendedor = RetornaVendedorFortPlus("B2W");
            oCliente.psObservacao = "";
            oCliente.psEntidade = "CLI";
            oCliente.psTipoComissao = "";
            oCliente.psPercentComissao = null;
            oCliente.idFilial = ClasseParametros.iFilial;
            oCliente.idIncluidoPor = null;
            oCliente.idAltaradoPor = null;
            oCliente.dmaInclusao = DateTime.Now;
            oCliente.dmaAlteracao = DateTime.Now;
            oCliente.ativo = "S";
            oCliente.psIdTabelaPreco = null;
            oCliente.psBaseInclui = "";
            oCliente.psGuid = Guid.NewGuid().ToString();
            oCliente.psIdClasse = null;
            oCliente.psOver = "";
            oCliente.psIdExterno = "";
            IRestResponse oResposta = null;
            ClienteFortPlus oClienteCadastrado = null;

            //if (oPedidoB2W.CustomerPjCnpj != null)
            //    oClienteCadastrado = ConsultaClienteFortPlus(oPedidoB2W.CustomerPjCnpj.Trim());
            //else
            oClienteCadastrado = ConsultaClienteFortPlus(oPedidoB2W.customer.vat_number.Trim());

            string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);


            if (oClienteCadastrado == null)
            {


                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente");
                    RestRequest request = new RestRequest(Method.POST);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == HttpStatusCode.InternalServerError)
                    {
                        return null;
                    }
                }
                oRetorno = Newtonsoft.Json.JsonConvert.DeserializeObject<ClienteFortPlus>(oResposta.Content);

            }
            else
            {
                oCliente.id = oClienteCadastrado.id;
                oCliente.psCodigo = oClienteCadastrado.psCodigo;

                sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.NoContent)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente/" + oClienteCadastrado.id);
                    RestRequest request = new RestRequest(Method.PUT);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == HttpStatusCode.InternalServerError)
                    {
                        return null;
                    }
                }
                //if (oPedidoB2W.CustomerPjCnpj != null)
                //    oClienteCadastrado = ConsultaClienteFortPlus(oPedidoB2W.CustomerPjCnpj.Trim());
                //else
                //    oClienteCadastrado = ConsultaClienteFortPlus(oPedidoB2W.CustomerPfCpf.Trim());

                oRetorno = oClienteCadastrado;

            }


            return oRetorno;
        }


        public static ClienteFortPlus CadastraClienteMAGALUFortPlus(Order oPedidoMAGALU)
        {
            ClienteFortPlus oRetorno = null;

            ClienteFortPlus oCliente = new ClienteFortPlus();
            oCliente.id = "0";
            oCliente.psCodigo = "0";
            oCliente.psTipoPessoa = "1";

            oCliente.psNome = oPedidoMAGALU.CustomerPfName;
            oCliente.psNomeFantasia = oPedidoMAGALU.CustomerPfName;
            oCliente.psCpfCnpj = oPedidoMAGALU.CustomerPfCpf;

            if (oPedidoMAGALU.CustomerPjCnpj != null)
            {
                oCliente.psNome = oPedidoMAGALU.CustomerPjCorporatename;
                oCliente.psNomeFantasia = oPedidoMAGALU.CustomerPjCorporatename;
                oCliente.psCpfCnpj = oPedidoMAGALU.CustomerPjCnpj;
                oCliente.psInscricaoEstadual = oPedidoMAGALU.CustomerPjIe;
            }

            if (oPedidoMAGALU.CustomerBirthDate != "")
                oCliente.psDmaNascimento = DateTime.Parse(oPedidoMAGALU.CustomerBirthDate);
            oCliente.psCep = oPedidoMAGALU.DeliveryAddressZipcode;
            enderecoERP oEndereco = ClasseCorreiosLocal.RetornaEnderecoPorCEP(oPedidoMAGALU.DeliveryAddressZipcode);
            oCliente.psLogradouro = oPedidoMAGALU.DeliveryAddressStreet;
            if (oPedidoMAGALU.DeliveryAddressStreet.Length > 60)
            {
                oCliente.psLogradouro = oPedidoMAGALU.DeliveryAddressStreet.Substring(0, 60);

            }
            oCliente.psNumero = oPedidoMAGALU.DeliveryAddressNumber;
            if (oPedidoMAGALU.DeliveryAddressAdditionalInfo != null)
            {
                oCliente.psComplemento = oPedidoMAGALU.DeliveryAddressAdditionalInfo.ToString();
                if (oPedidoMAGALU.DeliveryAddressAdditionalInfo.Length > 60)
                    oCliente.psComplemento = oPedidoMAGALU.DeliveryAddressAdditionalInfo.Substring(0, 60);
            }
            oCliente.psBairro = oPedidoMAGALU.DeliveryAddressNeighborhood;
            if (oCliente.psBairro == "")
            {
                oCliente.psBairro = oEndereco.bairro;
            }

            oCliente.psIdUf = RetornaCodigoGlobal("UF", oPedidoMAGALU.DeliveryAddressState);
            oCliente.psIdMunicipio = RetornaCodigoMunicipio(RetornaStringSemAcento(oPedidoMAGALU.DeliveryAddressCity));

            if (oCliente.psIdMunicipio == 0)
            {
                oCliente.psIdMunicipio = RetornaCodigoMunicipio(oEndereco.cidade);
            }

            oCliente.psIdPais = RetornaCodigoPais("Brasil");
            oCliente.psIdRegiao = 1;
            oCliente.psIdRota = null;
            oCliente.psEmail = "";
            oCliente.psSite = "MBL";
            if (oPedidoMAGALU.TelephoneMainNumber != null)
                oCliente.psTelFixo = oPedidoMAGALU.TelephoneMainNumber;

            if (oPedidoMAGALU.TelephoneMainNumber != null)
                if (oPedidoMAGALU.TelephoneMainNumber != null)
                {
                    oCliente.psTelCelular = oPedidoMAGALU.TelephoneMainNumber;
                    if (oPedidoMAGALU.TelephoneMainNumber.Length > 20)
                        oCliente.psTelCelular = oPedidoMAGALU.TelephoneMainNumber.Substring(0, 20);
                }

            oCliente.psTelFax = "";
            oCliente.psTelOutros = "";
            oCliente.psContatoFixo = "";
            oCliente.psContatoCelular = "";
            oCliente.psInscricaoMunicipal = "";
            oCliente.psInscricaoEstadual = "";
            oCliente.psInscricaoSuframa = "";
            oCliente.psRegimeTributario = "1";//falta

            oCliente.psTipoInscricao = "F";
            if (oPedidoMAGALU.CustomerPjCnpj != null)
                oCliente.psTipoInscricao = "J";

            oCliente.psTipoContribIcms = "9";//falta
            oCliente.psConsumidorFinal = "S";
            oCliente.psProdutorRural = "N";
            oCliente.psRecolheIss = "N";
            oCliente.psIdVendedor = RetornaVendedorFortPlus("MAGAZINE LUIZA");
            oCliente.psObservacao = "";
            oCliente.psEntidade = "CLI";
            oCliente.psTipoComissao = "";
            oCliente.psPercentComissao = null;
            oCliente.idFilial = ClasseParametros.iFilial;
            oCliente.idIncluidoPor = null;
            oCliente.idAltaradoPor = null;
            oCliente.dmaInclusao = DateTime.Now;
            oCliente.dmaAlteracao = DateTime.Now;
            oCliente.ativo = "S";
            oCliente.psIdTabelaPreco = null;
            oCliente.psBaseInclui = "";
            oCliente.psGuid = Guid.NewGuid().ToString();
            oCliente.psIdClasse = null;
            oCliente.psOver = "";
            oCliente.psIdExterno = "";
            IRestResponse oResposta = null;
            ClienteFortPlus oClienteCadastrado = null;

            if (oPedidoMAGALU.CustomerPjCnpj != null)
                oClienteCadastrado = ConsultaClienteFortPlus(oPedidoMAGALU.CustomerPjCnpj.Trim());
            else
                oClienteCadastrado = ConsultaClienteFortPlus(oPedidoMAGALU.CustomerPfCpf.Trim());

            string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);


            if (oClienteCadastrado == null)
            {


                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente");
                    RestRequest request = new RestRequest(Method.POST);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == HttpStatusCode.InternalServerError)
                    {
                        return null;
                    }
                }
                oRetorno = Newtonsoft.Json.JsonConvert.DeserializeObject<ClienteFortPlus>(oResposta.Content);

            }
            else
            {
                oCliente.id = oClienteCadastrado.id;
                oCliente.psCodigo = oClienteCadastrado.psCodigo;

                sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.NoContent)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente/" + oClienteCadastrado.id);
                    RestRequest request = new RestRequest(Method.PUT);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == HttpStatusCode.InternalServerError)
                    {
                        return null;
                    }
                }
                if (oPedidoMAGALU.CustomerPjCnpj != null)
                    oClienteCadastrado = ConsultaClienteFortPlus(oPedidoMAGALU.CustomerPjCnpj.Trim());
                else
                    oClienteCadastrado = ConsultaClienteFortPlus(oPedidoMAGALU.CustomerPfCpf.Trim());

                oRetorno = oClienteCadastrado;

            }


            return oRetorno;
        }

        public static ClienteFortPlus CadastraClienteFortPlus(Result oPedido, MercadoLivreEntrega oEntrega)
        {
            ClienteFortPlus oRetorno = null;

            ClienteFortPlus oCliente = new ClienteFortPlus();
            oCliente.id = "0";
            oCliente.psCodigo = "0";
            oCliente.psTipoPessoa = "1";
            oCliente.psNome = oPedido.buyer.first_name + " " + oPedido.buyer.last_name;
            oCliente.psNomeFantasia = oPedido.buyer.first_name + " " + oPedido.buyer.last_name;
            oCliente.psCpfCnpj = oPedido.buyer.billing_info.doc_number;
            oCliente.psDmaNascimento = DateTime.Now;
            oCliente.psCep = oEntrega.receiver_address.zip_code;
            enderecoERP oEndereco = ClasseCorreiosLocal.RetornaEnderecoPorCEP(oEntrega.receiver_address.zip_code);
            oCliente.psLogradouro = oEntrega.receiver_address.street_name;
            if (oEntrega.receiver_address.street_name.ToString().Length > 60)
            {
                oCliente.psLogradouro = oEntrega.receiver_address.street_name.ToString().Substring(0, 60);

            }
            oCliente.psNumero = oEntrega.receiver_address.street_number;
            if (oEntrega.receiver_address.comment != null)
            {
                oCliente.psComplemento = oEntrega.receiver_address.comment.ToString();
                if (oEntrega.receiver_address.comment.ToString().Length > 60)
                    oCliente.psComplemento = oEntrega.receiver_address.comment.ToString().Substring(0, 60);
            }
            oCliente.psBairro = oEntrega.receiver_address.neighborhood.name;
            if (oCliente.psBairro == "")
            {
                oCliente.psBairro = oEndereco.bairro;
            }
            if (oCliente.psBairro == null || oCliente.psBairro == "")
            {

                oCliente.psBairro = "Bairro";

            }


            oCliente.psIdUf = RetornaCodigoGlobal("UF", oEntrega.receiver_address.state.id.Split('-')[1].Trim());
            oCliente.psIdMunicipio = RetornaCodigoMunicipio(RetornaStringSemAcento(oEntrega.receiver_address.city.name));

            if (oCliente.psIdMunicipio == 0 && oEndereco == null)
            {
                oCliente.psIdMunicipio = 0;
            }

            else if (oCliente.psIdMunicipio == 0)
            {
                oCliente.psIdMunicipio = RetornaCodigoMunicipio(oEndereco.cidade);
            }

            oCliente.psIdPais = RetornaCodigoPais(oEntrega.receiver_address.country.name);
            oCliente.psIdRegiao = 1;
            oCliente.psIdRota = null;
            oCliente.psEmail = "";
            oCliente.psSite = "MBL";
            if (oPedido.buyer.alternative_phone != null)
                oCliente.psTelFixo = oPedido.buyer.alternative_phone.number;
            if (oPedido.buyer.phone != null)
                if (oPedido.buyer.phone.number != null)
                {
                    oCliente.psTelCelular = oPedido.buyer.phone.number;
                    if (oPedido.buyer.phone.number.ToString().Length > 20)
                        oCliente.psTelCelular = oPedido.buyer.phone.number.ToString().Substring(0, 20);
                }

            oCliente.psTelFax = "";
            oCliente.psTelOutros = "";
            oCliente.psContatoFixo = "";
            oCliente.psContatoCelular = "";
            oCliente.psInscricaoMunicipal = "";
            oCliente.psInscricaoEstadual = "";
            oCliente.psInscricaoSuframa = "";
            oCliente.psRegimeTributario = "1";//falta
            if (oPedido.buyer.billing_info.doc_type == "CPF")
                oCliente.psTipoInscricao = "F";
            else
                oCliente.psTipoInscricao = "J";

            oCliente.psTipoContribIcms = "9";//falta
            oCliente.psConsumidorFinal = "S";
            oCliente.psProdutorRural = "N";
            oCliente.psRecolheIss = "N";
            oCliente.psIdVendedor = RetornaVendedorFortPlus("MERCADO LIVRE");
            oCliente.psObservacao = "";
            oCliente.psEntidade = "CLI";
            oCliente.psTipoComissao = "";
            oCliente.psPercentComissao = null;
            oCliente.idFilial = ClasseParametros.iFilial;
            oCliente.idIncluidoPor = null;
            oCliente.idAltaradoPor = null;
            oCliente.dmaInclusao = DateTime.Now;
            oCliente.dmaAlteracao = DateTime.Now;
            oCliente.ativo = "S";
            oCliente.psIdTabelaPreco = null;
            oCliente.psBaseInclui = "";
            oCliente.psGuid = Guid.NewGuid().ToString();
            oCliente.psIdClasse = null;
            oCliente.psOver = "";
            oCliente.psIdExterno = "";
            IRestResponse oResposta = null;

            ClienteFortPlus oClienteCadastrado = ConsultaClienteFortPlus(oPedido.buyer.billing_info.doc_number.Trim());

            string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);


            if (oClienteCadastrado == null)
            {


                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente");
                    RestRequest request = new RestRequest(Method.POST);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == HttpStatusCode.InternalServerError)
                    {
                        return null;
                    }
                }
                oRetorno = Newtonsoft.Json.JsonConvert.DeserializeObject<ClienteFortPlus>(oResposta.Content);

            }
            else
            {
                oCliente.id = oClienteCadastrado.id;
                oCliente.psCodigo = oClienteCadastrado.psCodigo;

                sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.NoContent)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente/" + oClienteCadastrado.id);
                    RestRequest request = new RestRequest(Method.PUT);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == HttpStatusCode.InternalServerError)
                    {
                        return null;
                    }
                }
                oClienteCadastrado = ConsultaClienteFortPlus(oPedido.buyer.billing_info.doc_number.Trim());

                oRetorno = oClienteCadastrado;

            }


            return oRetorno;
        }

        private static int? RetornaCodigoComplementoIdExterno(string sIdExterno)
        {
            int? iRetorno = 0;
            IRestResponse oResposta = null;


            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<ProdutoComplemento> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(oResposta.Content);

            foreach (ProdutoComplemento oFormaPagamento in oListFormaPagamento)
            {
                if (oFormaPagamento.cmIdExterno != null)
                    if (oFormaPagamento.cmIdExterno.ToString() == sIdExterno)
                    {
                        iRetorno = oFormaPagamento.cmIdProduto;
                        break;
                    }
            }

            return iRetorno;
        }

        public static int? RetornaCodigoFormaPagamento(string sNome)
        {
            int? iRetorno = 0;
            IRestResponse oResposta = null;


            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/FormaPagto");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<FortPlusFormaPagamento> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusFormaPagamento>>(oResposta.Content);

            string sTipoPagamento = "CARTÃO DÉBITO";
            if (RetornaStringSemAcento(sNome).ToUpper() == "credit_card")
                sTipoPagamento = "CARTÃO CRÉDITO";
            else if ((RetornaStringSemAcento(sNome).ToUpper() == "ticket"))
                sTipoPagamento = "TICKET";
            else if (RetornaStringSemAcento(sNome).ToUpper() == "account_money")
                sTipoPagamento = "DINHEIRO";

            foreach (FortPlusFormaPagamento oFormaPagamento in oListFormaPagamento)
            {
                if (oFormaPagamento.fpNome == sTipoPagamento)
                {
                    iRetorno = oFormaPagamento.id;
                    break;
                }
            }

            return iRetorno;
        }

        public static int? RetornaCodigoCondicaoPagamento(string sNome)
        {
            int? iRetorno = 0;
            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/CondicaoPagto");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<FortPlusCondicaoPagamento> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusCondicaoPagamento>>(oResposta.Content);

            foreach (FortPlusCondicaoPagamento oFormaPagamento in oListFormaPagamento)
            {
                if (oFormaPagamento.cpNome == sNome)
                {
                    iRetorno = oFormaPagamento.id;
                    break;
                }
            }

            return iRetorno;
        }

        private static string RetornaDescricaoMunicipio(string id)
        {
            string sRetorno = "";
            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Municipio/" + id);
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            MunicipioFortPlus oListMunicipio = Newtonsoft.Json.JsonConvert.DeserializeObject<MunicipioFortPlus>(oResposta.Content);


            return oListMunicipio.mnNome;
        }

        public static string RetornaStringSemAcento(string sString)
        {
            StringBuilder sbReturn = new StringBuilder();
            var arrayText = sString.Normalize(NormalizationForm.FormD).ToCharArray();
            foreach (char letter in arrayText)
            {
                if (CharUnicodeInfo.GetUnicodeCategory(letter) != UnicodeCategory.NonSpacingMark)
                    sbReturn.Append(letter);
            }
            return sbReturn.ToString();
        }

        private static int? RetornaCodigoMunicipio(string id)
        {
            int? iRetorno = 0;
            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Municipio");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<MunicipioFortPlus> oListMunicipio = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MunicipioFortPlus>>(oResposta.Content);

            foreach (MunicipioFortPlus oMunicipio in oListMunicipio)
            {
                if (oMunicipio.mnNome.Contains("Lond"))
                {

                }

                if (RetornaStringSemAcento(oMunicipio.mnNome).ToLower().Replace("-", " ") == RetornaStringSemAcento(id).ToLower().Replace("-", " "))
                {
                    iRetorno = oMunicipio.id;
                    break;
                }
            }

            return iRetorno;
        }


        public static MunicipioFortPlus RetornaMunicipio(int? id)
        {
            int? iRetorno = 0;
            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Municipio/" + id.ToString());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            MunicipioFortPlus oListMunicipio = Newtonsoft.Json.JsonConvert.DeserializeObject<MunicipioFortPlus>(oResposta.Content);


            return oListMunicipio;
        }

        public static string RetornaNomeMunicipio(int? id)
        {
            int? iRetorno = 0;
            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Municipio/" + id.ToString());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            MunicipioFortPlus oListMunicipio = Newtonsoft.Json.JsonConvert.DeserializeObject<MunicipioFortPlus>(oResposta.Content);


            return oListMunicipio.mnNome;
        }

        public static void RecebePedidoEnviaMercadoLivreGeraEtiquetaAsync(int iCodigoCliente)
        {
            try
            {
                DataTable dtbPedidos = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAMARKETPLACE WHERE STATUS = 1 AND MARKETPLACE = 'MERCADOLIVRE' AND PEDIDOCANCELADO = 0");
                int? iCodigoVendedor = RetornaVendedorFortPlus("MERCADO LIVRE");

                IRestResponse oResposta = null;

                ConectaMercadoLivreAsync(iCodigoCliente);

                List<Parameter> ps = new List<Parameter>();
                Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                ps.Add(p);

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                    RestRequest request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        break;
                    }
                }

                List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);

                foreach (DataRow r in dtbPedidos.Rows)
                {
                    if (r["ID"].ToString().Trim() == "2644834061")
                    {

                    }

                    List<Pedido> lstPedidoFiltrado = lstPedido.Where(x => x.mvIdExterno != null && x.mvIdExterno.Trim() == r["ID"].ToString().Trim() && x.mvEntidade == "NFE").ToList();

                    if (lstPedidoFiltrado.Count == 0)
                        lstPedidoFiltrado = lstPedido.Where(x => x.mvIdExterno != null && x.mvIdExterno.Trim() == r["PACKID"].ToString().Trim() && x.mvEntidade == "NFE").ToList();

                    if (lstPedidoFiltrado.Count == 0)
                        continue;

                    foreach (Pedido oPedidoAtual in lstPedidoFiltrado)
                    {

                        if (oPedidoAtual.mvIdExterno.ToString() == "2608783850")
                        {

                        }

                        Console.WriteLine(" Gerando Etiqueta do Pedido " + oPedidoAtual.id.ToString() + " - Referente ao Pedido Mercado Livre " + oPedidoAtual.mvIdExterno);
                        if (r["ID"].ToString().Trim() == "2531056580")
                        {

                        }

                        if (oPedidoAtual.mvChaveAcesso == null)
                        {
                            continue;
                        }

                        if (ClasseParametros.oMeli == null)
                            ConectaMercadoLivreAsync(iCodigoCliente);


                        oResposta = null;
                        MercadoLivreEntrega oEntrega = null;

                        while (oResposta == null)
                        {


                            oResposta = ClasseParametros.oMeli.Get("orders/" + oPedidoAtual.mvIdExterno, ps);

                            Result oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);



                            if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                            {
                                ConectaMercadoLivreAsync(iCodigoCliente);

                            }

                            if (oResposta.StatusCode == HttpStatusCode.NotFound)
                            {
                                oResposta = ClasseParametros.oMeli.Get("orders/" + r["ID"].ToString(), ps);

                                oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);
                            }

                            oResposta = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);


                            oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);
                            if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                            {
                                ClasseFuncoes.ConectaMercadoLivreAsync(5);
                                oResposta = null;
                            }
                            else if (oResposta.StatusCode == 0)
                            {
                                ClasseFuncoes.ConectaMercadoLivreAsync(5);

                                oResposta = null;
                            }
                        }

                        ps = new List<Parameter>();
                        p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                        ps.Add(p);
                        p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                        ps.Add(p);
                        p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                        ps.Add(p);



                        oResposta = null;
                        while (oResposta == null)
                        {
                            oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                            if (oResposta.Content.Contains("delivered") || oResposta.Content.Contains("shipped"))
                            {
                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + r["ID"].ToString() + "'");
                            }
                            else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                            {
                                ConectaMercadoLivreAsync(5);
                                oResposta = null;

                            }
                        }

                        /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                        if (oResposta.StatusCode == HttpStatusCode.OK)
                        {
                            ClasseParametros.SalvaEtiqueta(oPedidoAtual.mvChaveAcesso, oResposta.RawBytes, 5, oPedidoAtual.mvIdExterno, "MELI");
                            string sSql = "SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oPedidoAtual.mvChaveAcesso + "' AND ETIQUETATXT = ''";
                            DataTable dtbVendas = ClasseParametros.ConsultaBancoMysql(sSql);
                            if (dtbVendas.Rows.Count == 0)
                            {
                                ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oPedidoAtual.mvChaveAcesso + "'");
                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + r["ID"].ToString() + "'");
                            }
                            dtbVendas.Dispose();
                            break;
                        }
                    }





                    //Pedido oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);
                    //if (oPedido != null)
                    //{
                    //    oResposta = null;
                    //    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                    //    {
                    //        RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/Parent/" + oPedido.id.ToString().Trim());
                    //        RestRequest request = new RestRequest(Method.GET);
                    //        request.AddHeader("Cache-Control", "no-cache");
                    //        request.AddHeader("Accept", "*/*");
                    //        request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    //        request.AddHeader("Content-Type", "application/json");
                    //        request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    //        oResposta = client.Execute(request);

                    //        if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    //        {
                    //            ClasseFuncoes.ConectaForteplus(5);
                    //        }
                    //        else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                    //        {
                    //            break;
                    //        }
                    //    }
                    //    List<Pedido> oListPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);
                    //    if (oListPedido != null)
                    //    {
                    //        oPedido = oListPedido[0];


                    //    }
                    //}

                    //if (oPedido != null)
                    //{

                    //}
                }
                ///api/Pedido
                lstPedido = null;
            }
            catch
            {

            }
        }

        public static int? RetornaTransportadorFortPlus(string sFantasia)
        {
            int? iRetorno = 0;


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Transportadora");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<TranportadorFortPlus> oListTransportador = Newtonsoft.Json.JsonConvert.DeserializeObject<List<TranportadorFortPlus>>(oResposta.Content);

            foreach (TranportadorFortPlus oVendedor in oListTransportador)
            {
                if (oVendedor.psNomeFantasia == sFantasia)
                {
                    iRetorno = oVendedor.id;
                }
            }

            return iRetorno;
        }

        public static string RetornaFantasiaVendedorFortPlus(int? iCodigo)
        {
            string sRetorno = "";


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Vendedor/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<VendedorFortPlus> oListVendedores = Newtonsoft.Json.JsonConvert.DeserializeObject<List<VendedorFortPlus>>(oResposta.Content);

            foreach (VendedorFortPlus oVendedor in oListVendedores)
            {
                if (oVendedor.id == iCodigo)
                {
                    sRetorno = oVendedor.psNomeFantasia;
                    break;
                }
            }

            return sRetorno;
        }

        public static int? RetornaVendedorFortPlus(string sFantasia)
        {
            int? iRetorno = 0;


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Vendedor");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<VendedorFortPlus> oListVendedores = Newtonsoft.Json.JsonConvert.DeserializeObject<List<VendedorFortPlus>>(oResposta.Content);

            foreach (VendedorFortPlus oVendedor in oListVendedores)
            {
                if (oVendedor.psNomeFantasia == sFantasia)
                {
                    iRetorno = oVendedor.id;
                    break;
                }
            }

            return iRetorno;
        }

        public static string AtualizaDadosFortPlus(long? iCodigoPedido)
        {
            string sRetorno = "";

            IRestResponse oResposta = null;

            AtualizaStatusFortPlus oAtualizaStatus = new AtualizaStatusFortPlus();
            oAtualizaStatus.email = "rodrigonunes@2eletro.com.br";
            oAtualizaStatus.idFilial = ClasseParametros.iFilial;
            oAtualizaStatus.idMovto = iCodigoPedido;
            string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oAtualizaStatus);

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/AtualizarDados");
                RestRequest request = new RestRequest(Method.POST);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                    break;
            }
            ParametroFortPlus oGlobal = Newtonsoft.Json.JsonConvert.DeserializeObject<ParametroFortPlus>(oResposta.Content);
            if (oGlobal == null)
                return null;
            else
                return oGlobal.stConteudo;
        }

        public static string RetornaCodigoParametro(string sNome)
        {
            string sRetorno = "";


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Parametro/chave/" + sNome);
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            ParametroFortPlus oGlobal = Newtonsoft.Json.JsonConvert.DeserializeObject<ParametroFortPlus>(oResposta.Content);

            return oGlobal.stConteudo;
        }

        public static string RetornaSiglaEstadoGlobalMK(int? iTipoAnuncio)
        {
            string sRetorno = "";
            string sTemp = "";


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Global/UF/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<GlobalFortPlus> oGlobais = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GlobalFortPlus>>(oResposta.Content);

            foreach (GlobalFortPlus oGlobal in oGlobais)
            {
                if (oGlobal.id == iTipoAnuncio)
                {
                    sRetorno = oGlobal.glCodigo;
                    break;
                }
            }

            return sRetorno;
        }

        public static string RetornaNomeGlobalMK(string sTipo, int? iTipoAnuncio)
        {
            string sRetorno = "";
            string sTemp = "";


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Global/" + sTipo + "/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<GlobalFortPlus> oGlobais = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GlobalFortPlus>>(oResposta.Content);

            foreach (GlobalFortPlus oGlobal in oGlobais)
            {
                if (oGlobal.id == iTipoAnuncio)
                {
                    sRetorno = oGlobal.glNome;
                    break;
                }
            }

            return sRetorno;
        }


        public static List<GlobalFortPlus> RetornaListaGlobalMK(string sTipo)
        {
            string sRetorno = "";
            string sTemp = "";


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Global/" + sTipo + "/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<GlobalFortPlus> oGlobais = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GlobalFortPlus>>(oResposta.Content);

            return oGlobais;
        }

        public static string RetornaCodigoGlobalMK(string sTipo, int? iTipoAnuncio)
        {
            string sRetorno = "";
            string sTemp = "";


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Global/" + sTipo + "/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<GlobalFortPlus> oGlobais = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GlobalFortPlus>>(oResposta.Content);

            foreach (GlobalFortPlus oGlobal in oGlobais)
            {
                if (oGlobal.id == iTipoAnuncio)
                {
                    sTemp = oGlobal.glCodigo;
                    break;
                }
            }

            sRetorno = "gold";
            if (sTemp == "P")
                sRetorno = "gold_pro";


            return sRetorno;
        }

        public static int? RetornaCodigoLocalEstoque(string sTipo, string sCodigo)
        {
            int iRetorno = 0;


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Global/" + sTipo);
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<GlobalFortPlus> oGlobais = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GlobalFortPlus>>(oResposta.Content);

            foreach (GlobalFortPlus oGlobal in oGlobais)
            {
                if (oGlobal.glCodigo == sCodigo)
                {
                    iRetorno = oGlobal.id;
                    break;
                }
            }
            return iRetorno;
        }

        public static string RetornaDescricaoGlobal(string sTipo, string sId)
        {
            string sRetorno = "";


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Global/" + sTipo);
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<GlobalFortPlus> oGlobals = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GlobalFortPlus>>(oResposta.Content);
            foreach (GlobalFortPlus oGlobal in oGlobals)
            {
                if (oGlobal.id.ToString() == sId)
                    sRetorno = oGlobal.glCodigo;
            }
            return sRetorno;
        }

        public static int? RetornaCodigoTranportadora(string sNome)
        {
            int? iRetorno = 0;


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Transportadora");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<TranportadorFortPlus> oGlobal = Newtonsoft.Json.JsonConvert.DeserializeObject<List<TranportadorFortPlus>>(oResposta.Content);

            foreach (TranportadorFortPlus oTrans in oGlobal)
            {
                if (oTrans.psNomeFantasia != null && oTrans.psNomeFantasia.ToLower() == sNome.ToLower())
                {
                    iRetorno = oTrans.id;
                    break;
                }
            }

            return iRetorno;
        }

        public static int? RetornaCodigoGlobal(string sTipo, string sNome)
        {
            int iRetorno = 0;

            if (sNome.Length > 2)
            {
                if (RetornaStringSemAcento(sNome).ToUpper() == "ACRE")
                    sNome = "AC";
                if (RetornaStringSemAcento(sNome).ToUpper() == "ALAGOAS")
                    sNome = "AL";
                if (RetornaStringSemAcento(sNome).ToUpper() == "AMAPA")
                    sNome = "AP";
                if (RetornaStringSemAcento(sNome).ToUpper() == "AMAZONAS")
                    sNome = "AM";
                if (RetornaStringSemAcento(sNome).ToUpper() == "BAHIA")
                    sNome = "BA";
                if (RetornaStringSemAcento(sNome).ToUpper() == "CEARA")
                    sNome = "CE";
                if (RetornaStringSemAcento(sNome).ToUpper() == "DISTRITO FEDERAL")
                    sNome = "DF";
                if (RetornaStringSemAcento(sNome).ToUpper() == "ESPIRITO SANTO")
                    sNome = "ES";
                if (RetornaStringSemAcento(sNome).ToUpper() == "GOIAS")
                    sNome = "GO";
                if (RetornaStringSemAcento(sNome).ToUpper() == "MARANHAO")
                    sNome = "MA";
                if (RetornaStringSemAcento(sNome).ToUpper() == "MATO GROSSO")
                    sNome = "MT";
                if (RetornaStringSemAcento(sNome).ToUpper() == "MATO GROSSO DO SUL")
                    sNome = "MS";
                if (RetornaStringSemAcento(sNome).ToUpper() == "MINAS GERAIS")
                    sNome = "MG";
                if (RetornaStringSemAcento(sNome).ToUpper() == "PARA")
                    sNome = "PA";
                if (RetornaStringSemAcento(sNome).ToUpper() == "PARAIBA")
                    sNome = "PB";
                if (RetornaStringSemAcento(sNome).ToUpper() == "PARANA")
                    sNome = "PR";
                if (RetornaStringSemAcento(sNome).ToUpper() == "PERNAMBUCO")
                    sNome = "PE";
                if (RetornaStringSemAcento(sNome).ToUpper() == "PIAUI")
                    sNome = "PI";
                if (RetornaStringSemAcento(sNome).ToUpper() == "RIO DE JANEIRO")
                    sNome = "RJ";
                if (RetornaStringSemAcento(sNome).ToUpper() == "RIO GRANDE DO NORTE")
                    sNome = "RN";
                if (RetornaStringSemAcento(sNome).ToUpper() == "RIO GRANDE DO SUL")
                    sNome = "RS";
                if (RetornaStringSemAcento(sNome).ToUpper() == "RONDONIA")
                    sNome = "RO";
                if (RetornaStringSemAcento(sNome).ToUpper() == "RORAIMA")
                    sNome = "RR";
                if (RetornaStringSemAcento(sNome).ToUpper() == "SANTA CATARINA")
                    sNome = "SC";
                if (RetornaStringSemAcento(sNome).ToUpper() == "SAO PAULO")
                    sNome = "SP";
                if (RetornaStringSemAcento(sNome).ToUpper() == "SERGIPE")
                    sNome = "SE";
                if (RetornaStringSemAcento(sNome).ToUpper() == "TOCANTINS")
                    sNome = "TO";
            }


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Global/" + sTipo + "/" + sNome);
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            GlobalFortPlus oGlobal = Newtonsoft.Json.JsonConvert.DeserializeObject<GlobalFortPlus>(oResposta.Content);
            iRetorno = oGlobal.id;
            return iRetorno;
        }


        /// <summary>
        /// Retorna filhos da variações
        /// </summary>
        /// <param name="sTipo"></param>
        /// <param name="sNome"></param>
        /// <returns></returns>
        public static List<GlobalFortPlus> RetornaVariacoes(string sTipo, string sNome)
        {
            int iRetorno = 0;

            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Global/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<GlobalFortPlus> oGlobal = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GlobalFortPlus>>(oResposta.Content);
            List<GlobalFortPlus> oGlobalTemp = oGlobal.Where(x => x.glNome == sNome).ToList();
            oGlobalTemp = oGlobal.Where(x => x.glIdPai == oGlobalTemp[0].id).ToList();

            return oGlobalTemp;
        }


        private static int? RetornaCodigoPais(string sNome)
        {
            int iRetorno = 0;


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Global/PS/");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<GlobalFortPlus> oGlobals = Newtonsoft.Json.JsonConvert.DeserializeObject<List<GlobalFortPlus>>(oResposta.Content);
            foreach (GlobalFortPlus oPais in oGlobals)
            {
                if (oPais.glNome == sNome)
                {
                    iRetorno = oPais.id;
                    break;
                }
            }



            return iRetorno;
        }

        private static int RetornaTransportadoraMercadoLivreAsync(int sender_id)
        {
            int iRetorno = -1;

            //List<Parameter> ps = new List<Parameter>();
            //Parameter p = new Parameter();
            //p.Name = "access_token";
            //p.Value = ClasseParametros.oMeli.AccessToken;
            //ps.Add(p);
            //p = new Parameter();
            //p.Name = "SHIPMENT_ID";
            //p.Value = sender_id;
            //ps.Add(p);

            //var oResposta = ClasseParametros.oMeli.Get("/shipments", ps);

            return iRetorno;
        }

        public static PedidoItemFortPlus InseriItensPedidoFortPlus(PedidoItemFortPlus oItemPedido)
        {
            //string sJsonPedido = Newtonsoft.Json.JsonConvert.SerializeObject(oItemPedido);

            //IRestResponse oResposta = null;

            //while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
            //{
            //    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/PedidoItem");
            //    RestRequest request = new RestRequest(Method.POST);
            //    request.AddHeader("Cache-Control", "no-cache");
            //    request.AddHeader("Accept", "*/*");
            //    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //    request.AddHeader("Content-Type", "application/json");
            //    request.AddParameter("application/json", sJsonPedido, ParameterType.RequestBody);
            //    if (ClasseParametros.oJsonFortePluslogin == null)
            //        ConectaForteplus(5);
            //    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //    oResposta = client.Execute(request);

            //    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //    {
            //        ClasseFuncoes.ConectaForteplus(5);
            //    }
            //}

            //return Newtonsoft.Json.JsonConvert.DeserializeObject<PedidoItemFortPlus>(oResposta.Content);

            return null;
        }

        public static Pedido CriaPedidoFortPlus(Pedido oPedidoFortPlus)
        {
            //string sJsonPedido = Newtonsoft.Json.JsonConvert.SerializeObject(oPedidoFortPlus);

            //IRestResponse oResposta = null;

            //while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
            //{
            //    var client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
            //    var request = new RestRequest(Method.POST);
            //    request.AddHeader("Cache-Control", "no-cache");
            //    request.AddHeader("Accept", "*/*");
            //    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //    request.AddHeader("Content-Type", "application/json");
            //    request.AddParameter("application/json", sJsonPedido, ParameterType.RequestBody);
            //    if (ClasseParametros.oJsonFortePluslogin == null)
            //        ConectaForteplus(5);
            //    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //    oResposta = client.Execute(request);

            //    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //    {
            //        ClasseFuncoes.ConectaForteplus(5);
            //    }
            //    else if (oResposta.StatusCode == System.Net.HttpStatusCode.Created)
            //    {
            //        break;
            //    }
            //}

            //return Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);

            return null;
        }

        public static ClienteFortPlus RetornaClienteFortPlus(string sIDCliente)
        {
            IRestResponse oResposta = null;
            oResposta = null;
            int i = 0;
            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente/Id/" + sIDCliente.ToString().Trim());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }

                if (i > 5)
                    break;
                i++;
            }

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClienteFortPlus>(oResposta.Content);
        }


        public static List<ClienteFortPlus> RetornaClienteFortPlus()
        {
            IRestResponse oResposta = null;
            oResposta = null;
            int i = 0;
            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }

                if (i > 5)
                    break;
                i++;
            }

            return Newtonsoft.Json.JsonConvert.DeserializeObject<List<ClienteFortPlus>>(oResposta.Content);
        }

        private static ClienteFortPlus ConsultaClienteFortPlus(string sCPFCNPJ)
        {
            IRestResponse oResposta = null;
            oResposta = null;
            int i = 0;
            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente/" + sCPFCNPJ.ToString().Trim());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }

                if (i > 5)
                    break;
                i++;
            }

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ClienteFortPlus>(oResposta.Content);
        }

        public static void EnviaProdutoSite()
        {
            try
            {
                List<ProdutoFortePlus> oListaProdutos = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoFortePlus>>(RetornaProdutosFortPlus().Content);

                foreach (ProdutoFortePlus oProduto in oListaProdutos)
                {
                    Console.WriteLine(" Envia produto " + oProduto.prNome);
                    if (oProduto.prCodigo.ToString().ToUpper().Contains("KIT"))
                    {

                    }

                    if (oProduto.prCodigo.ToString().ToUpper() == "IMPEPS12")
                    {

                    }

                    try
                    {
                        List<ProdutoComplemento> olstProdutoComplemento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(RetornaProdutoComplementoFortPlus(oProduto.id).Content);

                        foreach (ProdutoComplemento oListaProdutoComplemento in olstProdutoComplemento)
                        {
                            Console.WriteLine("  Envia produto complemento " + oProduto.prNome);

                            if (oListaProdutoComplemento != null)
                            {
                                string sMarketplace = RetornaNomeGlobalMK("MK", oListaProdutoComplemento.cmIdMarketPlace);

                                string sSql = "";
                                Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();
                                //DataTable dtbProduto = ClasseParametros.ConsultaBanco("SELECT * FROM PRODUTO WHERE ID = @ID", ParametrosSQL);

                                DataTable dtbProduto = ClasseParametros.ConsultaBancoMysql("SELECT * FROM PRODUTO WHERE CODIGO = '" + oProduto.prCodigo + "' AND MARKETPLACE = '" + sMarketplace + "'");
                                if (dtbProduto.Rows.Count == 0)
                                {
                                    sSql = "INSERT INTO PRODUTO (CODIGOINTERNO,DESCRICAO,CARACTERISTICASTEC,ATUALIZADO,CODIGO,TIPOANUNCIO,GUID,MARKETPLACE) VALUES(@CODIGOINTERNO,@DESCRICAO,@CARACTERISTICASTEC,@ATUALIZADO,@CODIGO,@TIPOANUNCIO,@GUID,@MARKETPLACE)";
                                    ParametrosSQL.Add("ATUALIZADO", 1);
                                    ParametrosSQL.Add("CODIGOINTERNO", oProduto.id);
                                    ParametrosSQL.Add("DESCRICAO", oProduto.prNome);
                                    ParametrosSQL.Add("CARACTERISTICASTEC", oListaProdutoComplemento.cmCaracteristica);
                                    ParametrosSQL.Add("CODIGO", oProduto.prCodigo);
                                    ParametrosSQL.Add("TIPOANUNCIO", oProduto.prVariacao);
                                    ParametrosSQL.Add("GUID", oProduto.prGuid);
                                    ParametrosSQL.Add("MARKETPLACE", sMarketplace);
                                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                                    Application.DoEvents();
                                }

                                //ParametrosSQL.Add("ID", oProduto.id);
                                //ParametrosSQL.Add("CARACTERISTICASTEC", oListaProdutoComplemento.cmCaracteristica);
                                //ParametrosSQL.Add("ATUALIZADO", "S");
                                //ParametrosSQL.Add("CODIGO", oProduto.prCodigo);
                                //ParametrosSQL.Add("DESCRICAO", oProduto.prNome);
                                //ParametrosSQL.Add("TIPOANUNCIO", oProduto.prVariacao);
                                //ParametrosSQL.Add("GUID", oProduto.prGuid);
                                //ClasseParametros.Executabanco(sSql, ParametrosSQL);
                                dtbProduto.Dispose();




                            }
                        }
                    }
                    catch (System.Exception ex)
                    {
                        SalvaLogServicos(ex.Message);
                    }
                }

            }
            catch
            {

            }
        }

        public static void AtualizaProdutos(int iCodigoCliente)
        {


            Console.WriteLine(" Iniciando importação de produto ");

            ClasseParametros.sBanco = ClasseParametros.oIni.IniReadValue("banco", "banco");
            ClasseParametros.sIP = ClasseParametros.oIni.IniReadValue("banco", "servidor");
            ClasseParametros.sUsuario = ClasseParametros.oIni.IniReadValue("banco", "usuario");

            List<ProdutoFortePlus> lstProdutos = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoFortePlus>>(ClasseFuncoes.RetornaProdutosFortPlus().Content);
            List<ProdutoComplemento> lstProdutosComplemento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(ClasseFuncoes.RetornaProdutoComplementosFortPlus().Content);
            int i = 1;
            foreach (ProdutoFortePlus oProduto in lstProdutos)
            {
                ClasseParametros.sBanco = "sistemaweb";
                ClasseParametros.sIP = "187.45.196.191";
                ClasseParametros.sUsuario = "sistemaweb";
                ClasseParametros.sSenha = "Rodrigo06#";
                string sSql = "SELECT * FROM produto WHERE cProd = '" + oProduto.prCodigo + "'";
                DataTable d = ClasseParametros.ConsultaBancoMysql(sSql);
                string sCodigoProduto = "";

                Console.WriteLine(" Inserindo produto " + oProduto.prNome);
                if (d.Rows.Count == 0)
                {
                    sSql = "INSERT INTO produto(cProd, xProd,cEAN,uCom,vProd,emitente) ";
                    sSql += "VALUES('" + oProduto.prCodigo + "','" + oProduto.prNome + "','" + oProduto.prEan + "','UN','" + oProduto.prPrecoVenda + "','1')";
                    ClasseParametros.ExecutabancoMySql(sSql);
                    sSql = "SELECT * FROM produto WHERE cProd = '" + oProduto.prCodigo + "'";
                    d = ClasseParametros.ConsultaBancoMysql(sSql);
                    sCodigoProduto = d.Rows[0]["produtoid"].ToString();
                }
                else
                {
                    sCodigoProduto = d.Rows[0]["produtoid"].ToString();
                }

                List<ProdutoComplemento> lstProdutosComplementoAtual = lstProdutosComplemento.Where(x => x.cmIdProduto == oProduto.id).ToList();

                foreach (ProdutoComplemento oProdutoComplemento in lstProdutosComplementoAtual)
                {

                    string sMarketplace = ClasseFuncoes.RetornaNomeGlobalMK("MK", oProdutoComplemento.cmIdMarketPlace);
                    ClasseParametros.sBanco = "sistemaweb";
                    ClasseParametros.sIP = "187.45.196.191";
                    ClasseParametros.sUsuario = "sistemaweb";
                    ClasseParametros.sSenha = "Rodrigo06#";
                    Console.WriteLine(" Inserindo complemento " + sMarketplace);

                    sSql = "SELECT * FROM marketplace WHERE marketplace = '" + sMarketplace + "' ";
                    d = ClasseParametros.ConsultaBancoMysql(sSql);
                    string sCodigoMK = "";
                    if (d.Rows.Count == 0)
                    {
                        sSql = "INSERT INTO marketplace(marketplace) VALUES('" + sMarketplace + "')";
                        ClasseParametros.ExecutabancoMySql(sSql);
                        sSql = "SELECT * FROM marketplace WHERE marketplace = '" + sMarketplace + "' ";
                        d = ClasseParametros.ConsultaBancoMysql(sSql);
                        sCodigoMK = d.Rows[0]["codigo"].ToString();
                    }
                    else
                    {
                        sCodigoMK = d.Rows[0]["codigo"].ToString();
                    }


                    sSql = "SELECT * FROM produtomarketplace WHERE marketplace = '" + sCodigoMK + "' AND  produto = '" + sCodigoProduto + "'";
                    d = ClasseParametros.ConsultaBancoMysql(sSql);
                    if (d.Rows.Count == 0)
                    {
                        sSql = "INSERT INTO produtomarketplace(marketplace,produto,percentual,valor) VALUES('" + sCodigoMK + "','" + sCodigoProduto + "','" + oProdutoComplemento.cmPercentual.ToString() + "','" + oProdutoComplemento.cmPrecoDePor.ToString() + "')";
                        ClasseParametros.ExecutabancoMySql(sSql);
                    }


                }
                i++;
            }


        }

        public static void CarregaFiliais(string sFilial)
        {
            string sCNPJ = sFilial.Split('-')[0].Replace(".", "").Replace("/", "") + sFilial.Split('-')[1];

            //get id filial

            IRestResponse response = null;
            response = null;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Filial/" + sCNPJ);
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }

            ClasseParametros.iFilial = int.Parse(response.Content.Split(':')[1].Replace("}", ""));
        }

        public static void VerificaEtiquetaAmazonJADLOG(TextBox oEdit)
        {
            SalvaLogServicos("Verifica Status JADLOG");
            DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM ETIQUETAJADLOG J WHERE J.TRACKING = '' OR  J.TRACKING IS NULL");
            foreach (DataRow r in d.Rows)
            {
                string sCodigo = r["SHIPMENTIDJADLOG"].ToString();

                JADLOG.Consulta[] aConsulta = new JADLOG.Consulta[1];
                JADLOG.Consulta oConsultaCOdigo = new JADLOG.Consulta();
                oConsultaCOdigo.shipmentId = sCodigo;
                aConsulta[0] = oConsultaCOdigo;

                JADLOG.JADLOGConsultaTrackingcs oConsulta = new JADLOG.JADLOGConsultaTrackingcs();
                oConsulta.consulta = aConsulta;
                string sConsultaJADLOG = Newtonsoft.Json.JsonConvert.SerializeObject(oConsulta);
                IRestResponse oResposta = null;
                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    RestClient client = new RestClient("http://www.jadlog.com.br/embarcador/api/tracking/consultar");
                    RestRequest request = new RestRequest(Method.POST);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sConsultaJADLOG, ParameterType.RequestBody);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.sTokenJADLOG);

                    oResposta = client.Execute(request);
                }

                try
                {
                    JADLOG.JADLOGRetornoConsultaTracking oTracking = Newtonsoft.Json.JsonConvert.DeserializeObject<JADLOG.JADLOGRetornoConsultaTracking>(oResposta.Content);
                    if (oTracking != null)
                    {
                        if (oTracking.consulta[0].tracking.codigo == null)
                            continue;
                        string sSql = "UPDATE ETIQUETAJADLOG SET TRACKING = '" + oTracking.consulta[0].tracking.codigo + "' WHERE CODIGOJADLOG = '" + sCodigo + "'";
                        ClasseParametros.ExecutabancoMySql(sSql);

                    }
                }
                catch (System.Exception ex)
                {
                    SalvaLogServicos(ex.Message);
                }
            }
        }


        public static void VerificaEtiquetaJADLOG(int iCodigoCliente)
        {
            DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM ETIQUETAJADLOG J WHERE J.TRACKING = ''");
            foreach (DataRow r in d.Rows)
            {
                string sCodigo = r["SHIPMENTIDJADLOG"].ToString();

                JADLOG.Consulta[] aConsulta = new JADLOG.Consulta[1];
                JADLOG.Consulta oConsultaCOdigo = new JADLOG.Consulta();
                oConsultaCOdigo.shipmentId = sCodigo;
                aConsulta[0] = oConsultaCOdigo;

                JADLOG.JADLOGConsultaTrackingcs oConsulta = new JADLOG.JADLOGConsultaTrackingcs();
                oConsulta.consulta = aConsulta;
                string sConsultaJADLOG = Newtonsoft.Json.JsonConvert.SerializeObject(oConsulta);
                IRestResponse oResposta = null;
                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    RestClient client = new RestClient("http://www.jadlog.com.br/embarcador/api/tracking/consultar");
                    RestRequest request = new RestRequest(Method.POST);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sConsultaJADLOG, ParameterType.RequestBody);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.sTokenJADLOG);

                    oResposta = client.Execute(request);
                }

                try
                {
                    JADLOG.JADLOGRetornoConsultaTracking oTracking = Newtonsoft.Json.JsonConvert.DeserializeObject<JADLOG.JADLOGRetornoConsultaTracking>(oResposta.Content);
                    if (oTracking != null)
                    {
                        if (oTracking.consulta[0].tracking.codigo == null)
                            continue;
                        string sSql = "UPDATE ETIQUETAJADLOG SET TRACKING = '" + oTracking.consulta[0].tracking.codigo + "' WHERE CODIGOJADLOG = '" + sCodigo + "'";
                        ClasseParametros.ExecutabancoMySql(sSql);

                        #region Pedido e PedidoItem
                        oResposta = null;
                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                        {
                            RestClient oClientIdExterno = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + r["PEDIDOEXTERNO"].ToString());
                            RestRequest oRequestIdExterno = new RestRequest(Method.GET);
                            oRequestIdExterno.AddHeader("Accept-Encoding", "gzip, deflate");
                            oRequestIdExterno.AddHeader("Cache-Control", "no-cache");
                            oRequestIdExterno.AddHeader("Accept", "*/*");
                            if (ClasseParametros.oJsonFortePluslogin == null)
                                ConectaForteplus(5);
                            oRequestIdExterno.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                            oResposta = oClientIdExterno.Execute(oRequestIdExterno);

                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                            {
                                ClasseFuncoes.ConectaForteplus(5);
                            }
                        }
                        Pedido oPedidoExterno = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);

                        oResposta = null;
                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                        {
                            RestClient oClientIdExternoItem = new RestClient(ClasseParametros.sURlFortPlus + "/api/PedidoItem/Pedido/" + oPedidoExterno.id.ToString());
                            RestRequest oRequestIdExternoItem = new RestRequest(Method.GET);
                            oRequestIdExternoItem.AddHeader("Accept-Encoding", "gzip, deflate");
                            oRequestIdExternoItem.AddHeader("Cache-Control", "no-cache");
                            oRequestIdExternoItem.AddHeader("Accept", "*/*");
                            if (ClasseParametros.oJsonFortePluslogin == null)
                                ConectaForteplus(5);
                            oRequestIdExternoItem.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                            oResposta = oClientIdExternoItem.Execute(oRequestIdExternoItem);

                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                            {
                                ClasseFuncoes.ConectaForteplus(5);
                            }
                        }
                        List<PedidoItemFortPlus> oPedidoItem = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PedidoItemFortPlus>>(oResposta.Content);
                        #endregion

                        B2WEnvioTracking oTrackingB2W = new B2WEnvioTracking();
                        oTrackingB2W.status = "order_shipped";

                        ShipmentEnvioTracking oEntrega = new ShipmentEnvioTracking();

                        oEntrega.code = r["PEDIDOEXTERNO"].ToString();
                        oEntrega.items = new B2W.ItemEnvioTracking[oPedidoItem.Count];
                        int i = 0;

                        foreach (PedidoItemFortPlus oItem in oPedidoItem)
                        {
                            ItemEnvioTracking oItemB2W = new ItemEnvioTracking();


                            ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(RetornaProdutoFortPlus(oItem.mtIdProduto.ToString().Trim()).Content);

                            oItemB2W.sku = oProduto.prCodigo;
                            oItemB2W.qty = (int)oItem.mtQtde;
                            oEntrega.items[i] = oItemB2W;
                            i++;
                        }
                        TrackEnvioTracking oTrack = new TrackEnvioTracking();
                        oTrack.carrier = "JADLOG";
                        oTrack.code = oTracking.consulta[0].tracking.codigo;
                        oTrack.method = "PACKAGE";
                        oTrack.url = "https://jadlog.com.br/siteDpd/tracking.jad";
                        oTrackingB2W.shipment = oEntrega;
                        oTrackingB2W.shipment.track = oTrack;

                        B2W.InvoiceEnvioTracking oInvoice = new B2W.InvoiceEnvioTracking();
                        oInvoice.key = r["CHAVEACESSO"].ToString();

                        oTrackingB2W.invoice = oInvoice;

                        string sJSON = Newtonsoft.Json.JsonConvert.SerializeObject(oTrackingB2W);
                        DataTable dtbCliente = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                        string sKey = dtbCliente.Rows[0]["KEYB2W"].ToString();
                        string sUsuario = dtbCliente.Rows[0]["USUARIOB2W"].ToString();
                        RestClient client = new RestClient("https://api.skyhub.com.br/orders/" + r["PEDIDOEXTERNO"].ToString().Trim() + "/shipments");
                        RestRequest request = new RestRequest(Method.POST);
                        request.AddHeader("Content-Length", "52");
                        request.AddHeader("Cache-Control", "no-cache");
                        request.AddHeader("Accept", "application/json");
                        request.AddHeader("Content-Type", "application/json");
                        request.AddHeader("x-Api-Key", sKey);
                        request.AddHeader("X-User-Email", sUsuario);
                        request.AddParameter("application/json", sJSON, ParameterType.RequestBody);
                        IRestResponse response = client.Execute(request);
                        dtbCliente.Dispose();

                    }
                }
                catch (System.Exception ex)
                {
                    SalvaLogServicos(ex.Message);
                }
            }
        }
        public static void SalvaEtiquetaB2W(int iCodigoCliente)
        {
            try
            {
                //VerificaEtiquetaJADLOG(iCodigoCliente);
                //VerificaEtiquetaAmazonJADLOG(oEdit);
                List<FortPlusXML> lstXML = RetornaListaXMLFortPlus();
                RestRequest oRequest = null;
                IRestResponse oResposta = null;
                RestClient client = null;

                DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                string sKey = d.Rows[0]["KEYB2W"].ToString();
                string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                string sAccount = "0MDxaksT8d";
                d.Dispose();

                int iPagina = 1;
                int iPorPagina = 50;

                while (true)
                {
                    oResposta = null;
                    while (oResposta == null)
                    {

                        client = new RestClient("https://api.skyhub.com.br/orders?filters[statuses][]=order_invoiced&page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                        //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                        //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
                        oRequest = new RestRequest(Method.GET);
                        oRequest.AddHeader("cache-control", "no-cache");
                        oRequest.AddHeader("Accept", "application/json");
                        oRequest.AddHeader("Content-Type", "application/json");
                        oRequest.AddHeader("x-Api-Key", sKey);
                        oRequest.AddHeader("X-User-Email", sUsuario);
                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                        oResposta = client.Execute(oRequest);

                        if (oResposta.StatusCode == HttpStatusCode.BadGateway || oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError || oResposta.StatusCode == 0)
                        {
                            oResposta = null;
                        }
                    }
                    Thread.Sleep(2000);
                    #region etiqueta b2w
                    if (oResposta.Content == "Account  not found")
                    {
                        continue;
                    }
                    if (oResposta.Content.Contains("504 Gateway Time-ou"))
                    {
                        continue;
                    }

                    B2WPedidos lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPedidos>(oResposta.Content);
                    if (lstPedido.orders == null || lstPedido.orders.Length == 0)
                    {
                        break;
                    }

                    foreach (B2WPedido oPedido in lstPedido.orders)
                    {
                        Console.WriteLine("Gera etiqueta do pedido " + oPedido.code);

                        try
                        {
                            if (oPedido.shipping_method == "Correios PAC" || oPedido.shipping_method == "Planilha")
                            {
                                Pedido oPedidoFortePlus = RetornaPedidoFortePlusPorIdExterno(oPedido.code);
                                if (oPedidoFortePlus != null)
                                {
                                    GeraEtiquetaJADLOG(oPedidoFortePlus, iCodigoCliente, lstXML);
                                }

                                continue;
                            }

                            if (oPedido.invoices[0].key == "32200634036601000338550010000149041001217216")
                            {
                                //Pedido oPedidoFortePlus = RetornaPedidoFortePlusPorIdExterno(oPedido.code);

                                //GeraEtiquetaJADLOG(oPedidoFortePlus);
                            }

                            if (oPedido.code.Contains("275394886601"))
                            {

                            }

                            if (oPedido.invoices[0].number.Contains("13322"))
                            {

                            }

                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oPedido.invoices[0].key + "'", null);

                            if (d.Rows.Count > 0)
                            {
                                continue;
                            }

                            if (oPedido.code.Contains("79690267"))
                            {

                            }
                            client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                            RestRequest request = new RestRequest(Method.POST);
                            request.AddHeader("Content-Length", "52");
                            request.AddHeader("Cache-Control", "no-cache");
                            request.AddHeader("Accept", "application/json");
                            request.AddHeader("Content-Type", "application/json");
                            request.AddHeader("x-Api-Key", sKey);
                            request.AddHeader("X-User-Email", sUsuario);
                            request.AddHeader("X-Accountmanager-Key", sAccount);

                            string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oPedido.code, @"[^\d]")) + "\"\n  ]\n}";
                            request.AddParameter("application/json", sPost, ParameterType.RequestBody);
                            IRestResponse response = client.Execute(request);

                            if (response.Content.Contains("nao tem nota fiscal"))
                            {
                                continue;
                            }

                            if (response.Content.Contains("nao localizados"))
                            {
                                continue;
                            }

                            Thread.Sleep(1000);
                            for (int i = 0; i < 12; i++)
                            {
                                if (response.StatusCode == HttpStatusCode.Created)
                                    break;

                                if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout || response.StatusCode == HttpStatusCode.ServiceUnavailable)
                                {
                                    Thread.Sleep(10000);
                                    response = client.Execute(request);
                                }
                                else if (response.StatusCode.ToString() == "429")
                                {
                                    Thread.Sleep(20000);
                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                    request = new RestRequest(Method.POST);
                                    request.AddHeader("Content-Length", "52");
                                    request.AddHeader("Cache-Control", "no-cache");
                                    request.AddHeader("Accept", "application/json");
                                    request.AddHeader("Content-Type", "application/json");
                                    request.AddHeader("x-Api-Key", sKey);
                                    request.AddHeader("X-User-Email", sUsuario);
                                    request.AddHeader("X-Accountmanager-Key", sAccount);

                                    sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oPedido.code, @"[^\d]")) + "\"\n  ]\n}";
                                    request.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                    response = client.Execute(request);
                                    Thread.Sleep(3000);
                                }
                                else
                                    break;
                            }

                            if (response.StatusCode == HttpStatusCode.Created)
                            {
                                string sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                response = null;
                                while (response == null)
                                {
                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                    request = new RestRequest(Method.GET);
                                    request.AddHeader("cache-control", "no-cache");
                                    request.AddHeader("Accept", "application/json");
                                    request.AddHeader("Content-Type", "application/json");
                                    request.AddHeader("x-Api-Key", sKey);
                                    request.AddHeader("X-User-Email", sUsuario);
                                    request.AddHeader("X-Accountmanager-Key", sAccount);

                                    response = client.Execute(request);

                                    if (response.Content.Contains("no Route matched"))
                                    {
                                        Thread.Sleep(3000);
                                        response = null;
                                    }
                                }

                                for (int i = 0; i < 12; i++)
                                {
                                    if (response.StatusCode == HttpStatusCode.OK)
                                        break;

                                    if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                    {
                                        Thread.Sleep(10000);
                                        response = client.Execute(request);
                                    }

                                    else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                    {
                                        Thread.Sleep(20000);
                                        client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                        request = new RestRequest(Method.GET);
                                        request.AddHeader("cache-control", "no-cache");
                                        request.AddHeader("Accept", "application/json");
                                        request.AddHeader("Content-Type", "application/json");
                                        request.AddHeader("x-Api-Key", sKey);
                                        request.AddHeader("X-User-Email", sUsuario);
                                        request.AddHeader("X-Accountmanager-Key", sAccount);

                                        response = client.Execute(request);
                                        Thread.Sleep(3000);
                                    }
                                    else
                                        break;
                                }

                                Thread.Sleep(3000);
                                EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                if (oJsonB2W.docsExternos.Length > 0)
                                    if (oJsonB2W.plp != null)
                                    {
                                        string sEtiqueta = GeraEtiquetaB2W(oJsonB2W, oPedido.code.Split('-')[0], "PAC");
                                        byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                        ClasseParametros.SalvaEtiquetaAnyMarket(oPedido.invoices[0].key, aEtiqueta, oPedido.code.Split('-')[0], 5, oPedido.code.Split('-')[0], oPedido.code.Split('-')[1]);

                                        // salva json
                                        if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                            Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                        File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oPedido.invoices[0].key + ".json", response.Content); // Requires System.IO
                                    }

                            }
                            d.Dispose();
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(ex.Message);

                        }
                    }
                    #endregion
                    iPagina += 1;

                }


            }
            catch
            {

            }


            //IRestResponse oResposta = null;
            //while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            //{
            //    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/");
            //    RestRequest request = new RestRequest(Method.GET);
            //    request.AddHeader("Accept-Encoding", "gzip, deflate");
            //    request.AddHeader("Cache-Control", "no-cache");
            //    request.AddHeader("Accept", "*/*");
            //    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
            //    oResposta = client.Execute(request);

            //    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //    {
            //        ClasseFuncoes.ConectaForteplus(5);
            //    }
            //    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
            //    {
            //        break;
            //    }
            //}

            //List<Pedido> oPedidos = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);

            //List<Pedido> oPedidosNFE = oPedidos.Where(x => x.mvEntidade == "NFE").ToList();

            //int? iVendedor = RetornaVendedorFortPlus("B2W");
            //int? iVendedorLA = RetornaVendedorFortPlus("LOJAS AMERICANAS");
            //int? iTransportadoraJADLOG = RetornaTransportadoraFantasiaFortPlus("JadLog Standard");
            ////int? iML = RetornaVendedorFortPlus("MERCADO LIVRE");


            ////

            ////

            //foreach (Pedido oPedido in oPedidos)
            //{


            //    if (oPedido.mvChaveAcesso == "32200334036601000338550010000020791000282900")
            //    {

            //    }

            //    if (oPedido.mvChaveAcesso == "")
            //    {
            //        oPedido.mvIdTransportadora = 43;
            //    }

            //    if (oPedido.mvIdVendedor != iVendedor && oPedido.mvIdVendedor != iVendedorLA && oPedido.mvIdVendedor != iVendedorLA)
            //        continue;




            //    if (oPedido.mvChaveAcesso != null)
            //        if (oPedido.mvChaveAcesso.Trim() == "32200334036601000338550010000021151000283572")
            //        {

            //        }

            //    if (oPedido.mvEntidade == "NFE" && oPedido.mvIdExterno != null && oPedido.dmaInclusao > DateTime.Now.AddDays(-10))
            //    {
            //        if (oPedido.mvDocto == 2337)
            //        {

            //        }


            //        DataTable dtbEtiqueta = ClasseParametros.ConsultaBanco("SELECT * FROM VENDAS WHERE NOTAFISCAL='" + oPedido.mvChaveAcesso + "'");
            //        if (dtbEtiqueta.Rows.Count == 0)
            //        {

            //            DataTable d = ClasseParametros.ConsultaBanco("SELECT * FROM CLIENTE WHERE CODIGO = "+ iCodigoCliente.ToString());
            //            if (d.Rows.Count > 0)
            //            {
            //                string sKey = d.Rows[0]["KEYB2W"].ToString();
            //                string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
            //                d.Dispose();



            //            }
            //            Thread.Sleep(6000);
            //        }
            //        dtbEtiqueta.Dispose();
            //    }
            //}

        }

        // solicita coleta
        public static void SolicitaDirect(int iCodigoCliente)
        {
            try
            {
                DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                string sKey = d.Rows[0]["KEYB2W"].ToString();
                string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                d.Dispose();
                List<B2WPedidoDirect> lstPedido = new List<B2WPedidoDirect>();
                RestClient client = null;
                IRestResponse response = null;
                RestRequest request = null;
                for (int i = 1; i < 51; i++)
                {
                    response = null;
                    while (response == null)
                    {
                        client = new RestClient("https://api.skyhub.com.br/shipments/b2w/collectables?requested=false&offset=" + i.ToString());
                        request = new RestRequest(Method.GET);
                        request.AddHeader("cache-control", "no-cache");
                        request.AddHeader("Accept", "application/json");
                        request.AddHeader("Content-Type", "application/json");
                        request.AddHeader("x-Api-Key", sKey);
                        request.AddHeader("X-User-Email", sUsuario);
                        response = client.Execute(request);
                        Thread.Sleep(1000);
                        if (response.StatusCode == HttpStatusCode.GatewayTimeout || response.StatusCode == HttpStatusCode.InternalServerError || response.StatusCode == HttpStatusCode.BadGateway ||
                            response.StatusCode == HttpStatusCode.ServiceUnavailable)
                        {
                            response = null;
                            Thread.Sleep(1000);

                        }
                        else if (response.StatusCode == 0)
                        {
                            response = null;
                            Thread.Sleep(1000);

                        }
                    }

                    B2WPedidosDirect lstPedidoTemp = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPedidosDirect>(response.Content);

                    if (lstPedidoTemp.orders == null)
                    {


                        return;
                    }

                    if (lstPedidoTemp.orders.Length == 0)
                        break;

                    for (int j = 0; j < lstPedidoTemp.orders.Length; j++)
                    {
                        Console.WriteLine("Solcitando direct do pedido " + lstPedidoTemp.orders[j].code.ToString());
                        lstPedido.Add(lstPedidoTemp.orders[j]);

                    }

                }

                string sPedidos = "";
                foreach (B2WPedidoDirect oTemp in lstPedido)
                {
                    if (sPedidos != "")
                        sPedidos += ",";
                    sPedidos += "\"" + oTemp.code.Trim() + "\"";
                }

                if (sPedidos != "")
                {
                    //{"order_codes":["158260592"]}
                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/confirm_collection");
                    request = new RestRequest(Method.POST);
                    request.AddHeader("Content-Length", "52");
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "application/json");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddHeader("x-Api-Key", sKey);
                    request.AddHeader("X-User-Email", sUsuario);
                    string sPost = "{\n  \"order_codes\": [\n" + sPedidos + "\n]\n}";
                    request.AddParameter("application/json", sPost, ParameterType.RequestBody);
                    response = client.Execute(request);
                    Thread.Sleep(3000);
                }

            }
            catch (Exception ex)
            {

            }
        }

        public static void GeraEtiquetaCorreios(int iCodigoCliente)
        {
            try
            {

                RestClient client = null;
                RestRequest request = null;
                IRestResponse oResposta = null;

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                    request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ClasseFuncoes.ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        break;
                    }
                }


                List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);

                int? iCodigoTransportadora1 = RetornaTransportadorFortPlus("SUP ESTADUAL DE OPERACOES MG");
                int? iCodigoTransportadora2 = RetornaTransportadorFortPlus("PAC");

                lstPedido = lstPedido.Where(x => x.mvDmaEmissao != null && DateTime.Parse(x.mvDmaEmissao.ToString()) > DateTime.Now.AddDays(-5) && (x.mvIdTransportadora == iCodigoTransportadora1 || x.mvIdTransportadora == iCodigoTransportadora2) && x.mvEntidade == "NFE").ToList();

                foreach (Pedido oPedido in lstPedido)
                {
                    Console.WriteLine(" Pedido: " + oPedido.mvIdExterno);
                    ClienteFortPlus oCliente = RetornaClienteFortPlus(oPedido.mvIdPessoa.ToString());
                    string sCidade = RetornaNomeMunicipio(oCliente.psIdMunicipio);
                    string sUF = RetornaSiglaEstadoGlobalMK(oCliente.psIdUf);
                    string sVendedor = RetornaFantasiaVendedorFortPlus(oPedido.mvIdVendedor);

                    string sEtiquetaCorreios = string.Format(ClasseParametros.sEtiquetaCorreios,
                        oCliente.psNome,
                        oCliente.psLogradouro + "," + oCliente.psNumero,
                        oCliente.psCep,
                        sCidade + "-" + sUF,
                        "Remetente: 2ELETRO COM. E DIST. DE PRODUTOS DE INFORMATICA LTDA",
                        "Rua Samuel Meira Brasil 394",
                        "SALA 25",
                        "Taquara II, Serra, ES");

                    byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiquetaCorreios);

                    ClasseParametros.SalvaEtiquetaAnyMarket(oPedido.mvChaveAcesso, aEtiqueta, "CORREIOS", iCodigoCliente, sVendedor, oPedido.mvIdExterno);


                }


            }
            catch
            { }

            //iCodigoTransportadora = RetornaTransportadorFortPlus("PAC");

            //lstPedido = lstPedido.Where(x => x.mvDmaEmissao != null && DateTime.Parse(x.mvDmaEmissao.ToString()) > DateTime.Now.AddDays(-5) && x.mvIdTransportadora == iCodigoTransportadora && x.mvEntidade == "NFE").ToList();

            //foreach (Pedido oPedido in lstPedido)
            //{
            //    Console.WriteLine(" Pedido: " + oPedido.mvIdExterno);
            //    ClienteFortPlus oCliente = RetornaClienteFortPlus(oPedido.mvIdPessoa.ToString());
            //    string sCidade = RetornaNomeMunicipio(oCliente.psIdMunicipio);
            //    string sUF = RetornaSiglaEstadoGlobalMK(oCliente.psIdUf);
            //    string sVendedor = RetornaFantasiaVendedorFortPlus(oPedido.mvIdVendedor);

            //    string sEtiquetaCorreios = string.Format(ClasseParametros.sEtiquetaCorreios,
            //        oCliente.psNome,
            //        oCliente.psLogradouro + "," + oCliente.psNumero,
            //        oCliente.psCep,
            //        sCidade + "-" + sUF,
            //        "Remetente: 2ELETRO COM. E DIST. DE PRODUTOS DE INFORMATICA LTDA",
            //        "Rua Samuel Meira Brasil 394",
            //        "SALA 25",
            //        "Taquara II, Serra, ES");

            //    byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiquetaCorreios);

            //    ClasseParametros.SalvaEtiquetaAnyMarket(oPedido.mvChaveAcesso, aEtiqueta, "CORREIOS", iCodigoCliente, sVendedor, oPedido.mvIdExterno);


            //}

            //long iPLPCorreios = 324871323;



            //using (var correios = new ServicoCorreiosProducao.AtendeClienteClient())
            //{




            //    var o = correios.solicitaXmlPlp(iPLPCorreios, "29079030000117", "3y06dd");





            //    var oCliente = correios.buscaCliente("9912480328", "0075304740", "a22955980a", "8d0p1j"); // 22955980000461 - espirito santo

            //    string s = correios.solicitaXmlPlp(0000000000000000000, "a22955980a", "8d0p1j");

            //    oCliente = correios.buscaCliente("9912483304", "0075363364", "229559800001", "triwht");   // 22955980000119 - rio de janeiro
            //                                                                                              //  o = correios.getStatusCartaoPostagem("0075304740", "a22955980a", "8d0p1j");

            //    s = correios.solicitaEtiquetas("C", "22955980000461", 109819, 1, "a22955980a", "8d0p1j");

            //    //var etiqueta = new CorreiosLabel("ME", "0001", "005", "123456");

            //    //var sender = new Sender("Luar Faria", "QMS 17 casa 2 Cond. Mini chacaras", "sobradinho", "Setor de mansões", "73062708", "Brasilia", "DF");

            //    //var receiver = new Receiver("Luar Faria", "QMS 17 casa 2 Cond. Mini chacaras", "sobradinho", "Setor de mansões", "73062708", "Brasilia", "DF");

            //    //etiqueta.Generate("JH980121092BR", sender, receiver, CorreiosLabel.LabelType.PAC, Directory.GetCurrentDirectory() + "\\sedex-logo.png");

            //    // var caminho = etiqueta.ExportPDF();


            //}







        }


        public static string ExecuteGetProduct(string sSKU)
        {
            string sRetorno = "";
            var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/produtos/" + sSKU + "/json&apikey=" + ClasseParametros.sTokenBling);
            request.ContentType = "application/json";
            request.Method = "GET";
            using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
            {
                if (response.StatusCode != HttpStatusCode.OK)
                    Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);
                using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    var content = reader.ReadToEnd();
                    if (string.IsNullOrWhiteSpace(content))
                        Console.Out.WriteLine("Empty Response");
                    else
                        sRetorno = content;
                }
            }
            return sRetorno;
        }


        public static void GeraEtiquetaJADLOGBling(int iCodigoCliente, DanfeViewModel oModel)
        {
            if (oModel == null)
            {
                return;
            }

            string sShipment = "";
            string sShipmentID = "";
            string sCodigo = "";
            string sChaveAcesso = "";
            IRestResponse oResposta = null;

            DataTable dtbJADLOG = ClasseParametros.ConsultaBancoMysql("SELECT * FROM ETIQUETAJADLOG WHERE CHAVEACESSO = '" + oModel.ChaveAcesso + "'");

            //sChaveAcesso = oDanfe.ViewModel.ChaveAcesso;
            if (dtbJADLOG.Rows.Count == 0)
            {
                try
                {
                    // Salva Etiqueta JadLog
                    string sResult = ClasseParametros.sEtiquetaJadLog.Replace("{Nota}", oModel.NfNumero.ToString())
                                        .Replace("{qrcode}", oModel.Destinatario.RazaoSocial + "\r\n" + oModel.Destinatario.EnderecoLogadrouro + "-" + oModel.Destinatario.EnderecoNumero + "\r\n" +
                                        oModel.Destinatario.EnderecoBairro + "\r\n" + oModel.Destinatario.EnderecoComplemento +
                                        "\r\n" + oModel.Destinatario.EnderecoCep + "-" + oModel.Destinatario.Municipio + "/" + oModel.Destinatario.EnderecoUf + "\r\n" +
                                        oModel.Destinatario.EnderecoCep.PadLeft(8, '0'))
                                        .Replace("{Contrato}", "JADLOG")
                                       //.Replace("{Volume}", oAnymarket.docsExternos[0].awbs[i].posicaoVolume.ToString() + "/" + oAnymarket.docsExternos[0].qtVolumes.ToString())
                                       //.Replace("{Imagem}", sImagem)
                                       //.Replace("{Direct}", sImagemDirect)
                                       .Replace("{Pedido}", "---------")
                                       //.Replace("{PLP}", oAnymarket.plp.id.ToString())
                                       //.Replace("{DtPr}", "")
                                       .Replace("{Tracking}", "---------")
                                       .Replace("{NomeDestinatario}", oModel.Destinatario.RazaoSocial)
                                       .Replace("{EndererecoNumeroDestinatario}", oModel.Destinatario.EnderecoLogadrouro + "-" + oModel.Destinatario.EnderecoNumero)
                                       .Replace("{BairroDestinatario}", oModel.Destinatario.EnderecoBairro)
                                       .Replace("{ComplementoDestinatario}", oModel.Destinatario.EnderecoComplemento)
                                       .Replace("{CidadeEstadoDestinatario}", oModel.Destinatario.EnderecoCep + "-" + oModel.Destinatario.Municipio + "/" + oModel.Destinatario.EnderecoUf)
                                       .Replace("{Cep}", oModel.Destinatario.EnderecoCep.PadLeft(8, '0'))
                                       .Replace("{NomeRemetente}", oModel.Emitente.NomeFantasia)
                                       .Replace("{EnderecoNumeroRemetente}", oModel.Emitente.EnderecoLogadrouro + " Nº: " + oModel.Emitente.EnderecoNumero)
                                       //.Replace("{B2WEND}", oAnymarket.docsExternos[0].megaRota)
                                       //.Replace("{Rota}", oAnymarket.docsExternos[0].rota)
                                       .Replace("{ComplementoRemetente}", oModel.Emitente.EnderecoBairro)
                                       //.Replace("{ComplementoRemetente}", r["REMETENTE"].ToString())
                                       .Replace("{CEPCidadeEstadoRemetente}", oModel.Emitente.EnderecoCep.PadLeft(8, '0') + "-" + oModel.Emitente.Municipio + "-" + oModel.Emitente.EnderecoUf);

                    byte[] aEtiqueta = Encoding.UTF8.GetBytes(sResult);
                    //string sNomeVendedor = RetornaFantasiaVendedorFortPlus(oPedido.mvIdVendedor);

                    ClasseParametros.SalvaEtiquetaAnyMarket(oModel.ChaveAcesso, aEtiqueta, "JADLOG", iCodigoCliente, "AMAZON", oModel.Pedido);
                    ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oModel.ChaveAcesso + "'");


                }
                catch (Exception ex)
                {

                }

            }
            else
            {
                sCodigo = dtbJADLOG.Rows[0]["CODIGOJADLOG"].ToString().Trim();
            }
        }


        public static void GeraEtiquetaJADLOG(Pedido oPedido, int iCodigoCliente, List<FortPlusXML> lstXML)
        {
            if (oPedido.mvChaveAcesso == null)
            {
                return;
            }

            string sShipment = "";
            string sShipmentID = "";
            string sCodigo = "";
            string sChaveAcesso = "";
            IRestResponse oResposta = null;

            DataTable dtbJADLOG = ClasseParametros.ConsultaBancoMysql("SELECT * FROM ETIQUETAJADLOG WHERE CHAVEACESSO = '" + oPedido.mvChaveAcesso + "'");

            sChaveAcesso = oPedido.mvChaveAcesso;
            if (dtbJADLOG.Rows.Count == 0)
            {
                try
                {
                    List<FortPlusXML> lstXMLTemp = lstXML.Where(x => x.trDocto != null && x.trDocto == oPedido.mvDocto).ToList();

                    DanfeViewModel oModel = DanfeViewModel.CreateFromXmlString(lstXMLTemp[0].trArquivoRetorno);
                    oResposta = null;
                    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                    {
                        RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/PedidoItem/Pedido/" + oPedido.id.ToString());
                        RestRequest request = new RestRequest(Method.GET);
                        request.AddHeader("Accept-Encoding", "gzip, deflate");
                        request.AddHeader("Cache-Control", "no-cache");
                        request.AddHeader("Accept", "*/*");
                        if (ClasseParametros.oJsonFortePluslogin == null)
                            ConectaForteplus(5);
                        request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                        oResposta = client.Execute(request);

                        if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                        {
                            ClasseFuncoes.ConectaForteplus(5);
                        }
                    }
                    List<PedidoItemFortPlus> oPedidoItem = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PedidoItemFortPlus>>(oResposta.Content);

                    string sProduto = "";
                    string sPedido = "";
                    //Preenche Volume
                    Volume[] aVolume = new Volume[oPedidoItem.Count];

                    int iIndice = 0;
                    foreach (PedidoItemFortPlus oItem in oPedidoItem)
                    {
                        if (sProduto != "")
                            sProduto += ",";
                        if (sPedido != "")
                            sPedido += ",";
                        ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(RetornaProdutoFortPlus(oItem.mtIdProduto.ToString()).Content);
                        sProduto += oProduto.prNome;
                        sPedido += oPedido.id;


                        Volume oVolume = new Volume();
                        oVolume.altura = (int)oProduto.prAltura;
                        oVolume.comprimento = (int)oProduto.prComprimento;
                        oVolume.identificador = oProduto.prCodigo;
                        oVolume.largura = (int)oProduto.prLargura;
                        oVolume.peso = (int)oProduto.prPesoBruto;

                        aVolume[iIndice] = oVolume;
                        iIndice++;
                    }

                    JADLOGPedido oPedidoJL = new JADLOGPedido();
                    oPedidoJL.conteudo = sProduto;
                    if (oPedidoJL.conteudo.Length > 80)
                        oPedidoJL.conteudo = oPedidoJL.conteudo.Substring(0, 80);
                    oPedidoJL.pedido = new string[1];
                    oPedidoJL.pedido[0] = sPedido;
                    oPedidoJL.totPeso = (int)oPedido.mvPesoBruto;
                    oPedidoJL.totValor = (int)oPedido.mvValorTotal;
                    oPedidoJL.obs = oPedido.mvObservacao;
                    oPedidoJL.modalidade = 3;
                    oPedidoJL.contaCorrente = "015710";
                    oPedidoJL.tpColeta = "K";
                    oPedidoJL.tipoFrete = 0;
                    oPedidoJL.cdUnidadeOri = "1342"; //oPedidoExterno.mvObservacao;
                    oPedidoJL.cdUnidadeDes = null; //oPedidoExterno.mvObservacao;
                    oPedidoJL.cdPickupOri = null; //oPedidoExterno.mvObservacao;
                    oPedidoJL.cdPickupDes = null; // oPedidoExterno.mvObservacao;
                    oPedidoJL.nrContrato = 015710;
                    oPedidoJL.servico = 0;
                    oPedidoJL.shipmentId = null;
                    oPedidoJL.vlColeta = null;

                    //Preenche remetente
                    Rem oRemetente = new Rem();
                    oRemetente.uf = "ES"; //RetornaDescricaoGlobal("UF", oCliente.psIdUf.ToString());
                    oRemetente.numero = "394";
                    oRemetente.nome = "2ELETRO COM. E DIST. DE PRODUTOS DE INFORMATICA LTDA";
                    oRemetente.ie = "083589694";
                    oRemetente.fone = ""; // oCliente.psTelFixo;
                    oRemetente.endereco = "Rua Samuel Meira Brasil";
                    oRemetente.email = ""; //oCliente.psEmail;
                    oRemetente.compl = "";
                    oRemetente.cnpjCpf = "34036601000338";
                    oRemetente.cidade = "Serra"; //RetornaDescricaoMunicipio(oCliente.psIdMunicipio.ToString());
                    oRemetente.cep = "29167650";
                    oRemetente.bairro = "Taquara II";
                    oRemetente.cel = "(27) 9773-9814";

                    //Preenche Destinatario
                    ClienteFortPlus oCliente = RetornaClienteFortPlus(oPedido.mvIdPessoa.ToString());
                    Des oDestinatario = new Des();
                    oDestinatario.uf = RetornaDescricaoGlobal("UF", oCliente.psIdUf.ToString());
                    oDestinatario.numero = oCliente.psNumero;
                    if (oDestinatario.numero.Length > 10)
                        oDestinatario.numero = oDestinatario.numero.Substring(10);

                    oDestinatario.nome = oCliente.psNome;
                    oDestinatario.ie = oCliente.psInscricaoEstadual;
                    oDestinatario.fone = oCliente.psTelFixo;
                    oDestinatario.endereco = oCliente.psLogradouro;
                    oDestinatario.email = oCliente.psEmail;
                    if (oCliente.psComplemento != null)
                    {
                        oDestinatario.compl = oCliente.psComplemento;
                        if (oDestinatario.compl.ToString().Length > 40)
                            oDestinatario.compl = oCliente.psComplemento.Substring(0, 40);
                    }
                    oDestinatario.cnpjCpf = oCliente.psCpfCnpj;
                    oDestinatario.cidade = RetornaDescricaoMunicipio(oCliente.psIdMunicipio.ToString());
                    oDestinatario.cep = oCliente.psCep;
                    oDestinatario.bairro = oCliente.psBairro;
                    oDestinatario.cel = oCliente.psTelCelular;

                    //Preenche DFE
                    Dfe[] aNFE = new Dfe[1];

                    Dfe oNFE = new Dfe();
                    oNFE.danfeCte = oPedido.mvChaveAcesso;
                    oNFE.nrDoc = oPedido.mvDocto.ToString();
                    oNFE.valor = float.Parse(oPedido.mvValorTotal.ToString());
                    oNFE.serie = RetornaDescricaoGlobal("SR", oPedido.mvIdSerie.ToString());
                    oNFE.tpDocumento = 2;
                    aNFE[0] = oNFE;


                    oPedidoJL.rem = oRemetente;
                    oPedidoJL.des = oDestinatario;
                    oPedidoJL.volume = aVolume;
                    oPedidoJL.dfe = aNFE;

                    string sPedidoJADLOG = Newtonsoft.Json.JsonConvert.SerializeObject(oPedidoJL);
                    oResposta = null;
                    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                    {
                        RestClient client = new RestClient("http://www.jadlog.com.br/embarcador/api/pedido/incluir");
                        RestRequest request = new RestRequest(Method.POST);
                        request.AddHeader("Cache-Control", "no-cache");
                        request.AddHeader("Accept", "*/*");
                        request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                        request.AddHeader("Content-Type", "application/json");
                        request.AddParameter("application/json", sPedidoJADLOG, ParameterType.RequestBody);
                        request.AddHeader("Authorization", "Bearer " + ClasseParametros.sTokenJADLOG);

                        oResposta = client.Execute(request);

                        //if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                        //{
                        //    ClasseFuncoes.ConectaForteplus(5);
                        //}
                    }
                    JADLOG.JADLOGRetornoPedido oRetornoPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<JADLOG.JADLOGRetornoPedido>(oResposta.Content);


                    if (oRetornoPedido.status != "Erro ao inserir solicitacao.")
                    {
                        Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                        string sSql = "INSERT INTO ETIQUETAJADLOG(CHAVEACESSO,CODIGOJADLOG,SHIPMENTIDJADLOG,DATAHORA,PEDIDOEXTERNO,TRACKING) VALUES (@CHAVEACESSO,@CODIGOJADLOG,@SHIPMENTIDJADLOG,@DATAHORA,@PEDIDOEXTERNO,@TRACKING)";
                        ParametrosSQL.Add("CHAVEACESSO", oPedido.mvChaveAcesso.Trim());
                        ParametrosSQL.Add("CODIGOJADLOG", oRetornoPedido.codigo.Trim());
                        ParametrosSQL.Add("TRACKING", oRetornoPedido.codigo.Trim());
                        ParametrosSQL.Add("SHIPMENTIDJADLOG", oRetornoPedido.shipmentId.Trim());
                        ParametrosSQL.Add("DATAHORA", DateTime.Now);
                        ParametrosSQL.Add("PEDIDOEXTERNO", oPedido.mvIdExterno);
                        ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                        sCodigo = oRetornoPedido.codigo.Trim();



                        // Salva Etiqueta JadLog
                        string sResult = ClasseParametros.sEtiquetaJadLog.Replace("{Nota}", oPedido.mvDocto.ToString())
                                            .Replace("{qrcode}", oModel.Destinatario.RazaoSocial + "\r\n" + oModel.Destinatario.EnderecoLogadrouro + "-" + oModel.Destinatario.EnderecoNumero + "\r\n" +
                                            oModel.Destinatario.EnderecoBairro + "\r\n" + oModel.Destinatario.EnderecoComplemento +
                                            "\r\n" + oModel.Destinatario.EnderecoCep + "-" + oModel.Destinatario.Municipio + "/" + oModel.Destinatario.EnderecoUf + "\r\n" +
                                            oModel.Destinatario.EnderecoCep.PadLeft(8, '0'))
                                            .Replace("{Contrato}", "JADLOG")
                                           //.Replace("{Volume}", oAnymarket.docsExternos[0].awbs[i].posicaoVolume.ToString() + "/" + oAnymarket.docsExternos[0].qtVolumes.ToString())
                                           //.Replace("{Imagem}", sImagem)
                                           //.Replace("{Direct}", sImagemDirect)
                                           .Replace("{Pedido}", oPedido.id.ToString())
                                           //.Replace("{PLP}", oAnymarket.plp.id.ToString())
                                           //.Replace("{DtPr}", "")
                                           .Replace("{Tracking}", oRetornoPedido.codigo.Trim())
                                           .Replace("{NomeDestinatario}", oModel.Destinatario.RazaoSocial)
                                           .Replace("{EndererecoNumeroDestinatario}", oModel.Destinatario.EnderecoLogadrouro + "-" + oModel.Destinatario.EnderecoNumero)
                                           .Replace("{BairroDestinatario}", oModel.Destinatario.EnderecoBairro)
                                           .Replace("{ComplementoDestinatario}", oModel.Destinatario.EnderecoComplemento)
                                           .Replace("{CidadeEstadoDestinatario}", oModel.Destinatario.EnderecoCep + "-" + oModel.Destinatario.Municipio + "/" + oModel.Destinatario.EnderecoUf)
                                           .Replace("{Cep}", oModel.Destinatario.EnderecoCep.PadLeft(8, '0'))
                                           .Replace("{NomeRemetente}", oModel.Emitente.NomeFantasia)
                                           .Replace("{EnderecoNumeroRemetente}", oModel.Emitente.EnderecoLogadrouro + " Nº: " + oModel.Emitente.EnderecoNumero)
                                           //.Replace("{B2WEND}", oAnymarket.docsExternos[0].megaRota)
                                           //.Replace("{Rota}", oAnymarket.docsExternos[0].rota)
                                           .Replace("{ComplementoRemetente}", oModel.Emitente.EnderecoBairro)
                                           //.Replace("{ComplementoRemetente}", r["REMETENTE"].ToString())
                                           .Replace("{CEPCidadeEstadoRemetente}", oModel.Emitente.EnderecoCep.PadLeft(8, '0') + "-" + oModel.Emitente.Municipio + "-" + oModel.Emitente.EnderecoUf);

                        byte[] aEtiqueta = Encoding.UTF8.GetBytes(sResult);
                        string sNomeVendedor = RetornaFantasiaVendedorFortPlus(oPedido.mvIdVendedor);

                        ClasseParametros.SalvaEtiquetaAnyMarket(oPedido.mvChaveAcesso, aEtiqueta, "JADLOG", iCodigoCliente, sNomeVendedor, oPedido.mvIdExterno);
                    }
                    else if (oResposta.Content.Contains(" já foi enviado"))
                    {
                        JADLOG.JADLOGRetornoErro oRetornoErroPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<JADLOG.JADLOGRetornoErro>(oResposta.Content);

                        JADLOGConsultaTrackingcs oJadlogConsulta = new JADLOGConsultaTrackingcs();

                        sShipmentID = oRetornoErroPedido.erro.descricao.Split(':')[3].Trim();

                        oJadlogConsulta.consulta = new Consulta[1];

                        Consulta oConsulta = new Consulta();
                        oConsulta.shipmentId = sShipmentID;

                        oJadlogConsulta.consulta[0] = oConsulta;

                        sPedidoJADLOG = Newtonsoft.Json.JsonConvert.SerializeObject(oJadlogConsulta);
                        oResposta = null;
                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                        {
                            RestClient client = new RestClient("http://www.jadlog.com.br/embarcador/api/tracking/consultar");
                            RestRequest request = new RestRequest(Method.POST);
                            request.AddHeader("Cache-Control", "no-cache");
                            request.AddHeader("Accept", "*/*");
                            request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                            request.AddHeader("Content-Type", "application/json");
                            request.AddParameter("application/json", sPedidoJADLOG, ParameterType.RequestBody);
                            request.AddHeader("Authorization", "Bearer " + ClasseParametros.sTokenJADLOG);

                            oResposta = client.Execute(request);

                            //if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                            //{
                            //    ClasseFuncoes.ConectaForteplus(5);
                            //}
                        }

                        JADLOG.JADLOGRetornoConsultaTracking oRetornoConsultaPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<JADLOG.JADLOGRetornoConsultaTracking>(oResposta.Content);


                        Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                        DataTable dtbJadlog = ClasseParametros.ConsultaBancoMysql("SELECT * FROM ETIQUETAJADLOG WHERE SHIPMENTIDJADLOG = '" + sShipmentID + "'");
                        if (dtbJadlog.Rows.Count == 0)
                        {
                            string sSql = "INSERT INTO ETIQUETAJADLOG(CHAVEACESSO,CODIGOJADLOG,SHIPMENTIDJADLOG,DATAHORA,PEDIDOEXTERNO,TRACKING) VALUES (@CHAVEACESSO,@CODIGOJADLOG,@SHIPMENTIDJADLOG,@DATAHORA,@PEDIDOEXTERNO,@TRACKING)";
                            ParametrosSQL.Add("CHAVEACESSO", oPedido.mvChaveAcesso.Trim());
                            ParametrosSQL.Add("CODIGOJADLOG", oRetornoConsultaPedido.consulta[0].tracking.codigo.Trim());
                            ParametrosSQL.Add("TRACKING", oRetornoConsultaPedido.consulta[0].tracking.codigo.Trim());
                            ParametrosSQL.Add("SHIPMENTIDJADLOG", oRetornoConsultaPedido.consulta[0].tracking.shipmentId.Trim());
                            ParametrosSQL.Add("DATAHORA", DateTime.Now);
                            ParametrosSQL.Add("PEDIDOEXTERNO", oPedido.mvIdExterno);
                            ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                            sCodigo = oRetornoConsultaPedido.consulta[0].tracking.codigo.Trim();



                            // Salva Etiqueta JadLog
                            string sResult = ClasseParametros.sEtiquetaJadLog.Replace("{Nota}", oPedido.mvDocto.ToString())
                                                .Replace("{qrcode}", oModel.Destinatario.RazaoSocial + "\r\n" + oModel.Destinatario.EnderecoLogadrouro + "-" + oModel.Destinatario.EnderecoNumero + "\r\n" +
                                                oModel.Destinatario.EnderecoBairro + "\r\n" + oModel.Destinatario.EnderecoComplemento +
                                                "\r\n" + oModel.Destinatario.EnderecoCep + "-" + oModel.Destinatario.Municipio + "/" + oModel.Destinatario.EnderecoUf + "\r\n" +
                                                oModel.Destinatario.EnderecoCep.PadLeft(8, '0'))
                                                .Replace("{Contrato}", "JADLOG")
                                               //.Replace("{Volume}", oAnymarket.docsExternos[0].awbs[i].posicaoVolume.ToString() + "/" + oAnymarket.docsExternos[0].qtVolumes.ToString())
                                               //.Replace("{Imagem}", sImagem)
                                               //.Replace("{Direct}", sImagemDirect)
                                               .Replace("{Pedido}", oPedido.id.ToString())
                                               //.Replace("{PLP}", oAnymarket.plp.id.ToString())
                                               //.Replace("{DtPr}", "")
                                               .Replace("{Tracking}", sCodigo)
                                               .Replace("{NomeDestinatario}", oModel.Destinatario.RazaoSocial)
                                               .Replace("{EndererecoNumeroDestinatario}", oModel.Destinatario.EnderecoLogadrouro + "-" + oModel.Destinatario.EnderecoNumero)
                                               .Replace("{BairroDestinatario}", oModel.Destinatario.EnderecoBairro)
                                               .Replace("{ComplementoDestinatario}", oModel.Destinatario.EnderecoComplemento)
                                               .Replace("{CidadeEstadoDestinatario}", oModel.Destinatario.EnderecoCep + "-" + oModel.Destinatario.Municipio + "/" + oModel.Destinatario.EnderecoUf)
                                               .Replace("{Cep}", oModel.Destinatario.EnderecoCep.PadLeft(8, '0'))
                                               .Replace("{NomeRemetente}", oModel.Emitente.NomeFantasia)
                                               .Replace("{EnderecoNumeroRemetente}", oModel.Emitente.EnderecoLogadrouro + " Nº: " + oModel.Emitente.EnderecoNumero)
                                               //.Replace("{B2WEND}", oAnymarket.docsExternos[0].megaRota)
                                               //.Replace("{Rota}", oAnymarket.docsExternos[0].rota)
                                               .Replace("{ComplementoRemetente}", oModel.Emitente.EnderecoBairro)
                                               //.Replace("{ComplementoRemetente}", r["REMETENTE"].ToString())
                                               .Replace("{CEPCidadeEstadoRemetente}", oModel.Emitente.EnderecoCep.PadLeft(8, '0') + "-" + oModel.Emitente.Municipio + "-" + oModel.Emitente.EnderecoUf);

                            byte[] aEtiqueta = Encoding.UTF8.GetBytes(sResult);
                            string sNomeVendedor = RetornaFantasiaVendedorFortPlus(oPedido.mvIdVendedor);

                            ClasseParametros.SalvaEtiquetaAnyMarket(oPedido.mvChaveAcesso, aEtiqueta, "JADLOG", iCodigoCliente, sNomeVendedor, oPedido.mvIdExterno);

                        }

                    }

                }
                catch (Exception ex)
                {

                }

            }
            else
            {
                sCodigo = dtbJADLOG.Rows[0]["CODIGOJADLOG"].ToString().Trim();
            }
        }

        private static int? RetornaTransportadoraFantasiaFortPlus(string sFantasia)
        {
            int? iCodigoTransportadora = 0;
            IRestResponse oResposta = null;
            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Transportadora");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }

            List<TranportadorFortPlus> oListTransportadores = Newtonsoft.Json.JsonConvert.DeserializeObject<List<TranportadorFortPlus>>(oResposta.Content);

            foreach (TranportadorFortPlus oTransportador in oListTransportadores)
            {
                if (oTransportador.psNomeFantasia != null)
                    if (oTransportador.psNomeFantasia.ToString() == sFantasia)
                    {
                        iCodigoTransportadora = oTransportador.id;
                        break;
                    }
            }

            return iCodigoTransportadora;
        }

        public static void EspelhaCategoriaMercadoLivreFortePlusAsync(ProgressBar oBarra)
        {

            var oResposta = ClasseParametros.oMeli.Get("/sites/MLB/categories");

            List<MercadoLivreCategoriaProduto> oJsonCategoriaML = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MercadoLivreCategoriaProduto>>(oResposta.Content);
            oBarra.Maximum = oJsonCategoriaML.Count;
            oBarra.Value = 0;
            foreach (MercadoLivreCategoriaProduto oCategoria in oJsonCategoriaML)
            {
                string sSql = "SELECT * FROM CATEGORIA WHERE ID = @ID";
                Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                ParametrosSQL.Add("ID", oCategoria.id);
                DataTable dtbCategoria = ClasseParametros.ConsultaBancoMysql(sSql, ParametrosSQL);
                if (dtbCategoria.Rows.Count > 0)
                    sSql = "UPDATE CATEGORIA SET DESCRICAO = @DESCRICAO WHERE ID = @ID";
                else
                    sSql = "INSERT INTO CATEGORIA(ID,DESCRICAO) VALUES (@ID,@DESCRICAO)";

                ParametrosSQL.Add("ID", oCategoria.id);
                ParametrosSQL.Add("DESCRICAO", oCategoria.name);
                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                var oRespostaDertalhe = ClasseParametros.oMeli.Get("/categories/" + oCategoria.id);

                MercadoLivreCategoriaDetalhe oJsonCategoriaDetalheML = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreCategoriaDetalhe>(oRespostaDertalhe.Content);
                foreach (Children_Categories oCatDetalhe in oJsonCategoriaDetalheML.children_categories)
                {

                    sSql = "SELECT * FROM CATEGORIADETALHE WHERE ID = @ID AND IDMASTER = @IDMASTER";
                    ParametrosSQL.Add("ID", oCatDetalhe.id);
                    ParametrosSQL.Add("IDMASTER", oCategoria.id);
                    dtbCategoria = ClasseParametros.ConsultaBancoMysql(sSql, ParametrosSQL);
                    if (dtbCategoria.Rows.Count > 0)
                        sSql = "UPDATE CATEGORIADETALHE SET DESCRICAO = @DESCRICAO WHERE ID = @ID AND IDMASTER = @IDMASTER";
                    else
                        sSql = "INSERT INTO CATEGORIADETALHE(ID,IDMASTER,DESCRICAO) VALUES (@ID,@IDMASTER,@DESCRICAO)";

                    ParametrosSQL.Add("ID", oCatDetalhe.id);
                    ParametrosSQL.Add("IDMASTER", oCategoria.id);
                    ParametrosSQL.Add("DESCRICAO", oCatDetalhe.name);
                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                    dtbCategoria.Dispose();


                }

                oBarra.Value++;
                Application.DoEvents();
            }




            MessageBox.Show("Categorias Cadastradas!");
        }


        public static List<ProdutoFortePlus> RetornaListProdutosFortPlus()
        {
            IRestResponse response = null;
            List<ProdutoFortePlus> oLista = new List<ProdutoFortePlus>();
            response = null;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Produto");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }


            oLista = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoFortePlus>>(response.Content);

            return oLista;

        }

        public static IRestResponse RetornaProdutosFortPlus()
        {

            IRestResponse response = null;
            response = null;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Produto");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            return response;

        }

        public static List<FortePlusTabelaPrecoItem> RetornaTabelaPrecoItemFortPlus()
        {
            IRestResponse response = null;
            response = null;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/TabelaPrecoItem");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            List<FortePlusTabelaPrecoItem> oTabelPreco = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortePlusTabelaPrecoItem>>(response.Content);
            return oTabelPreco;
        }


        public static void EnviaProdutoB2W(int iCodigoCliente)
        {
            //ClasseFuncoes.SalvaLogServicos("Envia produtos para MAGALU");
            try
            {
                DataTable dtbProduto = ClasseParametros.ConsultaBancoMysql("SELECT * FROM PRODUTO WHERE ATUALIZADO = 0");
                List<ProdutoFortePlus> lstProdutos = ClasseFuncoes.RetornaListProdutosFortPlus();
                bool lPar = true;
                int? iCodigoMarketplace = ClasseFuncoes.RetornaCodigoGlobal("MK", "B2W");
                int? iCodigoLocalEstoque33 = ClasseFuncoes.RetornaCodigoGlobal("LE", "33");

                foreach (DataRow r in dtbProduto.Rows)
                {
                    try
                    {
                        if (!r["MARKETPLACE"].ToString().Contains("B2W"))
                        {
                            continue;
                        }
                        Console.WriteLine("Enviando produto " + r["CODIGO"].ToString());

                        List<ProdutoFortePlus> lstProdutosTemp = lstProdutos.Where(x => x.prCodigo == r["CODIGO"].ToString()).ToList();
                        ProdutoFortePlus oProduto = lstProdutosTemp[0];

                        IRestResponse oResposta = ClasseFuncoes.RetornaProdutoComplementoFortPlus(oProduto.id);

                        List<ProdutoComplemento> oJsonProdutoComplementoFortePlus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(oResposta.Content);

                        if (oProduto.prIdParent != null)
                        {
                            oResposta = ClasseFuncoes.RetornaProdutoComplementoFortPlus(oProduto.prIdParent);
                            oJsonProdutoComplementoFortePlus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(oResposta.Content);
                        }

                        oJsonProdutoComplementoFortePlus = oJsonProdutoComplementoFortePlus.Where(x => x.cmIdMarketPlace == iCodigoMarketplace).ToList();
                        B2WProdutoPost oProdutoPost = new B2WProdutoPost();

                        oProdutoPost.product = new ProductPost();
                        oProdutoPost.product.brand = RetornaNomeGlobalMK("MR", oProduto.prIdMarca);
                        string sGrupo = ClasseFuncoes.RetornaNomeGlobalMK("GP", oProduto.prIdGrupo);

                        CategoryPost[] aCategoria = new CategoryPost[1];
                        CategoryPost oCategoria = new CategoryPost();

                        oCategoria.name = sGrupo;
                        oCategoria.code = "1";
                        aCategoria[0] = oCategoria;
                        oProdutoPost.product.categories = aCategoria;
                        oProdutoPost.product.cost = (float?)oJsonProdutoComplementoFortePlus[0].cmPrecoDePor;

                        aCategoria[0] = oCategoria;

                        oProdutoPost.product.description = oProduto.prNome;
                        oProdutoPost.product.ean = oProduto.prEan.ToString();



                        oProdutoPost.product.height = oProduto.prAltura;

                        string[] aImagens = new string[] { "http://interplacelog.com.br/imagens/semimagem.jpg" };
                        oProdutoPost.product.images = aImagens;
                        oProdutoPost.product.length = oProduto.prComprimento;
                        oProdutoPost.product.name = oProduto.prNome;
                        oProdutoPost.product.nbm = "0";
                        oProdutoPost.product.price = (float?)oJsonProdutoComplementoFortePlus[0].cmPrecoDePor;
                        oProdutoPost.product.promotional_price = (float?)oJsonProdutoComplementoFortePlus[0].cmPrecoDePor;
                        double eEstoque = 0;

                        if (r["CODIGO"].ToString().Contains("KIT"))
                        {
                            oResposta = null;
                            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                            {
                                RestClient oCliente = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + oProduto.id.ToString());
                                RestRequest oRequestComp = new RestRequest(Method.GET);
                                oRequestComp.AddHeader("Cache-Control", "no-cache");
                                oRequestComp.AddHeader("Accept", "*/*");
                                oRequestComp.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                oRequestComp.AddHeader("Content-Type", "application/json");
                                oRequestComp.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                oResposta = oCliente.Execute(oRequestComp);

                                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                {
                                    ClasseFuncoes.ConectaForteplus(5);
                                }
                            }

                            List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
                            double eEstoqueMenor = -1;

                            foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
                            {
                                double eEstoqueMenorTemp = RetornaSeTemEstoque(oFormaPagamento.pcIdProdutoComposicao.ToString(), (int)iCodigoLocalEstoque33);
                                if (eEstoqueMenor == -1 || eEstoqueMenorTemp < eEstoqueMenor)
                                {
                                    eEstoqueMenor = eEstoqueMenorTemp;
                                }



                            }

                            eEstoque = eEstoqueMenor;


                        }
                        else
                        {

                            eEstoque = RetornaSeTemEstoque(oJsonProdutoComplementoFortePlus[0].cmIdProduto.ToString(), (int)iCodigoLocalEstoque33);

                        }

                        eEstoque = eEstoque * 30 / 100;
                        eEstoque = Math.Floor(eEstoque);

                        if (eEstoque < 1)
                        {
                            string sSql = "UPDATE PRODUTO SET ATUALIZADO = 1 WHERE CODIGOINTERNO = " + r["CODIGOINTERNO"].ToString().Trim() + " AND MARKETPLACE = 'B2W Companhia Digital'";
                            ClasseParametros.ExecutabancoMySql(sSql);

                            continue;
                        }

                        oProdutoPost.product.qty = (int)eEstoque;
                        oProdutoPost.product.sku = r["CODIGO"].ToString();

                        SpecificationPost[] aEspecificacao = new SpecificationPost[1];
                        SpecificationPost oEspecificacao = new SpecificationPost();
                        oEspecificacao.key = "GENERICO";
                        oEspecificacao.value = "GENERICO";
                        aEspecificacao[0] = oEspecificacao;

                        oProdutoPost.product.specifications = aEspecificacao;
                        oProdutoPost.product.status = "enabled";
                        oProdutoPost.product.weight = oProduto.prPesoBruto;
                        oProdutoPost.product.width = oProduto.prLargura;

                        string sJsonProduto = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoPost);

                        #region ENVIA SKU

                        DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                        string sKeyB2w = d.Rows[0]["KEYB2W"].ToString();
                        string sUsuarioB2W = d.Rows[0]["USUARIOB2W"].ToString();
                        string sAccountB2W = d.Rows[0]["ACCOUNTB2W"].ToString();
                        d.Dispose();

                        RestClient client = new RestClient("https://api.skyhub.com.br/products");
                        RestRequest oRequest = new RestRequest(Method.POST);
                        oRequest.AddHeader("cache-control", "no-cache");
                        oRequest.AddHeader("Accept", "application/json");
                        oRequest.AddHeader("Content-Type", "application/json");
                        oRequest.AddHeader("x-Api-Key", sKeyB2w);
                        oRequest.AddHeader("X-User-Email", sUsuarioB2W);
                        oRequest.AddHeader("X-Accountmanager-Key", sAccountB2W);
                        oRequest.AddParameter("application/json", sJsonProduto, ParameterType.RequestBody);

                        IRestResponse response = client.Execute(oRequest);

                        if (response.StatusCode == HttpStatusCode.Created)
                        {
                            string sSql = "UPDATE PRODUTO SET ATUALIZADO = 1 WHERE CODIGOINTERNO = " + r["CODIGOINTERNO"].ToString().Trim() + " AND MARKETPLACE = 'B2W Companhia Digital'";
                            ClasseParametros.ExecutabancoMySql(sSql);
                        }
                        #endregion

                        lPar = !lPar;
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch
            {

            }
        }


        public static IRestResponse RetornaProdutoFortPlus(string sCodigo)
        {

            IRestResponse response = null;
            response = null;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Produto/" + sCodigo.ToString().Trim());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }

                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    break;
                }
            }
            return response;

        }

        public static List<FortPlusProdutoComposicao> RetornaProdutoComposicao(string sIDProduto)
        {
            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + sIDProduto);
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }

            List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
            return oListFormaPagamento;
        }

        public static int? RetornaCodigoProdutoFortPlusPorSKU(string sSKU)
        {
            int? iCodigoProduto = 0;
            IRestResponse oResposta = null;
            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Produto");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }

            List<ProdutoFortePlus> oListProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoFortePlus>>(oResposta.Content);

            foreach (ProdutoFortePlus oProduto in oListProduto)
            {
                if (oProduto.prCodigo != null)
                    if (oProduto.prCodigo.ToString() == sSKU)
                    {
                        iCodigoProduto = oProduto.id;
                        break;
                    }
            }

            return iCodigoProduto;


        }

        public static int? RetornaCodigoFortPlusPorIdExterno(string sIdExterno)
        {
            int? iCodigoProduto = 0;
            IRestResponse oResposta = null;
            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Produto");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }

            List<ProdutoFortePlus> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoFortePlus>>(oResposta.Content);

            foreach (ProdutoFortePlus oFormaPagamento in oListFormaPagamento)
            {
                if (oFormaPagamento.prIdExterno != null)
                    if (oFormaPagamento.prIdExterno.ToString() == sIdExterno)
                    {
                        iCodigoProduto = oFormaPagamento.id;
                        break;
                    }
            }

            return iCodigoProduto;


        }

        public static int? RetornaCodigoComplementoFortPlusPorIdExterno(string sIdExterno)
        {
            int? iCodigoProduto = 0;
            IRestResponse oResposta = null;
            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");

                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }

            List<ProdutoComplemento> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(oResposta.Content);

            foreach (ProdutoComplemento oFormaPagamento in oListFormaPagamento)
            {
                if (oFormaPagamento.cmIdExterno != null)
                    if (oFormaPagamento.cmIdExterno.ToString() == sIdExterno)
                    {
                        iCodigoProduto = oFormaPagamento.id;
                        break;
                    }
            }

            return iCodigoProduto;


        }

        public static ProdutoComplemento RetornaProdutoComplementoFortPlusPorIdExterno(string sIdExterno)
        {
            ProdutoComplemento oRetonro = null;
            IRestResponse oResposta = null;
            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }


            List<ProdutoComplemento> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(oResposta.Content);
            List<ProdutoComplemento> oListFormaPagamentoFiltrado = new List<ProdutoComplemento>();
            try
            {
                oListFormaPagamentoFiltrado = oListFormaPagamento.Where(x => x.cmIdExterno != null && x.cmIdExterno.Trim().Contains(sIdExterno)).ToList();
            }
            catch (Exception ex)
            {

            }

            if (oListFormaPagamentoFiltrado.Count > 0)
                oRetonro = oListFormaPagamentoFiltrado[0];


            return oRetonro;

        }

        public static IRestResponse RetornaProdutoComplementosFortPlus()
        {

            IRestResponse response = null;
            response = null;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }



            return response;

        }

        public static IRestResponse RetornaProdutoComplementoFortPlus(string sCodigo)
        {

            IRestResponse response = null;
            response = null;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento/Produto/" + sCodigo.ToString().Trim());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }
            return response;

        }

        public static IRestResponse RetornaProdutoComplementoFortPlus(int? iProduto)
        {
            //Catetgopria aqui

            IRestResponse response = null;
            int iTentativa = 0;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento/Produto/" + iProduto.ToString());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");

                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);

                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }

                if (iTentativa > 5)
                {
                    break;
                }

                iTentativa++;
            }
            return response;
        }

        public static IRestResponse RetornaProdutoEstoqueFortPlus(string sCodigoProduto)
        {
            //Catetgopria aqui

            IRestResponse response = null;
            int iTentativa = 0;
            while (response == null || response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Estoque");
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Accept-Encoding", "gzip, deflate");
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");

                if (ClasseParametros.oJsonFortePluslogin == null)
                    ConectaForteplus(5);

                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                response = client.Execute(request);

                if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }

                if (iTentativa > 5)
                {
                    break;
                }

                iTentativa++;
            }
            return response;
        }

        public static void EnviaProdutosMercadoLivreAsync(string sProduto)
        {
            //int? iMarketplace = RetornaCodigoGlobal("MK", "MLP");



            //ProdutoComplemento oProdutoComplementoFortPlus = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(sProduto, iMarketplace);
            //ProdutoFortePlus oProdutoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplementoFortPlus.cmIdProduto.ToString()).Content);



            //IRestResponse oResposta = RetornaProdutoFortPlus(oProdutoFortPlus.id.ToString());
            //ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(oResposta.Content);
            //int iLocalEstoque31 = (int)RetornaCodigoLocalEstoque("LE", "31");
            //int iLocalEstoque32 = (int)RetornaCodigoLocalEstoque("LE", "32");
            //int iLocalEstoque33 = (int)RetornaCodigoLocalEstoque("LE", "33");
            //int iLocalEstoque34 = (int)RetornaCodigoLocalEstoque("LE", "34");


            //bool lEnviar = true;
            //double iEstoqueAtual = 0;

            //string sIDExterno = "";
            //double ePercentual = 0;
            //double eResultado = 0;
            //string sJsonPedido = "";
            //var ps = new List<Parameter>();

            //oResposta = RetornaProdutoComplementoFortPlus(oProduto.id);
            //if (oProduto.id.ToString().ToUpper() == "LIQMAL10")
            //{

            //}
            //List<ProdutoComplemento> oJsonProdutoComplementosFortePlus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(oResposta.Content);

            //oResposta = RetornaProdutoEstoqueFortPlus(oProduto.prCodigo);
            //List<FortPlusEstoque> oJsonProdutoEstoqueFortePlus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusEstoque>>(oResposta.Content);

            ////double eQtdEstoque = ClasseFuncoes.RetornaSeTemEstoque(oProduto.prCodigo, iLocalEstoque34);
            //iEstoqueAtual = iEstoqueAtual + ClasseFuncoes.RetornaSeTemEstoque(oProdutoFortPlus.id.ToString(), iLocalEstoque33);
            //iEstoqueAtual = iEstoqueAtual + ClasseFuncoes.RetornaSeTemEstoque(oProdutoFortPlus.id.ToString(), iLocalEstoque32);



            //iEstoqueAtual = iEstoqueAtual + ClasseFuncoes.RetornaSeTemEstoque(oProdutoFortPlus.id.ToString(), iLocalEstoque34);

            //if (iEstoqueAtual < 1)
            //    iEstoqueAtual = 0;


            ////foreach (FortPlusEstoque oEstoque in oJsonProdutoEstoqueFortePlus)
            ////{
            ////    if (oEstoque.idLocalEstoque == iLocalEstoque31.ToString() || oEstoque.idLocalEstoque == iLocalEstoque32.ToString() ||
            ////        oEstoque.idLocalEstoque == iLocalEstoque33.ToString() || oEstoque.idLocalEstoque == iLocalEstoque34.ToString())
            ////        if (oEstoque.codigo == oProduto.prCodigo)
            ////        {
            ////            iEstoqueAtual += double.Parse(oEstoque.estoqueAtual);
            ////        }
            ////}

            //if (lEnviar)
            //    foreach (ProdutoComplemento oJsonProdutoComplementoFortePlus in oJsonProdutoComplementosFortePlus)
            //    {
            //        try
            //        {

            //            if (oJsonProdutoComplementoFortePlus.cmIdExterno == "MLB1399884553")
            //            {

            //            }
            //            string sMarketPlace = RetornaNomeGlobalMK("MK", oJsonProdutoComplementoFortePlus.cmIdMarketPlace);

            //            if (sMarketPlace.ToUpper().Contains("MERCADO LIVRE"))
            //            {
            //                if (oJsonProdutoComplementoFortePlus.cmIdExterno == null && oJsonProdutoComplementoFortePlus.cmIdTipoAnuncio != null) // novo cadastro
            //                {
            //                    // Adiciono produto no mercado livre
            //                    MercadoLivreEnvioProduto oMercadoLivreEnvioProduto = new MercadoLivreEnvioProduto();
            //                    oMercadoLivreEnvioProduto.title = oJsonProdutoComplementoFortePlus.cmTitulo;
            //                    if (oJsonProdutoComplementoFortePlus.cmTitulo.Length > 59)
            //                        oMercadoLivreEnvioProduto.title = oJsonProdutoComplementoFortePlus.cmTitulo.Substring(0, 59);
            //                    oMercadoLivreEnvioProduto.price = oJsonProdutoComplementoFortePlus.cmPrecoVenda;
            //                    oMercadoLivreEnvioProduto.listing_type_id = RetornaCodigoGlobalMK("TA", oJsonProdutoComplementoFortePlus.cmIdTipoAnuncio);
            //                    oMercadoLivreEnvioProduto.condition = "new";
            //                    oMercadoLivreEnvioProduto.currency_id = "BRL";
            //                    oMercadoLivreEnvioProduto.category_id = "MLB1912";

            //                    ePercentual = double.Parse(oJsonProdutoComplementoFortePlus.cmPercentual.ToString());
            //                    eResultado = Math.Floor(iEstoqueAtual * (ePercentual / 100));

            //                    oMercadoLivreEnvioProduto.available_quantity = int.Parse(eResultado.ToString());
            //                    oMercadoLivreEnvioProduto.buying_mode = "buy_it_now";

            //                    List<Picture> lstImagemMercado = new List<Picture>();
            //                    Picture oImagemMercado = new Picture();
            //                    oImagemMercado.source = "http://191.252.61.62:8081/ImagensProdutos/naoencontrado.png";
            //                    lstImagemMercado.Add(oImagemMercado);
            //                    oMercadoLivreEnvioProduto.pictures = lstImagemMercado;


            //                    ps = new List<Parameter>();
            //                    Parameter p = new Parameter();
            //                    p.Name = "access_token";
            //                    p.Value = ClasseParametros.oMeli.AccessToken;
            //                    ps.Add(p);

            //                    var oRespostaItem = ClasseParametros.oMeli.Post("/items", ps, oMercadoLivreEnvioProduto);
            //                    if (oRespostaItem.StatusCode == System.Net.HttpStatusCode.Created)
            //                    {
            //                        sIDExterno = oResposta.Content.Split(',')[0];
            //                        sIDExterno = sIDExterno.Split(':')[1];
            //                        sIDExterno = sIDExterno.Replace("\"", "");

            //                        oJsonProdutoComplementoFortePlus.cmIdExterno = sIDExterno;

            //                        sJsonPedido = "{  \"cmIdExterno\": \"" + sIDExterno + "\"}";

            //                        oResposta = null;

            //                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
            //                        {
            //                            var client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento/" + oJsonProdutoComplementoFortePlus.id);
            //                            var request = new RestRequest(Method.PATCH);
            //                            request.AddHeader("Cache-Control", "no-cache");
            //                            request.AddHeader("Accept", "*/*");
            //                            request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                            request.AddHeader("Content-Type", "application/json");
            //                            request.AddParameter("application/json", sJsonPedido, ParameterType.RequestBody);
            //                            if (ClasseParametros.oJsonFortePluslogin == null)
            //                                ConectaForteplus(5);
            //                            request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                            oResposta = client.Execute(request);

            //                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //                            {
            //                                ClasseFuncoes.ConectaForteplus(5);
            //                            }
            //                            else if (oResposta.StatusCode == System.Net.HttpStatusCode.NoContent)
            //                            {
            //                                break;
            //                            }
            //                        }

            //                        // r = ClasseParametros.oMeli.Post("/items/validate", ps, oMercadoLivreEnvioProduto);
            //                    }
            //                }
            //                else
            //                {
            //                    if (oJsonProdutoComplementoFortePlus.cmPercentual == null)
            //                        continue;

            //                    ePercentual = double.Parse(oJsonProdutoComplementoFortePlus.cmPercentual.ToString());
            //                    eResultado = Math.Floor(iEstoqueAtual * (ePercentual / 100));

            //                    MercadoLivreAtualizaEstoqueProduto oProdutoAtualizaEstoque = new MercadoLivreAtualizaEstoqueProduto();

            //                    oProdutoAtualizaEstoque.available_quantity = eResultado.ToString();

            //                    string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoAtualizaEstoque);

            //                    ps = new List<Parameter>();
            //                    Parameter p = new Parameter();
            //                    p.Name = "access_token";
            //                    p.Value = ClasseParametros.oMeli.AccessToken;
            //                    ps.Add(p);


            //                    oResposta = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno, ps, oProdutoAtualizaEstoque);
            //                    if (oResposta != null)
            //                        if (oResposta.StatusCode == HttpStatusCode.BadRequest)
            //                        {
            //                            oResposta = ClasseParametros.oMeli.Get("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno, ps);

            //                            MercadoLivreProdutoRetorno oMercadoLivreproduto = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreProdutoRetorno>(oResposta.Content);

            //                            VariationsVariacaoEnvio lstVariaoces = new VariationsVariacaoEnvio();
            //                            lstVariaoces.variations = new VariationVariacaoEnvio[oMercadoLivreproduto.variations.Length];
            //                            int i = 0;
            //                            foreach (VariationProdutoRetorno oVariacao in oMercadoLivreproduto.variations)
            //                            {
            //                                VariationVariacaoEnvio oMercadoLivreVariacaoEnvio = new VariationVariacaoEnvio();
            //                                oMercadoLivreVariacaoEnvio.id = oVariacao.id;
            //                                oMercadoLivreVariacaoEnvio.available_quantity = eResultado;

            //                                lstVariaoces.variations[i] = oMercadoLivreVariacaoEnvio;
            //                                i++;
            //                            }

            //                            sJson = Newtonsoft.Json.JsonConvert.SerializeObject(lstVariaoces);

            //                            ps = new List<Parameter>();
            //                            p = new Parameter();
            //                            p.Name = "access_token";
            //                            p.Value = ClasseParametros.oMeli.AccessToken;
            //                            ps.Add(p);

            //                            oResposta = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno, ps, lstVariaoces);

            //                        }

            //                    MercadoLivreAtualizaPrecoProduto oProdutoAtualizaPreco = new MercadoLivreAtualizaPrecoProduto();
            //                    oProdutoAtualizaPreco.price = oJsonProdutoComplementoFortePlus.cmPrecoDePor;
            //                    ps = new List<Parameter>();
            //                    p = new Parameter();
            //                    p.Name = "access_token";
            //                    p.Value = ClasseParametros.oMeli.AccessToken;
            //                    ps.Add(p);
            //                    oResposta = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno, ps, sJson);
            //                    if (oResposta != null)
            //                        if (oResposta.StatusCode == HttpStatusCode.BadRequest)
            //                        {
            //                            oResposta = null;
            //                            while (oResposta == null)
            //                            {
            //                                oResposta = ClasseParametros.oMeli.Get("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno, ps);
            //                                if (oResposta.StatusCode == 0)
            //                                {
            //                                    oResposta = null;
            //                                }
            //                            }
            //                            MercadoLivreProdutoRetorno oMercadoLivreproduto = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreProdutoRetorno>(oResposta.Content);

            //                            MercadoLivrePrecoEnvios lstVariaoces = new MercadoLivrePrecoEnvios();
            //                            lstVariaoces.variations = new VariationPrecoEnvio[oMercadoLivreproduto.variations.Length];
            //                            int i = 0;
            //                            foreach (VariationProdutoRetorno oVariacao in oMercadoLivreproduto.variations)
            //                            {
            //                                VariationPrecoEnvio oMercadoLivreVariacaoEnvio = new VariationPrecoEnvio();
            //                                oMercadoLivreVariacaoEnvio.id = oVariacao.id;
            //                                oMercadoLivreVariacaoEnvio.price = oJsonProdutoComplementoFortePlus.cmPrecoDePor;

            //                                lstVariaoces.variations[i] = oMercadoLivreVariacaoEnvio;
            //                                i++;
            //                            }

            //                            sJson = Newtonsoft.Json.JsonConvert.SerializeObject(lstVariaoces);

            //                            oResposta = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno, ps, sJson);
            //                        }

            //                    if (oJsonProdutoComplementoFortePlus.cmTitulo != null)
            //                    {
            //                        MercadoLivreAtualizaTituloProduto oProdutoAtualizaTitulo = new MercadoLivreAtualizaTituloProduto();
            //                        oProdutoAtualizaTitulo.title = oJsonProdutoComplementoFortePlus.cmTitulo.ToString();
            //                        sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoAtualizaTitulo);

            //                        oResposta = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno, ps, sJson);

            //                    }
            //                    sIDExterno = oJsonProdutoComplementoFortePlus.cmIdExterno;

            //                    //https://api.mercadolibre.com/items/{ITEM_ID}

            //                    // finaliza tudo 
            //                    //FortPlusPatchProduto oProdutoPatch = new FortPlusPatchProduto();
            //                    //oProdutoPatch.prUpdateEcommerce = "N";
            //                    //oProdutoPatch.prUpdateEstoque = "N";
            //                    //oProdutoPatch.prUpdatePreco = "N";
            //                    //string sJsonProdutoPatch = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoPatch);

            //                    //oResposta = null;

            //                    //while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
            //                    //{
            //                    //    var client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento/" + oJsonProdutoComplementoFortePlus.id);
            //                    //    var request = new RestRequest(Method.PATCH);
            //                    //    request.AddHeader("Cache-Control", "no-cache");
            //                    //    request.AddHeader("Accept", "*/*");
            //                    //    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                    //    request.AddHeader("Content-Type", "application/json");
            //                    //    request.AddParameter("application/json", sJsonProdutoPatch, ParameterType.RequestBody);
            //                    //    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                    //    oResposta = client.Execute(request);

            //                    //    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //                    //    {
            //                    //        ClasseFuncoes.ConectaForteplus(5);
            //                    //    }
            //                    //    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NoContent)
            //                    //    {
            //                    //        break;
            //                    //    }
            //                    //}
            //                }
            //            }
            //            //string sSql = "UPDATE PRODUTO SET ATUALIZADO ='S' WHERE ID = " + r["ID"].ToString().Trim();
            //            //ClasseParametros.Executabanco(sSql);
            //        }
            //        catch (Exception ex)
            //        {
            //            EnviaMensagemTelegramAsync("Erro Ao enviar produto mercado livre, produto " + oJsonProdutoComplementoFortePlus.cmCodigo, "0,1", "Pedido não cadastrado", oJsonProdutoComplementoFortePlus.cmCodigo.ToString().Trim());
            //        }
            //    }

        }

        public static void EnviaProdutosAsync(TextBox oEdit, int iCodigoCliente)
        {
            //SalvaLogServicos("Envia Produtos para ML");
            //IRestResponse oResposta = RetornaProdutosFortPlus();
            //List<ProdutoFortePlus> oProdutos = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoFortePlus>>(oResposta.Content);
            //int? iLocalEstoque31 = RetornaCodigoLocalEstoque("LE", "31");
            //int? iLocalEstoque33 = RetornaCodigoLocalEstoque("LE", "33");
            //DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
            //string sKeyB2w = d.Rows[0]["KEYB2W"].ToString();
            //string sUsuarioB2W = d.Rows[0]["USUARIOB2W"].ToString();
            //string sAccountB2W = d.Rows[0]["ACCOUNTB2W"].ToString();
            //d.Dispose();


            //foreach (ProdutoFortePlus oProduto in oProdutos)
            //{
            //    bool lEnviar = false;
            //    double iEstoqueAtual = 0;
            //    double iPrecoCusto = 0;

            //    string sIDExterno = "";
            //    double ePercentual = 0;
            //    double eResultado = 0;
            //    string sJsonPedido = "";
            //    var ps = new List<Parameter>();


            //    oResposta = null;
            //    while (oResposta == null)
            //    {
            //        oResposta = RetornaProdutoComplementoFortPlus(oProduto.id);
            //        if (oResposta.StatusCode == HttpStatusCode.InternalServerError)
            //        {
            //            oResposta = null;
            //        }
            //    }

            //    if (oProduto.prCodigo.ToString().ToUpper() == "MAQSIG28")
            //    {

            //    }

            //    List<ProdutoComplemento> oJsonProdutoComplementosFortePlus = new List<ProdutoComplemento>();

            //    if (oProduto.prCodigo.ToString().ToUpper().Contains("KIT"))
            //    {

            //    }
            //    else
            //    {


            //        oJsonProdutoComplementosFortePlus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(oResposta.Content);

            //        oResposta = RetornaProdutoEstoqueFortPlus(oProduto.prCodigo);
            //        List<FortPlusEstoque> oJsonProdutoEstoqueFortePlus = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusEstoque>>(oResposta.Content);

            //        foreach (FortPlusEstoque oEstoque in oJsonProdutoEstoqueFortePlus)
            //        {
            //            if (oProduto.prCodigo.ToString().ToUpper().Contains("KIT"))
            //            {





            //            }
            //            else
            //            {
            //                if (oEstoque.idLocalEstoque == iLocalEstoque31.ToString() || oEstoque.idLocalEstoque == iLocalEstoque33.ToString())
            //                    if (oEstoque.codigo == oProduto.prCodigo)
            //                    {
            //                        if (int.Parse(oEstoque.reserva) > 0)
            //                        {

            //                        }

            //                        if (double.Parse(oEstoque.estoqueAtual) > 0)
            //                        {
            //                            iEstoqueAtual = double.Parse(oEstoque.estoqueAtual);
            //                            iPrecoCusto = double.Parse(oEstoque.custo);
            //                            lEnviar = true;
            //                            break;
            //                        }
            //                    }
            //            }
            //        }
            //    }

            //    if (lEnviar)
            //    {
            //        foreach (ProdutoComplemento oJsonProdutoComplementoFortePlus in oJsonProdutoComplementosFortePlus)
            //        {
            //            try
            //            {

            //                if (oJsonProdutoComplementoFortePlus.cmIdExterno == "MLB1439277059")
            //                {

            //                }

            //                if (oJsonProdutoComplementoFortePlus.cmCodigo == "MAQSIG28")
            //                {

            //                }


            //                string sMarketPlace = RetornaNomeGlobalMK("MK", oJsonProdutoComplementoFortePlus.cmIdMarketPlace);

            //                if (sMarketPlace.ToUpper().Contains("MERCADO LIVRE"))
            //                {
            //                    if (oJsonProdutoComplementoFortePlus.cmIdExterno == null && oJsonProdutoComplementoFortePlus.cmIdTipoAnuncio != null) // novo cadastro
            //                    {
            //                        // Adiciono produto no mercado livre
            //                        MercadoLivreEnvioProduto oMercadoLivreEnvioProduto = new MercadoLivreEnvioProduto();
            //                        oMercadoLivreEnvioProduto.title = oJsonProdutoComplementoFortePlus.cmTitulo;
            //                        if (oJsonProdutoComplementoFortePlus.cmTitulo.Length > 59)
            //                            oMercadoLivreEnvioProduto.title = oJsonProdutoComplementoFortePlus.cmTitulo.Substring(0, 59);
            //                        oMercadoLivreEnvioProduto.price = oJsonProdutoComplementoFortePlus.cmPrecoVenda;
            //                        oMercadoLivreEnvioProduto.listing_type_id = RetornaCodigoGlobalMK("TA", oJsonProdutoComplementoFortePlus.cmIdTipoAnuncio);
            //                        oMercadoLivreEnvioProduto.condition = "new";
            //                        oMercadoLivreEnvioProduto.currency_id = "BRL";
            //                        oMercadoLivreEnvioProduto.category_id = "MLB1912";

            //                        ePercentual = double.Parse(oJsonProdutoComplementoFortePlus.cmPercentual.ToString());
            //                        eResultado = Math.Floor(iEstoqueAtual * (ePercentual / 100));

            //                        oMercadoLivreEnvioProduto.available_quantity = int.Parse(eResultado.ToString());
            //                        oMercadoLivreEnvioProduto.buying_mode = "buy_it_now";

            //                        List<Picture> lstImagemMercado = new List<Picture>();
            //                        Picture oImagemMercado = new Picture();
            //                        oImagemMercado.source = "http://191.252.61.62:8081/ImagensProdutos/naoencontrado.png";
            //                        lstImagemMercado.Add(oImagemMercado);
            //                        oMercadoLivreEnvioProduto.pictures = lstImagemMercado;

            //                        ps = new List<Parameter>();
            //                        Parameter p = new Parameter();
            //                        p.Name = "access_token";
            //                        p.Value = ClasseParametros.oMeli.AccessToken;
            //                        ps.Add(p);


            //                        var oRespostaItem = ClasseParametros.oMeli.Post("/items", ps, oMercadoLivreEnvioProduto);

            //                        if (oResposta.StatusCode == System.Net.HttpStatusCode.Created)
            //                        {
            //                            sIDExterno = oResposta.Content.Split(',')[0];
            //                            sIDExterno = sIDExterno.Split(':')[1];
            //                            sIDExterno = sIDExterno.Replace("\"", "");

            //                            oJsonProdutoComplementoFortePlus.cmIdExterno = sIDExterno;

            //                            sJsonPedido = "{  \"cmIdExterno\": \"" + sIDExterno + "\"}";

            //                            oResposta = null;

            //                            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
            //                            {
            //                                var client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento/" + oJsonProdutoComplementoFortePlus.id);
            //                                var request = new RestRequest(Method.PATCH);
            //                                request.AddHeader("Cache-Control", "no-cache");
            //                                request.AddHeader("Accept", "*/*");
            //                                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                                request.AddHeader("Content-Type", "application/json");
            //                                request.AddParameter("application/json", sJsonPedido, ParameterType.RequestBody);
            //                                if (ClasseParametros.oJsonFortePluslogin == null)
            //                                    ConectaForteplus(5);
            //                                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                                oResposta = client.Execute(request);

            //                                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //                                {
            //                                    ClasseFuncoes.ConectaForteplus(5);
            //                                }
            //                                else if (oResposta.StatusCode == System.Net.HttpStatusCode.NoContent)
            //                                {
            //                                    break;
            //                                }
            //                            }

            //                            // r = ClasseParametros.oMeli.Post("/items/validate", ps, oMercadoLivreEnvioProduto);
            //                        }
            //                    }
            //                    else
            //                    {

            //                        if (oJsonProdutoComplementoFortePlus.cmPercentual == null)
            //                            continue;

            //                        ePercentual = double.Parse(oJsonProdutoComplementoFortePlus.cmPercentual.ToString());
            //                        eResultado = Math.Floor(iEstoqueAtual * (ePercentual / 100));

            //                        MercadoLivreAtualizaEstoqueProduto oProdutoAtualizaEstoque = new MercadoLivreAtualizaEstoqueProduto();

            //                        oProdutoAtualizaEstoque.available_quantity = eResultado.ToString();

            //                        string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoAtualizaEstoque);

            //                        var oRespostaItem = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno.Trim(), ps, oProdutoAtualizaEstoque);
            //                        if (oRespostaItem != null)
            //                            if (oRespostaItem.StatusCode == HttpStatusCode.BadRequest)
            //                            {
            //                                oRespostaItem = null;
            //                                while (oRespostaItem == null)
            //                                {
            //                                    oRespostaItem = ClasseParametros.oMeli.Get("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno.Trim(), ps);
            //                                    if (oRespostaItem.StatusCode == 0)
            //                                    {
            //                                        oRespostaItem = null;
            //                                    }
            //                                }
            //                                MercadoLivreProdutoRetorno oMercadoLivreproduto = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreProdutoRetorno>(oResposta.Content);

            //                                VariationsVariacaoEnvio lstVariaoces = new VariationsVariacaoEnvio();
            //                                lstVariaoces.variations = new VariationVariacaoEnvio[oMercadoLivreproduto.variations.Length];
            //                                int i = 0;
            //                                foreach (VariationProdutoRetorno oVariacao in oMercadoLivreproduto.variations)
            //                                {
            //                                    VariationVariacaoEnvio oMercadoLivreVariacaoEnvio = new VariationVariacaoEnvio();
            //                                    oMercadoLivreVariacaoEnvio.id = oVariacao.id;
            //                                    oMercadoLivreVariacaoEnvio.available_quantity = eResultado;

            //                                    lstVariaoces.variations[i] = oMercadoLivreVariacaoEnvio;
            //                                    i++;
            //                                }

            //                                sJson = Newtonsoft.Json.JsonConvert.SerializeObject(lstVariaoces);

            //                                oRespostaItem = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno.Trim(), ps, lstVariaoces);
            //                            }

            //                        MercadoLivreAtualizaPrecoProduto oProdutoAtualizaPreco = new MercadoLivreAtualizaPrecoProduto();
            //                        oProdutoAtualizaPreco.price = oJsonProdutoComplementoFortePlus.cmPrecoDePor;
            //                        oRespostaItem = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno.Trim(), ps, oProdutoAtualizaPreco);
            //                        if (oRespostaItem != null)
            //                            if (oRespostaItem.StatusCode == HttpStatusCode.BadRequest)
            //                            {
            //                                oRespostaItem = null;
            //                                while (oRespostaItem == null)
            //                                {
            //                                    oRespostaItem = ClasseParametros.oMeli.Get("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno.Trim(), ps);
            //                                    if (oRespostaItem.StatusCode == HttpStatusCode.OK)
            //                                    {
            //                                        break;
            //                                    }
            //                                    else if (oRespostaItem.StatusCode == 0 || oRespostaItem.StatusCode == HttpStatusCode.BadGateway)
            //                                    {
            //                                        oRespostaItem = null;
            //                                    }

            //                                }

            //                                MercadoLivreProdutoRetorno oMercadoLivreproduto = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreProdutoRetorno>(oResposta.Content);

            //                                MercadoLivrePrecoEnvios lstVariaoces = new MercadoLivrePrecoEnvios();
            //                                lstVariaoces.variations = new VariationPrecoEnvio[oMercadoLivreproduto.variations.Length];
            //                                int i = 0;
            //                                foreach (VariationProdutoRetorno oVariacao in oMercadoLivreproduto.variations)
            //                                {
            //                                    VariationPrecoEnvio oMercadoLivreVariacaoEnvio = new VariationPrecoEnvio();
            //                                    oMercadoLivreVariacaoEnvio.id = oVariacao.id;
            //                                    oMercadoLivreVariacaoEnvio.price = oJsonProdutoComplementoFortePlus.cmPrecoDePor;

            //                                    lstVariaoces.variations[i] = oMercadoLivreVariacaoEnvio;
            //                                    i++;
            //                                }

            //                                sJson = Newtonsoft.Json.JsonConvert.SerializeObject(lstVariaoces);

            //                                oRespostaItem = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno.Trim(), ps, lstVariaoces);
            //                            }

            //                        if (oJsonProdutoComplementoFortePlus.cmTitulo != null)
            //                        {
            //                            MercadoLivreAtualizaTituloProduto oProdutoAtualizaTitulo = new MercadoLivreAtualizaTituloProduto();
            //                            oProdutoAtualizaTitulo.title = oJsonProdutoComplementoFortePlus.cmTitulo.ToString();
            //                            oRespostaItem = ClasseParametros.oMeli.Put("/items/" + oJsonProdutoComplementoFortePlus.cmIdExterno.Trim(), ps, oProdutoAtualizaTitulo);
            //                        }
            //                        sIDExterno = oJsonProdutoComplementoFortePlus.cmIdExterno;

            //                        //https://api.mercadolibre.com/items/{ITEM_ID}

            //                        // finaliza tudo 
            //                        //FortPlusPatchProduto oProdutoPatch = new FortPlusPatchProduto();
            //                        //oProdutoPatch.prUpdateEcommerce = "N";
            //                        //oProdutoPatch.prUpdateEstoque = "N";
            //                        //oProdutoPatch.prUpdatePreco = "N";
            //                        //string sJsonProdutoPatch = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoPatch);

            //                        //oResposta = null;

            //                        //while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
            //                        //{
            //                        //    var client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComplemento/" + oJsonProdutoComplementoFortePlus.id);
            //                        //    var request = new RestRequest(Method.PATCH);
            //                        //    request.AddHeader("Cache-Control", "no-cache");
            //                        //    request.AddHeader("Accept", "*/*");
            //                        //    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
            //                        //    request.AddHeader("Content-Type", "application/json");
            //                        //    request.AddParameter("application/json", sJsonProdutoPatch, ParameterType.RequestBody);
            //                        //    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

            //                        //    oResposta = client.Execute(request);

            //                        //    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            //                        //    {
            //                        //        ClasseFuncoes.ConectaForteplus(5);
            //                        //    }
            //                        //    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NoContent)
            //                        //    {
            //                        //        break;
            //                        //    }
            //                        //}
            //                    }
            //                }
            //                else if (sMarketPlace.ToUpper().Contains("B2W"))
            //                {
            //                    int iPagina = 1;
            //                    int iPorPagina = 50;
            //                    RestClient client = null;
            //                    RestRequest oRequest = null;

            //                    oResposta = null;
            //                    while (oResposta == null)
            //                    {
            //                        client = new RestClient("https://api.skyhub.com.br/products/" + oJsonProdutoComplementoFortePlus.cmCodigo.ToUpper());
            //                        //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
            //                        //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
            //                        oRequest = new RestRequest(Method.GET);
            //                        oRequest.AddHeader("cache-control", "no-cache");
            //                        oRequest.AddHeader("Accept", "application/json");
            //                        oRequest.AddHeader("Content-Type", "application/json");
            //                        oRequest.AddHeader("x-Api-Key", sKeyB2w);
            //                        oRequest.AddHeader("X-User-Email", sUsuarioB2W);
            //                        oRequest.AddHeader("X-Accountmanager-Key", sAccountB2W);
            //                        oResposta = client.Execute(oRequest);

            //                        if (oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError)
            //                        {
            //                            oResposta = null;

            //                        }
            //                        else if (oResposta.StatusCode == HttpStatusCode.BadGateway)
            //                        {
            //                            oResposta = null;

            //                        }
            //                    }

            //                    Thread.Sleep(500);

            //                    float? ePercentualComplemento = oJsonProdutoComplementoFortePlus.cmPercentual;
            //                    if (ePercentualComplemento == null)
            //                        ePercentualComplemento = 30;

            //                    interRegraNegocio.B2W.Produto oProdutoB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<interRegraNegocio.B2W.Produto>(oResposta.Content);
            //                    int iEstoqueEnviar = (int)(iEstoqueAtual * (ePercentualComplemento / 100));
            //                    oProdutoB2W.qty = iEstoqueEnviar;
            //                    oProdutoB2W.cost = (float)iPrecoCusto;

            //                    B2WProdutoAtualiza oProdutoAtualiza = new B2WProdutoAtualiza();
            //                    oProdutoAtualiza.product = oProdutoB2W;

            //                    string sJSON = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoAtualiza);

            //                    client = new RestClient("https://api.skyhub.com.br/products/" + oJsonProdutoComplementoFortePlus.cmCodigo.ToUpper());
            //                    oRequest = new RestRequest(Method.PUT);
            //                    oRequest.AddHeader("cache-control", "no-cache");
            //                    oRequest.AddHeader("Accept", "application/json");
            //                    oRequest.AddHeader("Content-Type", "application/json");
            //                    oRequest.AddHeader("x-Api-Key", sKeyB2w);
            //                    oRequest.AddHeader("X-User-Email", sUsuarioB2W);
            //                    oRequest.AddHeader("X-Accountmanager-Key", sAccountB2W);
            //                    oRequest.AddParameter("application/json", sJSON, ParameterType.RequestBody);
            //                    oResposta = client.Execute(oRequest);
            //                    Thread.Sleep(500);

            //                }
            //                else if (sMarketPlace.ToUpper().Contains("MAGAZINE"))
            //                {
            //                    DataTable dtbProduto = ClasseParametros.ConsultaBancoMysql("SELECT * FROM PRODUTO WHERE CODIGO = '" + oJsonProdutoComplementoFortePlus.cmCodigo.ToUpper() + "' AND ATUALIZADO = 0");

            //                    foreach (DataRow r in dtbProduto.Rows)
            //                    {
            //                        oResposta = ClasseFuncoes.RetornaProdutoFortPlus(r["CODIGOINTERNO"].ToString().Trim());
            //                        ProdutoFortePlus oProdutoFortplus = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(oResposta.Content);


            //                        MagazineLuiza.Category[] aCategoria = new MagazineLuiza.Category[1];
            //                        MagazineLuiza.Attribute[] aAttributes = new MagazineLuiza.Attribute[1];
            //                        MagazineLuiza.Category oCategoria = new MagazineLuiza.Category();
            //                        MagazineLuiza.Attribute oAtributo = new MagazineLuiza.Attribute();

            //                        string sJsonProduto = "";

            //                        bool lAnuncioCriado = false;
            //                        while (!lAnuncioCriado)
            //                        {
            //                            // Consulta se tem produto
            //                            var client = new RestClient("https://api-integra.azurewebsites.net/api/Product/" + oProduto.prCodigo.ToString());
            //                            var request = new RestRequest(Method.GET);
            //                            request.AddHeader("cache-control", "no-cache");
            //                            request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
            //                            IRestResponse response = client.Execute(request);

            //                            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            //                            {
            //                                MagazineLuiza.Product oProdutoMAGALU = new MagazineLuiza.Product();
            //                                oProdutoMAGALU.Name = oProduto.prNome;
            //                                oProdutoMAGALU.IdProduct = oProduto.prCodigo;
            //                                oProdutoMAGALU.Brand = ClasseFuncoes.RetornaNomeGlobalMK("MR", oProduto.prIdMarca);
            //                                oProdutoMAGALU.Code = oProduto.prCodigo;
            //                                oProdutoMAGALU.NbmOrigin = "0";
            //                                oProdutoMAGALU.WarrantyTime = "12";

            //                                string sGrupo = ClasseFuncoes.RetornaNomeGlobalMK("GP", oProduto.prIdGrupo);

            //                                oCategoria.Name = sGrupo;
            //                                oCategoria.Id = "1";
            //                                aCategoria[0] = oCategoria;
            //                                aAttributes = new MagazineLuiza.Attribute[1];

            //                                if (r["TIPOANUNCIO"].ToString() != "")
            //                                {
            //                                    // Pega variações e joga nos atributos
            //                                    List<GlobalFortPlus> oListaGlobal = ClasseFuncoes.RetornaVariacoes("VP", "Voltagem");
            //                                    string[] aVoltagem = r["TIPOANUNCIO"].ToString().Trim().Split(',');
            //                                    aAttributes = new MagazineLuiza.Attribute[aVoltagem.Length];
            //                                    int i = 0;
            //                                    foreach (string sVoltagem in aVoltagem)
            //                                    {

            //                                        List<GlobalFortPlus> oListaTemp = oListaGlobal.Where(x => x.id.ToString() == sVoltagem).ToList();
            //                                        oAtributo = new MagazineLuiza.Attribute();
            //                                        oAtributo.Name = "Voltagem";
            //                                        oAtributo.Value = oListaTemp[0].glNome;

            //                                        aAttributes[i] = oAtributo;
            //                                        i++;
            //                                    }
            //                                }

            //                                oProdutoMAGALU.Categories = aCategoria;
            //                                oProdutoMAGALU.Attributes = aAttributes;

            //                                oProdutoMAGALU.Active = true;
            //                                sJsonProduto = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoMAGALU);

            //                                #region ENVIA PRODUTO
            //                                client = new RestClient("https://api-integra.azurewebsites.net/api/Product");
            //                                request = new RestRequest(Method.POST);
            //                                request.AddHeader("cache-control", "no-cache");
            //                                request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
            //                                request.AddParameter("application/json", sJsonProduto, ParameterType.RequestBody);

            //                                response = client.Execute(request);
            //                                #endregion
            //                            }

            //                            if (response.StatusCode == System.Net.HttpStatusCode.Created || response.StatusCode == System.Net.HttpStatusCode.OK)
            //                            {
            //                                // Consulta se tem SKU
            //                                client = new RestClient("https://api-integra.azurewebsites.net/api/Sku/" + oProduto.id.ToString());
            //                                request = new RestRequest(Method.GET);
            //                                request.AddHeader("cache-control", "no-cache");
            //                                request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
            //                                response = client.Execute(request);

            //                                ePercentual = double.Parse(oJsonProdutoComplementoFortePlus.cmPercentual.ToString());

            //                                if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            //                                {
            //                                    // SKU
            //                                    MagazineLuiza.SKUProduto oProdutoMAGALUSKU = new MagazineLuiza.SKUProduto();
            //                                    oProdutoMAGALUSKU.IdSku = oProduto.prCodigo;
            //                                    oProdutoMAGALUSKU.IdSkuErp = oProduto.prCodigo;
            //                                    oProdutoMAGALUSKU.IdProduct = oProduto.prCodigo.ToString();
            //                                    oProdutoMAGALUSKU.Name = oProduto.prNome;
            //                                    oProdutoMAGALUSKU.Description = oProduto.prNome;
            //                                    oProdutoMAGALUSKU.Height = (float)oProduto.prAltura / 100;
            //                                    oProdutoMAGALUSKU.Width = (float)oProduto.prLargura / 100;
            //                                    oProdutoMAGALUSKU.Length = (float)oProduto.prComprimento / 100;
            //                                    oProdutoMAGALUSKU.Weight = (float)oProduto.prPesoBruto;
            //                                    oProdutoMAGALUSKU.CodeEan = oProduto.prEan.ToString();
            //                                    oProdutoMAGALUSKU.CodeNcm = "";
            //                                    oProdutoMAGALUSKU.CodeIsbn = "";
            //                                    oProdutoMAGALUSKU.CodeNbm = "";
            //                                    oProdutoMAGALUSKU.Variation = "";
            //                                    oProdutoMAGALUSKU.Status = true;

            //                                    // Preco
            //                                    MagazineLuiza.Price oPreco = new MagazineLuiza.Price();
            //                                    oPreco.ListPrice = (float?)oJsonProdutoComplementoFortePlus.cmPrecoDePor;
            //                                    oPreco.SalePrice = (float?)oJsonProdutoComplementoFortePlus.cmPrecoDePor;

            //                                    oProdutoMAGALUSKU.Price = oPreco;

            //                                    //// Estoque
            //                                    //iEstoqueAtual = ClasseFuncoes.RetornaEstoque(oProduto.prCodigo);
            //                                    int iEstoqueEnviar = (int)(iEstoqueAtual * (ePercentual / 100));

            //                                    eResultado = iEstoqueEnviar;
            //                                    //if (!lPar)
            //                                    //    eResultado = 0;

            //                                    oProdutoMAGALUSKU.StockQuantity = (int)eResultado;
            //                                    oProdutoMAGALUSKU.MainImageUrl = "http://interplacelog.com.br/imagens/semimagem.jpg";
            //                                    // Imagens
            //                                    oProdutoMAGALUSKU.UrlImages = new string[1];
            //                                    oProdutoMAGALUSKU.UrlImages[0] = "http://interplacelog.com.br/imagens/semimagem.jpg";
            //                                    // Atributos
            //                                    //oProdutoMAGALUSKU.Attributes = new Attribute[1];
            //                                    Attribute oAtributoSKU = new Attribute();
            //                                    //if (lPar)
            //                                    //{
            //                                    //    oAtributoSKU.Name = "VOLTAGEM";
            //                                    //    oAtributoSKU.Value = "110V";
            //                                    //}

            //                                    //oProdutoMAGALUSKU.Attributes[0] = oAtributoSKU;
            //                                    sJsonProduto = Newtonsoft.Json.JsonConvert.SerializeObject(oProdutoMAGALUSKU);

            //                                    #region ENVIA SKU
            //                                    client = new RestClient("https://api-integra.azurewebsites.net/api/Sku");
            //                                    request = new RestRequest(Method.POST);
            //                                    request.AddHeader("cache-control", "no-cache");
            //                                    request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
            //                                    request.AddParameter("application/json", sJsonProduto, ParameterType.RequestBody);

            //                                    response = client.Execute(request);
            //                                    #endregion
            //                                }


            //                                string sSql = "UPDATE PRODUTO SET ATUALIZADO = 1 WHERE CODIGOINTERNO = " + r["CODIGOINTERNO"].ToString().Trim() + " AND MARKETPLACE = '" + sMarketPlace + "'";
            //                                ClasseParametros.ExecutabancoMySql(sSql);
            //                                lAnuncioCriado = true;
            //                            }
            //                            else if (response.Content.Contains("Não existe uma categoria com Id informado"))
            //                            {
            //                                sJsonProduto = Newtonsoft.Json.JsonConvert.SerializeObject(oCategoria);

            //                                client = new RestClient("https://api-integra.azurewebsites.net/api/Category");
            //                                request = new RestRequest(Method.POST);
            //                                request.AddHeader("cache-control", "no-cache");
            //                                request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
            //                                request.AddParameter("application/json", sJsonProduto, ParameterType.RequestBody);

            //                                response = client.Execute(request);
            //                            }
            //                        }

            //                    }




            //                }

            //                //string sSql = "UPDATE PRODUTO SET ATUALIZADO ='S' WHERE ID = " + r["ID"].ToString().Trim();
            //                //ClasseParametros.Executabanco(sSql);
            //            }
            //            catch (Exception ex)
            //            {

            //            }
            //        }
            //    }
            //}

        }

        public static void EnviaProdutoMercadoLivreAsync()
        {
            //DataTable dtbProduto = ClasseParametros.ConsultaBancoMysql("SELECT * FROM PRODUTO WHERE ATUALIZADO = 'N'");

            //foreach (DataRow r in dtbProduto.Rows)
            //{
            //    IRestResponse oResposta = RetornaProdutoFortPlus(r["ID"].ToString().Trim());
            //    ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(oResposta.Content);

            //    List<string> lstAnuncio = new List<string>();
            //    lstAnuncio.Add("gold_pro");
            //    lstAnuncio.Add("gold");

            //    foreach (string sAnuncio in lstAnuncio)
            //    {
            //        oResposta = RetornaProdutoComplementoFortPlus(oProduto.id);
            //        ProdutoComplemento oJsonProdutoComplementoFortePlus = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoComplemento>(oResposta.Content);

            //        // Adiciono produto no mercado livre
            //        MercadoLivreEnvioProduto oMercadoLivreEnvioProduto = new MercadoLivreEnvioProduto();
            //        oMercadoLivreEnvioProduto.title = oProduto.prNome;
            //        oMercadoLivreEnvioProduto.price = oJsonProdutoComplementoFortePlus.cmPrecoVenda;
            //        oMercadoLivreEnvioProduto.listing_type_id = sAnuncio.Trim();
            //        oMercadoLivreEnvioProduto.condition = "new";
            //        oMercadoLivreEnvioProduto.currency_id = "BRL";
            //        oMercadoLivreEnvioProduto.category_id = "MLB1912";
            //        oMercadoLivreEnvioProduto.available_quantity = 5;
            //        oMercadoLivreEnvioProduto.buying_mode = "buy_it_now";

            //        List<Picture> lstImagemMercado = new List<Picture>();
            //        Picture oImagemMercado = new Picture();
            //        oImagemMercado.source = "http://191.252.61.62:8081/ImagensProdutos/naoencontrado.png";
            //        lstImagemMercado.Add(oImagemMercado);
            //        oMercadoLivreEnvioProduto.pictures = lstImagemMercado;

            //        List<Parameter> ps = new List<Parameter>();
            //        Parameter p = new Parameter();
            //        p.Name = "access_token";
            //        p.Value = ClasseParametros.oMeli.AccessToken;
            //        ps.Add(p);


            //        var oRespostaItem = ClasseParametros.oMeli.Post("/items", ps, oMercadoLivreEnvioProduto);

            //        string sSql = "UPDATE PRODUTO SET ATUALIZADO ='S' WHERE ID = " + r["ID"].ToString().Trim();
            //        ClasseParametros.ExecutabancoMySql(sSql);
            //    }
            //}


        }


        public static string Base64Encode(string plainText)
        {
            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
            return System.Convert.ToBase64String(plainTextBytes);
        }

        public static void RetornaCodigoMAGALU(int iCliente)
        {
            //antoniomartin@2eletro.com.br
            //25272244


            //2eletrofilial3
            //25272244
            DataTable dtbMagalu = ClasseParametros.ConsultaBancoMysql(@"SELECT USUARIOMAGALU, SENHAMAGALU FROM CLIENTE WHERE CODIGO = " + iCliente.ToString());
            if (dtbMagalu.Rows.Count > 0)
            {
                string sUsuario = dtbMagalu.Rows[0]["USUARIOMAGALU"].ToString().Trim();
                string sSenha = dtbMagalu.Rows[0]["SENHAMAGALU"].ToString().Trim();

                ClasseParametros.sTokenMAGALU = Base64Encode(sUsuario + ":" + sSenha);

            }

        }

        public static bool ConectaMercadoLivreAsync(int iCliente)
        {
            bool lRetorno = false;
            //antoniomartin@2eletro.com.br
            //25272244

            //2eletrofilial3
            //25272244
            Console.WriteLine("Conectando Mercado livre");
            try
            {

                DataTable dtbMagalu = ClasseParametros.ConsultaBancoMysql(@"SELECT IDMERCADOLIVRE, SENHAMERCADOLIVRE, CODEMERCADOLIVRE
                                                                  ,ACCESSTOKENMERCADOLIVRE
                                                                  ,REFRESHTOKENMERCADOLIVRE
                                                                  ,IDCLIENTEMERCADOLIVRE
                                                                  ,TOKENEXPIRA FROM CLIENTE WHERE CODIGO = " + iCliente.ToString());
                if (dtbMagalu.Rows.Count > 0)
                {
                    long sIdMercadoLivre = long.Parse(dtbMagalu.Rows[0]["IDMERCADOLIVRE"].ToString().Trim());
                    string sSenhaMercadoLivre = dtbMagalu.Rows[0]["SENHAMERCADOLIVRE"].ToString();
                    string sTokenMercadoLivre = dtbMagalu.Rows[0]["ACCESSTOKENMERCADOLIVRE"].ToString();
                    string sRefreshTokenMercadoLivre = dtbMagalu.Rows[0]["REFRESHTOKENMERCADOLIVRE"].ToString();
                    string redirectUrl = "";
                    string sCodeMELI = dtbMagalu.Rows[0]["CODEMERCADOLIVRE"].ToString();

                    if (sTokenMercadoLivre == "")
                    {
                        ClasseParametros.oMeli = new Meli(sIdMercadoLivre, sSenhaMercadoLivre);
                        //redirectUrl = ClasseParametros.oMeli.GetAuthUrl(sIdMercadoLivre, MeliSite.Brasil, "https://www.google.com");
                        //redirectUrl = ClasseParametros.oMeli.GetAuthUrl(Meli.AuthUrls.MLB, "https://www.google.com.br");
                        redirectUrl = ClasseParametros.oMeli.GetAuthUrl(Meli.AuthUrls.MLB, "https://www.google.com.br/");

                        ////http://interplacelog.com.br/
                        //IWebDriver oWeb = new ChromeDriver(Directory.GetCurrentDirectory());
                        //oWeb.Navigate().GoToUrl(redirectUrl);

                        //string sPagina = "";
                        ////interplacelog
                        //while (!sPagina.Contains("https://www.google.com.br/"))
                        //{
                        //    sPagina = oWeb.Url;
                        //}

                        //oWeb.Quit();
                        //sCodeMELI = sPagina.Split('=')[1];

                        ClasseParametros.oMeli.Authorize(sCodeMELI, "https://www.google.com.br/");
                        string sSql = "UPDATE CLIENTE SET CODEMERCADOLIVRE=@CODEMERCADOLIVRE,ACCESSTOKENMERCADOLIVRE=@ACCESSTOKENMERCADOLIVRE,REFRESHTOKENMERCADOLIVRE=@REFRESHTOKENMERCADOLIVRE,IDCLIENTEMERCADOLIVRE=@IDCLIENTEMERCADOLIVRE WHERE CODIGO = " + iCliente.ToString();
                        Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                        ParametrosSQL.Add("CODEMERCADOLIVRE", sCodeMELI);
                        ParametrosSQL.Add("ACCESSTOKENMERCADOLIVRE", ClasseParametros.oMeli.AccessToken);
                        ParametrosSQL.Add("REFRESHTOKENMERCADOLIVRE", ClasseParametros.oMeli.RefreshToken);
                        ParametrosSQL.Add("IDCLIENTEMERCADOLIVRE", ClasseParametros.oMeli.ClientId);
                        ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                        lRetorno = true;
                    }
                    else
                    {
                        try
                        {
                            ClasseParametros.oMeli = new MercadoLibre.SDK.Meli(sIdMercadoLivre, sSenhaMercadoLivre, sTokenMercadoLivre, sRefreshTokenMercadoLivre);
                            ClasseParametros.oMeli.refreshToken();

                        }
                        catch (Exception ex)
                        {
                            ClasseParametros.oMeli = new MercadoLibre.SDK.Meli(sIdMercadoLivre, sSenhaMercadoLivre, sTokenMercadoLivre, sRefreshTokenMercadoLivre);
                            ClasseParametros.oMeli.refreshToken();
                        }
                    }
                }

                List<Parameter> ps = new List<Parameter>();
                Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                ps.Add(p);

                IRestResponse oResposta = ClasseParametros.oMeli.Get("/users/me", ps);
                if (oResposta.Content.Contains("invalid_token"))
                {
                    ClasseParametros.oMeli.refreshToken(ClasseParametros.oMeli.RefreshToken);
                    oResposta = ClasseParametros.oMeli.Get("/users/me", ps);

                }

                ClasseParametros.oUsuarioMercadoLivre = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreUsuario>(oResposta.Content);




                dtbMagalu.Dispose();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Erro: " + ex.Message);
            }

            return lRetorno;
        }


        public static bool ConectaForteplus(int iCliente)
        {
            ClasseParametros.sBanco = ClasseParametros.oIni.IniReadValue("banco", "banco");
            ClasseParametros.sIP = ClasseParametros.oIni.IniReadValue("banco", "servidor");
            ClasseParametros.sUsuario = ClasseParametros.oIni.IniReadValue("banco", "usuario");
            bool lRetorno = false;

            DataTable dtbForteplus = ClasseParametros.ConsultaBancoMysql(@"SELECT EMAILFORTEPLUS
                                                                              ,SENHAFORTEPLUS
                                                                              ,DOMINIOFORTEPLUS
                                                                      FROM CLIENTE
                                                                      WHERE CODIGO = " + iCliente.ToString());

            if (dtbForteplus.Rows.Count > 0 || iCliente == -1)
            {
                string sEMAILFORTEPLUS = "";
                string sSENHAFORTEPLUS = "";
                string sDOMINIOFORTEPLUS = "";
                if (iCliente > -1)
                {
                    sEMAILFORTEPLUS = dtbForteplus.Rows[0]["EMAILFORTEPLUS"].ToString();
                    sSENHAFORTEPLUS = dtbForteplus.Rows[0]["SENHAFORTEPLUS"].ToString();
                    //sDOMINIOFORTEPLUS = dtbForteplus.Rows[0]["DOMINIOFORTEPLUS"].ToString();
                    sDOMINIOFORTEPLUS = dtbForteplus.Rows[0]["DOMINIOFORTEPLUS"].ToString();// + "_teste";
                    ClasseParametros.EmailFortPlus = sEMAILFORTEPLUS;
                }
                else
                {
                    sEMAILFORTEPLUS = "rodrigonunes@2eletro.com.br";
                    sSENHAFORTEPLUS = "germano06";
                    sDOMINIOFORTEPLUS = "doiseletro";
                }

                var client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Login");
                var request = new RestRequest(Method.POST);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                request.AddParameter("application/json", "{\n    \"email\": \"" + sEMAILFORTEPLUS + "\",\n    \"password\": \"" + sSENHAFORTEPLUS + "\",\n    \"domain\": \"" + sDOMINIOFORTEPLUS + "\"\n}", ParameterType.RequestBody);
                IRestResponse response = client.Execute(request);

                ClasseParametros.oJsonFortePluslogin = Newtonsoft.Json.JsonConvert.DeserializeObject<FortePluslogin>(response.Content);
                lRetorno = true;
                dtbForteplus.Dispose();

            }



            return lRetorno;
        }

        public static void AtualizaTipoAnuncioAsync()
        {
            var oResposta = ClasseParametros.oMeli.Get("/sites/MLB/listing_types");


            List<MercadoLivreTipoAnuncio> oTipoAnuncios = Newtonsoft.Json.JsonConvert.DeserializeObject<List<MercadoLivreTipoAnuncio>>(oResposta.Content);

            foreach (MercadoLivreTipoAnuncio oTipoAnuncio in oTipoAnuncios)
            {
                string sSql = "";
                DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM TIPOANUNCIO WHERE ID = '" + oTipoAnuncio.id + "'");
                if (d.Rows.Count > 0)
                {
                    sSql = "UPDATE TIPOANUNCIO SET NOME=@NOME WHERE ID=@ID";
                }
                else
                {
                    sSql = "INSERT INTO TIPOANUNCIO (ID,NOME) VALUES(@ID,@NOME)";
                }
                Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                ParametrosSQL.Add("ID", oTipoAnuncio.id);
                ParametrosSQL.Add("NOME", oTipoAnuncio.name);
                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                d.Dispose();
            }


            MessageBox.Show("Atualizado");
        }

        public static string GeraEtiquetaB2W(EtiquetaJSON oAnymarket, string sNomeMarketplace, string sTipoEnvio)
        {
            string sImagemAmericanas = "^FO50,50^GFA,2400,2400,30,gP0C,:,Y0EQ01EM0E01CI01C,X03FCIFE3F87CC3F0FE3FE3FC7FI03F,X07FCIFE7FE7FC7F9FE3FE7FCFFI07OF8,X071CF7CF71EF9CF398F3DE73CE3801PF8,Y03CE38FF0EE1CE080F38F03CF6003PF8,X01FCE387FFEE1CE00FF30F1FCFE007PF8,X07FCE387FFEE1CE01FF70F7FC7F00QF8,X071CE3C7700E1CE03C770F71C0F807PF,X0F1EE3C7600E1CE3F8F78F71CC3803PF,X07BEE3CF71EE1CFFBCF7877BEE7800PF,X07FEE3873FCE1C7F3FF3077FEFF8007OF,X01FC41021F0C083E1FF0063EC7EI03E,hN0C,,:::Y03FC,Y07FC,Y07FCgO03F8,J07T07FEY03FM03IF8,I0IF8L07FEI07FEK03FI0IFL0FFCL0KF,003IFE003FE0IFC0KF1FF0FF003IFEJ03IF0FF801KF8,00KF803FE3IFE0KF1FF1FF00KF8I07IF8FF803KFC,01KFC03FF7JF0KF1FF3FF01KFCI0JFDFF807KFE,07KFE03MF8KF1FF3FF03KFE001MF80MF,07LF03MF8KF1KF07LF001MF80MF,0MF03MFCKF1KF0MF803MF81FFC03FF,1MF83MFC7IFC1KF1IF8IFC07MF81FF801FF8,3FFC03FFC3IF03FFC07FE01KF1FFC03FFC07FF83IF81FF001FF8,3FF801FFC3FFE01FFC07FE01JFC3FF800FFE0FFE00IF81FF001FF8,7FFI0FFE3FFC01FFC07FE01IF803FFI0FFE0FFC007FF81FE001FF8,7FEI07FE3FF800FFE07FE01FFE007FEI07FE1FFC003FF8K03FF8,7FEI07FE3FF800FFE07FC01FFC007FEI03FF1FF8003FF8K0IF8,7FCI07FE3FFI07FE07FC01FFC007FEI03FF1FF8001FF8I01JF8,FFCI03FF3FFI07FE07FC01FF8007FEI03FF1FFI01FF8003KF8,OF3FFI07FE07FC01FF8007NF3FFJ0FF801LF8,OF3FFI07FE07FC01FF8007NF3FFJ0FF807LF8,OF3FFI07FE07FC01FF800OF3FFJ0FF80MF8,OF3FFI07FE07FC01FF800OF3FFJ0FF81JF9FF8,OF3FFI07FE07FC01FF800OF3FFJ0FF83IF81FF8,OF3FEI07FE07FC01FF800OF3FFJ0FF83FFC01FF8,FFCL03FEI07FE07FC01FF800FFEL03FFI01FF83FF801FF8,FFCL03FEI07FE07FC01FF8007FCL03FFI01FF87FE001FF8,FFCL03FEI07FE07FC01FF8007FCL03FF8001FF87FE001FF8,7FCL03FEI07FE07FE01FF8007FEL01FF8003FF87FC003FF8,7FEL03FFI07FE07FE01FF8007FEL01FFC003FF87FC003FF8,7FEI03FE3FFI07FE07FE01FF8007FEI03FE1FFC007FF87FE007FF8,7FFI0FFE3FFI07FE07FE01FF8003FFI07FE1FFE00IF87FF00IF8,3FF801FFE3FFI07FE07FE01FF8003FF800FFE0IF83IF83FF81IF8,3FFE03FFC3FFI07FE07FF81FF8001FFE03FFC07MF83MF8,1MFC3FFI07FE07IF1FF8001MFC07MF83MF8,0MF83FFI07FE07IF1FF8I0MF803MF81MFC,0MF03FFI07FE03IF1FF8I07LF001MF81JF8FFC,03KFE03FFI07FE03IF1FF8I03KFEI0JFDFF80JF0FFC,01KFC03FFI07FE01IF1FF8I01KFCI07IF1FF803FF807FC,00KF003FFI07FE007FF1FFK07JFJ01FFC1FF800FC,003IFC003FEI07FC001FF0FEK01IFCK07F01FF8,I03FEgL03FEO01FF,hJ01FF,:hJ03FF,gX01FFC003FF,gX01FFE007FFO02,gY0IF01FFEO078,gY0MFEO0FC,gY0MFC3OFE,gY07LFC3PF8,gY03LF03PFC,gY01KFE03PFE,h07JF803PFE,hG0IFE003PFC,hH078I03PF,hM03OFE,hM01OFC,hV07,hV06,^FS";
            string sImagemSubmarino = "^FO50,100^GFA,1740,1740,30,S03FC,S0FFE,R01IF,::R01FFE,:R01FC,::::::::P07LF,P0MF8,O01MFC,:O03MFE,::::::J07XF,J0YFC,0703YFET018,1F07gFT03C,7F0gGF8S07C,3F1gGFCS07C,1F1gGFES07C,1F3gGFEJ07F8071FC1FFC38E03FC007F1E03FF,0F3gHFJ0FFC0FBFE1FFC7DF07FE01FFDF07FF8,077gHFI01FFE0JF1FFC7FF0IF83JF0IFC,07gIFI03IF0JF1FFC7FF1IF83JF0IFE,07gIFI07IF8FE3F87E07FE3IFC7F0FF0707E,07gIFI0FE1F8FC1F87E07F87F0FC7E07FI03E,07gIFI0F80FCF80F87E07F07E03E7C03FI01F,0gJFI0JFCF80F87E07E07IFE7C01FI03F,0F3gHFI0JFCF80F87E07C07IFE7C01F07IF,1F3gGFEI0JFCF80F87E07C07IFE7C01F0JF,1F3gGFEI0JF8F80F87E07C07IFC7E03F1JF,BF1gGFCI0F8I0F80F87E07C07CI07F07F1F83F,7F1gGFC0C0FCI0F80F87E07C07EI03JF1F03F,1F0gGF83E07E070F80F87E07C03F0381JF1F07F,0707gF03F07F1F0F80F87FC7C03F87C0FFDF1JF,I03YFE03F03IF0F80F87FC7C01IFC07F9F1JF,J0YFC03F01FFE0F80F83FC7C00IF803E3F0JF,J03WFE003E00FFC0700701FC38007FEJ03F07F9E,K07VF8I0C003F00200200F01I01F8J07E03F04,hO03IFE,hO03IFC,hO03IF8,hP0FFE,hP03F,^FS";
            string sImagemShoptime = "^FO50,100^GFA,1860,1860,30,hL01KFE,hL01KFCK03,hL01KF8K07,hL01KFL07,hL01JFEL0F,hL01JFCK01F,hL01JF8K03F,hL01JFL07F,hL01IFEL0FF,V03gO01IFCK01FF,U01FgO01IF8K03FF,U03F8gN01IFL07FF,U03F8gN01FFEL0IF,U03F8gN01FFCK01IF,U03F8gN01FF8K03IF,U03FgO01FFL07IF,U03FgO01FEL0JF,00FFL03F803JF01CJ07F8J0IFI03FF8I01FCK01JF,03FFE003C1FFE07JF83C0E03FFEI07JF81JFI01F8K03JF,0JF803F7IF07JF83E3E07IF800KFC1JF8001FL07JF,1JF803KF87JF83EFE0JFC03KFC1JFC001EL0KF,3JFC03KF87JF03FFE1JFE03FC7FF01JFE001CK01KF,3F00FE03IF3F803F8003FFC3F807E07E00FEK07F0018K03KF,7E007E03FF00F801FI03FF83F003F07C003EK03F001L07KF,7C003E03F800FC01FI03FE03E001F0FC003FK03FO0LF,FC003F03EI0FC01FI03FC07E001F0F8001FK03FN01KFE,FC001F03EI0FC01FI03F007E001F0F8001FK03FN03KFC,FC001F03EI0FC01FI03E007C001F0F8001FK01FN07KF8,FC001F03EI0FC01FI03E007C001F8F8001FK01FM01LF,FC001F03EI0FC01FI03E007C001F8F8001FK01FM03KFE,FC001F03EI0FC01FI03E007E001F8F8001FK01FM07KFC,LF03EI0FC01FI03E007KF8F8001FI0JFM0LF8,LF03EI0FC01F8003E007KF87C003F001JFL01LF,LF03EI0FC01F8003E007KF07C007E00KFL03KFE,LF03EI0FC01F8003E007KF03F00FE01KFL07KFC,FCK03EI0FC03F8003E007CK03JFC03KFL0LF8,FCK03EI0FC03F8003E007CK01JF803F801FK01LF,FCK03EI0FC03F8003E007CL0JF003F001FK03KFE,FCK03EI0FC03F8003E007CK01IF8003E001FK07KFC,FCK03EI0FC03F8003E007EK01FFJ03E001FK0LF8,FCK03EI0FC01F8003E007EK03FK07E001FJ01LF,FCK03EI0FC01F8003E007EK03EK03E001FJ03KFE,7EK03EI0FC01F8003E003FK03EK03E003FJ07KFC,7FI0403EI0FC01F8003E003FK03EK03F00FFJ0LF8,3FC3FE03EI0FC01FC703E003FC1FE03FCJ03F87FFI01LF,3JFE03EI0FC01IF03E001KF03IFE003KFI03KFE,1JFE03EI0FC00IF03EI0KF03JFC01KFI07KFC,07IFE03EI0F8007FF83EI07IFE00JFE00IF9FI0LF8,01IF002J018003FE03CJ0IFI03JF007FCK01KF8,gT0IF,gU01F8,gV0F8,::::gU03F8,gQ07KF,gQ07JFE,gQ07JFC,gQ03JF8,gR07FF8,^FS";
            string sDirectSEDEX = "^FO600,50^GFA,1920,1920,15,S0IFE,Q03LF,P03NF,O01OFE,O07PFC,N03RF,N0SFC,M01TF,M07TFC,L01UFE,L03VF8,L0WFC,K01WFE,K03XF8,K07XFC,J01YFE,J03gF,J07gF8,J0gGFC,I01gGFE,I03gHF,I03gHF8,I07gHFC,I0gIFC,001gIFE,001gJF,003gJF,007gJF8,007gJFC,00gKFC,01gKFE,:03gLF,:07gLF8,:07gLFC,0gMFC,0gMFE,:1gMFE,1gNF,:3gNF,:3gNF8:7gNF8::7gNFC:::gOFC::::RFCJ07QFCQFM01PFCPFO01OFCOF8P03NFCNFCR0NFCMFES01MFCMF8T07LFCLFEU01LFCLF8V07KFCKFEW01KFCKFCX0KFCKFY03JFCJFEg0JFCJF8g07IFCJFgG03IFCIFEgH0IFCIF8gH07FFCIFgI03FFCFFEgI01FFCFFCgJ0FFCFF8gJ07FCFF8gJ03FCFFgK01FCFEgL0FCFCgL07CF8gL03CFgM03CEgM01CEgN0CCgN04,::::S07FFC,R07JFC,Q03LF8,Q0MFE,P03NF8,P0OFC,O03PF,O07PF8,O0QFC,N01RF,N03RF8,N07RFC,N0SFC,M01SFE,M03TF,M03TF8,M07TF8,M0UFC,:L01UFE,:L03VF,:L03VF8,L07VF8,::L07VFC,L0WFC,::::L0WFE,^FS";
            string sDirectPAC = "^FO550,50^GFA,9216,4608,24,^FS";

            string sResult = "";

            for (int i = 0; i < oAnymarket.docsExternos[0].awbs.Length; i++)
            {
                sTipoEnvio = oAnymarket.docsExternos[0].tpServico;


                string sEtiqueta = @"^XA
^FO30,30^GB750,1150,3^FS
{Imagem}

^FO320,50^BY4,2.0,00^BQN,2,5^FD{qrcode}^FS

{PACSEDEX}

^CF0,25
^FO50,270^FDNota: {Nota}^FS
^FO50,295^FDPedido: {Pedido}^FS
^FO50,320^FDPLP: {PLP}^FS
^FO50,345^FDDtPr: {DtPr}^FS

^FO300,270^FDContrato: {Contrato}^FS

^FO580,250^FDVolume: {Volume}^FS

^BY3,2,150
^FO150,380^BC^FD{Tracking}^FS
^FO50,570^FDRecebedor: _______________________________________________^FS
^FO50,600^FDAssinatura: __________________^FS
^FO400,600^FDDocumento: __________________^FS

^FO30,672^GB750,370,3^FS
^FO30,672^GB200,20,30^FS
^FO40,678^AN,25,25^FR^FDDESTINATARIO^FS
^FO70,710^AN,25,25^FR^FD{NomeDestinatario}^FS
^FO70,740^AN,25,25^FR^FD{EndererecoNumeroDestinatario}^FS
^FO70,770^AN,25,25^FR^FD{BairroDestinatario}^FS
^FO70,800^AN,25,25^FR^FD{ComplementoDestinatario}^FS
^FO70,830^AN,25,25^FR^FD{CidadeEstadoDestinatario}^FS

^BY2,2,150
^FO70,850^BC^FD{Cep}^FS

^FO380,890^AN,25,25^FR^FD{B2WEND}^FS

^FWB
^FO 730,820^AD,27^FH^FD{Rota}^FS 
^FWN

^FO50,1060^AN,25,25^FR^FDRemetente: {NomeRemetente}^FS
^FO50,1090^AN,25,25^FR^FD{EnderecoNumeroRemetente}^FS
^FO50,1120^AN,25,25^FR^FD{ComplementoRemetente}^FS
^FO50,1150^AN,25,25^FR^FD{CEPCidadeEstadoRemetente}^FS
^XZ";
                string sImagem = "";
                string sImagemDirect = "";
                if (sNomeMarketplace == "Lojas Americanas")
                    sImagem = sImagemAmericanas;
                else if (sNomeMarketplace == "Shoptime")
                    sImagem = sImagemShoptime;
                else if (sNomeMarketplace == "Submarino")
                    sImagem = sImagemSubmarino;

                if (sTipoEnvio.ToUpper() == "SEDEX" || sTipoEnvio.ToUpper() == "EXPRESSA")
                    sImagemDirect = sDirectSEDEX;
                else if (sTipoEnvio.ToUpper() == "PAC" || sTipoEnvio.ToUpper() == "NORMAL")
                    sImagemDirect = sDirectPAC;

                sResult += sEtiqueta.Replace("{Nota}", oAnymarket.docsExternos[0].numNotaFiscal)
                                    .Replace("{qrcode}", oAnymarket.docsExternos[0].destinatario.nome + "\r\n" + oAnymarket.docsExternos[0].destinatario.enderecoLogradouro + "-" + oAnymarket.docsExternos[0].destinatario.enderecoNumero + "\r\n" +
                                    oAnymarket.docsExternos[0].destinatario.enderecoBairro + "\r\n" + oAnymarket.docsExternos[0].destinatario.enderecoComplemento +
                                    "\r\n" + oAnymarket.docsExternos[0].destinatario.enderecoCep + "-" + oAnymarket.docsExternos[0].destinatario.enderecoCidade + "/" + oAnymarket.docsExternos[0].destinatario.enderecoUf + "\r\n" +
                                    oAnymarket.docsExternos[0].destinatario.enderecoCep.PadLeft(8, '0'))
                                    .Replace("{Contrato}", oAnymarket.docsExternos[0].cartaoPostagem)
                                   .Replace("{Volume}", oAnymarket.docsExternos[0].awbs[i].posicaoVolume.ToString() + "/" + oAnymarket.docsExternos[0].qtVolumes.ToString())
                                   .Replace("{Imagem}", sImagem)
                                   .Replace("{PACSEDEX}", sImagemDirect)
                                   .Replace("{Direct}", sImagemDirect)
                                   .Replace("{Pedido}", oAnymarket.docsExternos[0].docExterno)
                                   .Replace("{PLP}", oAnymarket.plp.id.ToString())
                                   .Replace("{DtPr}", "")
                                   .Replace("{Tracking}", oAnymarket.docsExternos[0].awbs[i].codigoAwb)
                                   .Replace("{NomeDestinatario}", oAnymarket.docsExternos[0].destinatario.nome)
                                   .Replace("{EndererecoNumeroDestinatario}", oAnymarket.docsExternos[0].destinatario.enderecoLogradouro + "-" + oAnymarket.docsExternos[0].destinatario.enderecoNumero)
                                   .Replace("{BairroDestinatario}", oAnymarket.docsExternos[0].destinatario.enderecoBairro)
                                   .Replace("{ComplementoDestinatario}", oAnymarket.docsExternos[0].destinatario.enderecoComplemento)
                                   .Replace("{CidadeEstadoDestinatario}", oAnymarket.docsExternos[0].destinatario.enderecoCep + "-" + oAnymarket.docsExternos[0].destinatario.enderecoCidade + "/" + oAnymarket.docsExternos[0].destinatario.enderecoUf)
                                   .Replace("{Cep}", oAnymarket.docsExternos[0].destinatario.enderecoCep.PadLeft(8, '0'))
                                   .Replace("{NomeRemetente}", oAnymarket.docsExternos[0].remetente.nome)
                                   .Replace("{EnderecoNumeroRemetente}", oAnymarket.docsExternos[0].remetente.enderecoLogradouro + " Nº: " + oAnymarket.docsExternos[0].remetente.enderecoNumero)
                                   .Replace("{B2WEND}", oAnymarket.docsExternos[0].megaRota)
                                   .Replace("{Rota}", oAnymarket.docsExternos[0].rota)
                                   .Replace("{ComplementoRemetente}", oAnymarket.docsExternos[0].remetente.enderecoBairro)
                                   //.Replace("{ComplementoRemetente}", r["REMETENTE"].ToString())
                                   .Replace("{CEPCidadeEstadoRemetente}", oAnymarket.docsExternos[0].remetente.enderecoCep.PadLeft(8, '0') + "-" + oAnymarket.docsExternos[0].remetente.enderecoCidade + "-" + oAnymarket.docsExternos[0].remetente.enderecoUf);
            }

            return sResult;
        }

        public static void EnviaColetaJadLog(int iCodigoCliente)
        {

            try
            {
                int iPagina = 1;
                int iPorPagina = 50;

                RestClient client = null;
                RestRequest request = null;
                IRestResponse oResposta = null;

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                    request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ClasseFuncoes.ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        break;
                    }
                }

                List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);
                List<FortPlusXML> lstXML = RetornaListaXMLFortPlus();


                //26238


                int? iCodigoTranportadora1 = ClasseFuncoes.RetornaCodigoTranportadora("JadLog Standard");
                int? iCodigoTranportadora2 = ClasseFuncoes.RetornaCodigoTranportadora("JADLOG - FILIAL BH");

                lstPedido = lstPedido.Where(x => x.mvDmaEmissao != null && DateTime.Parse(x.mvDmaEmissao.ToString()) > DateTime.Now.AddDays(-10) && (x.mvIdTransportadora == iCodigoTranportadora1 || x.mvIdTransportadora == iCodigoTranportadora2 || x.mvIdTransportadora == null) && x.mvEntidade == "NFE").ToList();
                List<Pedido> lstXMLTemp = lstPedido.Where(x => x.mvDocto.ToString() == "27013").ToList();

                foreach (Pedido oPedido in lstPedido)
                {
                    try
                    {
                        if (oPedido.mvChaveAcesso.Contains("27013"))
                        {

                        }

                        Console.WriteLine(" Requisição jadlog da nota " + oPedido.mvChaveAcesso);

                        GeraEtiquetaJADLOG(oPedido, iCodigoCliente, lstXML);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch
            {

            }

        }


        public static List<int?> RetornaProdutoKIT(string sSKU, string sMarketplace)
        {
            int? iProduto = RetornaCodigoProdutoFortPlusPorSKU(sSKU);


            IRestResponse oResposta = null;

            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
            {
                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + iProduto.ToString());
                RestRequest request = new RestRequest(Method.GET);
                request.AddHeader("Cache-Control", "no-cache");
                request.AddHeader("Accept", "*/*");
                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                request.AddHeader("Content-Type", "application/json");
                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                oResposta = client.Execute(request);

                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                {
                    ClasseFuncoes.ConectaForteplus(5);
                }
            }

            List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
            float? eValorTotalComposicao = 0;
            List<int?> lstSKU = new List<int?>();

            foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
            {
                ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();
                List<ProdutoComplemento> oProdutoComplementoComposicao = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(ClasseFuncoes.RetornaProdutoComplementoFortPlus(oFormaPagamento.pcIdProdutoComposicao.ToString()).Content);
                foreach (ProdutoComplemento oPC in oProdutoComplementoComposicao)
                {
                    string sMarketPlace = ClasseFuncoes.RetornaNomeGlobalMK("MK", oPC.cmIdMarketPlace);
                    if (sMarketPlace.Contains(sMarketplace))
                    {
                        lstSKU.Add(oPC.cmIdProduto);
                    }
                }
            }

            return lstSKU;
        }


        public static void RecebePedidoEnviaB2wEnviaFortPlus(int iCodigoCliente)
        {
            try
            {
                RestRequest oRequest = null;
                IRestResponse oResposta = null;
                RestClient client = null;
                RestRequest request = new RestRequest();
                DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                //List<FortPlusXML> lstXML = RetornaListaXMLFortPlus();
                //lstXML = lstXML.Where(x => x.trDmaEmissao > DateTime.Now.AddDays(-7)).ToList();

                List<ProdutoFortePlus> lstProdutoGerais = RetornaListProdutosFortPlus();


                string sKey = d.Rows[0]["KEYB2W"].ToString();
                string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                string sAccount = "0MDxaksT8d";
                d.Dispose();

                int iPagina = 1;
                int iPorPagina = 50;

                //lstStatus.Add("payment_received");
                //lstStatus.Add("order_invoiced");

                while (true)
                {
                    oResposta = null;
                    while (oResposta == null)
                    {
                        client = new RestClient("https://api.skyhub.com.br/orders?filters[statuses][]=order_invoiced&page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());

                        //client = new RestClient("https://api.skyhub.com.br/queues/orders");
                        //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                        //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
                        oRequest = new RestRequest(Method.GET);
                        oRequest.AddHeader("cache-control", "no-cache");
                        oRequest.AddHeader("Accept", "application/json");
                        oRequest.AddHeader("Content-Type", "application/json");
                        oRequest.AddHeader("x-Api-Key", sKey);
                        oRequest.AddHeader("X-User-Email", sUsuario);
                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                        oResposta = client.Execute(oRequest);

                        if (oResposta.StatusCode == HttpStatusCode.BadGateway || oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError || oResposta.StatusCode == 0)
                        {
                            oResposta = null;
                        }
                    }
                    Thread.Sleep(2000);
                    #region etiqueta b2w
                    if (oResposta.Content == "Account  not found")
                    {
                        continue;
                    }
                    if (oResposta.Content.Contains("504 Gateway Time-ou"))
                    {
                        continue;
                    }

                    B2WPedidos lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPedidos>(oResposta.Content);
                    if (lstPedido == null || lstPedido.orders == null || lstPedido.orders.Length == 0)
                    {
                        break;
                    }


                    bool lAtualiza = false;
                    foreach (B2WPedido oPedido in lstPedido.orders)
                    {
                        if (oPedido.code.Contains("351926357602"))
                        {


                        }

                        //string sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + oPedido.code.ToString().Trim() + "' AND MARKETPLACE LIKE '%B2W%'";
                        //d = ClasseParametros.ConsultaBancoMysql(sSql);
                        //if (d.Rows.Count > 0)
                        //{
                        //    continue;
                        //}




                        //if (oPedido.status.type.ToUpper().Trim() == "APPROVED")
                        if (oPedido.status.type.ToUpper().Trim() == "APPROVED")
                        {
                            string sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + oPedido.code.ToString().Trim() + "' AND MARKETPLACE LIKE '%B2W%'";
                            d = ClasseParametros.ConsultaBancoMysql(sSql);
                            if (d.Rows.Count == 0)
                            {
                                string sPack = "";
                                if (oPedido.code != null)
                                    sPack = oPedido.code.ToString();

                                sSql = "INSERT INTO VENDAMARKETPLACE(ID,STATUS,MARKETPLACE, DATA,STATUSMENSAGEM,PACKID,USERID,EMAILML,PEDIDOML,SELLERID) " +
                                    "VALUES('" + oPedido.code.ToString().Trim() + "',0,'B2W - " + oPedido.code.Split('-')[0] + "' ,CURDATE(),0,'" + sPack + "', " +
                                    "'" + iCodigoCliente.ToString() + "','" + oPedido.customer.email + "','" + oPedido.code + "','2ELETRO')";
                                ClasseParametros.ExecutabancoMySql(sSql);
                            }
                        }
                        else
                        {
                            // Atualiza pedido para MAGALU
                            //Thread.Sleep(1000);
                            //#region Marca pedido como processado no queue

                            //string sId = "[{\"Id\": \"" + oPedido.IdQueue.ToString() + "\"}]";

                            //client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/OrderQueue");
                            //request = new RestRequest(Method.PUT);
                            //request.AddHeader("cache-control", "no-cache");
                            //request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                            //request.AddParameter("application/json", sId, ParameterType.RequestBody);

                            //oResposta = client.Execute(request);

                            //#endregion
                        }
                    }


                    foreach (B2WPedido oPedido in lstPedido.orders)
                    {
                        if (oPedido.code.Contains("351926357602"))
                        {

                        }

                        try
                        {
                            //if (oPedido.shipping_method == "Correios PAC" || oPedido.shipping_method == "Planilha")
                            //{
                            //    Pedido oPedidoFortePlus = RetornaPedidoFortePlusPorIdExterno(oPedido.code);
                            //    if (oPedidoFortePlus != null)
                            //    {
                            //        GeraEtiquetaJADLOG(oPedidoFortePlus, iCodigoCliente, lstXML);
                            //    }

                            //    continue;
                            //}

                            //if (oPedido.invoices[0].key == "32200634036601000338550010000149041001217216")
                            //{
                            //    //Pedido oPedidoFortePlus = RetornaPedidoFortePlusPorIdExterno(oPedido.code);

                            //    //GeraEtiquetaJADLOG(oPedidoFortePlus);
                            //}

                            if (oPedido.code.Contains("275530927201"))
                            {

                            }


                            int iOffset = 0;
                            int ilimit = 50;

                            //List<Result> lstPedidosMercadoLivre = new List<Result>();
                            bool lContinua = true;

                            Console.WriteLine(" Integrando pedido " + oPedido.code);
                            if (oPedido.code.ToString().Trim() == "2334214096")
                            {

                            }

                            string sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + oPedido.code.ToString().Trim() + "' AND STATUS = 0 AND MARKETPLACE LIKE '%B2W%'";
                            d = ClasseParametros.ConsultaBancoMysql(sSql);
                            if (d.Rows.Count > 0)
                            {
                                if (oPedido.status.type.ToUpper().Trim() == "APPROVED")
                                {
                                    ClienteFortPlus oCliente = ClasseFuncoes.CadastraClienteB2WFortPlus(oPedido);
                                    string s = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);

                                    if (oCliente == null)
                                    {
                                        continue;
                                    }


                                    int iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");
                                    ClasseFuncoes.CarregaFiliais("34.036.601/0003-38 - 2ELETRO VAREJISTA");

                                    //34036601000257 - 2ELETRO ATACADISTA	
                                    //34036601000338 - 2ELETRO VAREJISTA

                                    string sProduto = "";
                                    //try
                                    //{

                                    //    foreach (Item1 oItem in oPedido.items)
                                    //    {
                                    //        string sLast = oItem.IdSku.Substring(oItem.IdSku.Length - 5);
                                    //        string sInicio = oItem.IdSku.Replace(sLast, "");
                                    //        string sProdutoTemp = "";

                                    //        if (sLast.Substring(sLast.Length - 3, 3) == "VAR")
                                    //        {
                                    //            sLast = sLast.Replace("VAR", "");

                                    //            string[] aProduto = sLast.Split('G');
                                    //            sProdutoTemp = sInicio + aProduto[0];
                                    //        }
                                    //        else
                                    //        {
                                    //            sProdutoTemp = oItem.IdSku;
                                    //        }

                                    //        if (sProdutoTemp.Contains("KIT"))
                                    //        {

                                    //            ProdutoComplemento oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(sProdutoTemp);
                                    //            ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);

                                    //            oResposta = null;

                                    //            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                    //            {
                                    //                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + oProduto.id.ToString());
                                    //                request = new RestRequest(Method.GET);
                                    //                request.AddHeader("Cache-Control", "no-cache");
                                    //                request.AddHeader("Accept", "*/*");
                                    //                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                    //                request.AddHeader("Content-Type", "application/json");
                                    //                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                    //                oResposta = client.Execute(request);

                                    //                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                    //                {
                                    //                    ClasseFuncoes.ConectaForteplus(5);
                                    //                }
                                    //            }

                                    //            List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
                                    //            float? eValorTotalComposicao = 0;

                                    //            foreach (FortPlusProdutoComposicao oProdutoComposicao in oListFormaPagamento)
                                    //            {
                                    //                ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();
                                    //                int iLocalEstoque34 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "34");
                                    //                double eQtdEstoque = ClasseFuncoes.RetornaSeTemEstoque(oProdutoComposicao.pcIdProdutoComposicao.ToString(), iLocalEstoque34);

                                    //                if (oItem.Quantity > eQtdEstoque)
                                    //                {
                                    //                    iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");
                                    //                    break;
                                    //                }
                                    //                else
                                    //                {
                                    //                    iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "32");
                                    //                }
                                    //            }
                                    //        }
                                    //        else
                                    //        {
                                    //            int iLocalEstoque34 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "34");
                                    //            double eQtdEstoque = ClasseFuncoes.RetornaSeTemEstoque(sProdutoTemp, iLocalEstoque34);

                                    //            if (oItem.qty > eQtdEstoque)
                                    //            {
                                    //                iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");
                                    //                break;
                                    //            }
                                    //            else
                                    //            {
                                    //                if (sProdutoTemp == "MAQSIG44" || sProdutoTemp == "MAQSIG43")
                                    //                    iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "32");
                                    //                else
                                    //                    iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");
                                    //            }
                                    //        }
                                    //    }
                                    //}
                                    //catch (Exception ex)
                                    //{
                                    //    return;
                                    //}

                                    Pedido oPedidoFortPlus = new Pedido();

                                    Guid oGuid = Guid.NewGuid();
                                    oPedidoFortPlus.id = 0;
                                    oPedidoFortPlus.mvDocto = 0;
                                    oPedidoFortPlus.mvIdPessoa = int.Parse(oCliente.id);
                                    string sCNPJ = "";
                                    oPedidoFortPlus.mvIdVendedor = ClasseFuncoes.RetornaVendedorFortPlus("B2W");
                                    oPedidoFortPlus.mvIdSerie = ClasseFuncoes.RetornaCodigoGlobal("SR", "1");
                                    oPedidoFortPlus.mvIdModelo = ClasseFuncoes.RetornaCodigoGlobal("MD", "55");
                                    oPedidoFortPlus.mvTipoMovimento = "1";
                                    oPedidoFortPlus.mvTipoPedido = "P";
                                    oPedidoFortPlus.mvIdTipoDocumento = ClasseFuncoes.RetornaCodigoGlobal("TD", "REC");

                                    oPedidoFortPlus.mvIdTipoFrete = ClasseFuncoes.RetornaCodigoGlobal("TF", "9");
                                    if (float.Parse(oPedido.shipping_cost.ToString()) > 0)
                                    {
                                        oPedidoFortPlus.mvIdTipoFrete = ClasseFuncoes.RetornaCodigoGlobal("TF", "1");
                                    }

                                    oPedidoFortPlus.mvPreNota = "N";
                                    oPedidoFortPlus.mvFinNf = "1";
                                    oPedidoFortPlus.mvPresenca = ClasseFuncoes.RetornaCodigoParametro("_FPS_NFE_PRESENCA");
                                    oPedidoFortPlus.mvIdNatureza = ClasseFuncoes.RetornaCodigoGlobal("NO", "01");
                                    oPedidoFortPlus.mvIdParent = null;
                                    oPedidoFortPlus.idFilial = ClasseParametros.iFilial;

                                    if (oPedido.shipping_carrier == "Courier")
                                    {
                                        oPedidoFortPlus.mvIdTransportadora = ClasseFuncoes.RetornaTransportadorFortPlus("Courier");
                                    }
                                    else if (oPedido.shipping_carrier == "PAC" || oPedido.shipping_carrier == "Correios PAC")
                                    {
                                        oPedidoFortPlus.mvIdTransportadora = ClasseFuncoes.RetornaTransportadorFortPlus("PAC");

                                    }
                                    else if (oPedido.shipping_carrier == "JadLog Standard" || oPedido.shipping_carrier == "")
                                    {
                                        oPedidoFortPlus.mvIdTransportadora = ClasseFuncoes.RetornaTransportadorFortPlus("JadLog Standard");
                                    }
                                    else if (oPedido.shipping_carrier == "Fedex Standard")
                                    {
                                        oPedidoFortPlus.mvIdTransportadora = ClasseFuncoes.RetornaTransportadorFortPlus("RAPIDAO COMETA");
                                    }
                                    else
                                    {
                                        EnviaMensagemTelegramAsync("Pedido B2W não cadastrado pois o transportador está com erro!\n" + oPedido.customer.name + "\nPedido: " + oPedido.code.ToString(), "0,1", "Pedido não cadastrado", oPedido.code.ToString().Trim());

                                        continue;
                                    }



                                    int? eTotal = 0;
                                    float? eTotalPago = 0;
                                    float? eTotalValor = 0;
                                    float? eTotalDesconto = float.Parse(oPedido.shipping_cost.ToString());

                                    foreach (Item1 o in oPedido.items)
                                    {
                                        eTotal += o.qty;
                                        string sPreco = o.original_price.ToString();

                                        eTotalValor += (float)(o.qty * float.Parse(sPreco));
                                    }


                                    s = Newtonsoft.Json.JsonConvert.SerializeObject(oPedidoFortPlus);
                                    //List<Payment> lstPagamento = oPedido.payment.OfType<Payment>().ToList();
                                    //foreach (Payment oPagamento in lstPagamento)
                                    //{
                                    //    eTotalPago += (float)oPagamento.Amount;
                                    //}

                                    oPedidoFortPlus.mvQuantidade = eTotal;
                                    oPedidoFortPlus.mvPesoBruto = 0;
                                    oPedidoFortPlus.mvPesoLiquido = 0;

                                    oPedidoFortPlus.mvTpAmb = "1";
                                    oPedidoFortPlus.mvTpEmis = "1";
                                    oPedidoFortPlus.mvStatus = "0";
                                    oPedidoFortPlus.mvEntidade = "PDV";
                                    oPedidoFortPlus.ativo = "S";
                                    oPedidoFortPlus.mvGuid = oGuid.ToString();
                                    oPedidoFortPlus.dmaInclusao = DateTime.Now;
                                    oPedidoFortPlus.dmaAlteracao = DateTime.Now;
                                    oPedidoFortPlus.mvDmaEmissao = DateTime.Now;
                                    oPedidoFortPlus.mvDmaEntradaSaida = DateTime.Now;
                                    oPedidoFortPlus.mvValorOutrasDespesasAcessoria = 0;//float.Parse(oPedido.seller_shipping_cost.ToString());

                                    oPedidoFortPlus.mvIdExterno = oPedido.code;
                                    if (oPedido.shipping_cost.ToString() != "")
                                        oPedidoFortPlus.mvValorFrete = float.Parse(oPedido.shipping_cost.ToString());
                                    oPedidoFortPlus.mvValorDesconto = 0;

                                    oPedidoFortPlus.mvValorTotalProduto = eTotalValor;
                                    //oPedidoFortPlus.valo = oPedido.total_amount;
                                    oPedidoFortPlus.mvValorTotal = oPedido.total_ordered;
                                    //mais de uma unidade
                                    //04_02_2020
                                    //if (oPedido.CustomerPfCpf != null)
                                    //{
                                    //    oPedidoFortPlus.mvValorTotalProduto = eTotalValor - eTotalDesconto;
                                    //    //oPedidoFortPlus.valo = oPedido.total_amount;
                                    //    oPedidoFortPlus.mvValorTotal = eTotalPago - eTotalDesconto;
                                    //}


                                    oPedidoFortPlus.mvVersao = ClasseFuncoes.RetornaCodigoParametro("_FPS_NFE_VERSAO");

                                    //2322426297

                                    oResposta = null;

                                    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                    {
                                        client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + oPedido.code.ToString());
                                        request = new RestRequest(Method.GET);
                                        request.AddHeader("Cache-Control", "no-cache");
                                        request.AddHeader("Accept", "*/*");
                                        request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                        request.AddHeader("Content-Type", "application/json");
                                        request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                        oResposta = client.Execute(request);

                                        if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaForteplus(5);
                                        }
                                        else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                                        {
                                            break;
                                        }
                                        else if (oResposta.StatusCode == System.Net.HttpStatusCode.OK)
                                        {

                                            oPedidoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);
                                            break;
                                        }

                                    }

                                    if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                                        oPedidoFortPlus = ClasseFuncoes.CriaPedidoFortPlus(oPedidoFortPlus);

                                    //foreach (Payment oPagamento in lstPagamento)
                                    //{

                                    //}


                                    List<ProdutoFortePlus> lstProduto = new List<ProdutoFortePlus>();
                                    float? eValorFreteProduto = oPedidoFortPlus.mvValorFrete / oPedido.items.Length;

                                    foreach (Item1 o in oPedido.items)
                                    {

                                        string sLast = o.product_id.Substring(o.product_id.Length - 5);
                                        string sInicio = o.product_id.Replace(sLast, "");
                                        sProduto = "";
                                        if (sLast.Substring(sLast.Length - 3, 3) == "VAR")
                                        {
                                            sLast = sLast.Replace("VAR", "");

                                            string[] aProduto = sLast.Split('G');
                                            sProduto = sInicio + aProduto[0];
                                        }
                                        else
                                        {
                                            sProduto = o.product_id;
                                        }


                                        ProdutoComplemento oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(sProduto);
                                        ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);

                                        if (oProduto.prIdParent != null)
                                        {
                                            List<ProdutoFortePlus> oProdutoTemp = lstProdutoGerais.Where(x => x.prCodigo != null && x.prCodigo == sProduto).ToList();
                                            List<ProdutoFortePlus> oProdutoParent = lstProdutoGerais.Where(x => x.id == oProdutoTemp[0].prIdParent).ToList();
                                            oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(oProdutoParent[0].prCodigo);

                                            //ProdutoFortePlus oProdutoTemp = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(sProduto).Content);
                                        }

                                        List<PedidoItemFortPlus> lstPedidoItem = RetornaItensPedido(oPedidoFortPlus.id);

                                        if (oProduto.prCodigo.Substring(0, 3).Trim() == "KIT")
                                        {
                                            List<int?> lstSKU = RetornaProdutoKIT(oProduto.prCodigo, "B2W");
                                            lstPedidoItem = lstPedidoItem.Where(x => x.mtIdProduto == lstSKU[0]).ToList();
                                            if (lstPedidoItem.Count > 0)
                                            {
                                                continue;
                                            }

                                        }
                                        else

                                        {
                                            lstPedidoItem = lstPedidoItem.Where(x => x.mtIdProduto == oProduto.id).ToList();
                                            if (lstPedidoItem.Count > 0)
                                            {
                                                continue;
                                            }
                                        }




                                        bool lTirarTarifa = oProduto.prPercentComissao == 1;

                                        if (oProduto.prCodigo.Substring(0, 3).Trim() == "KIT")
                                        {
                                            oResposta = null;

                                            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                            {
                                                client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + oProduto.id.ToString());
                                                request = new RestRequest(Method.GET);
                                                request.AddHeader("Cache-Control", "no-cache");
                                                request.AddHeader("Accept", "*/*");
                                                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                                request.AddHeader("Content-Type", "application/json");
                                                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                                oResposta = client.Execute(request);

                                                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                                {
                                                    ClasseFuncoes.ConectaForteplus(5);
                                                }
                                            }

                                            List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
                                            float? eValorTotalComposicao = 0;

                                            foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
                                            {
                                                ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();
                                                List<ProdutoComplemento> oProdutoComplementoComposicao = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(ClasseFuncoes.RetornaProdutoComplementoFortPlus(oFormaPagamento.pcIdProdutoComposicao.ToString()).Content);
                                                foreach (ProdutoComplemento oPC in oProdutoComplementoComposicao)
                                                {
                                                    string sMarketPlace = ClasseFuncoes.RetornaNomeGlobalMK("MK", oPC.cmIdMarketPlace);
                                                    if (sMarketPlace.Contains("B2W"))
                                                    {
                                                        oProdutoComplementoUsar = oPC;
                                                        break;
                                                    }
                                                }
                                                eValorTotalComposicao += oProdutoComplementoUsar.cmPrecoDePor;
                                            }

                                            foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
                                            {
                                                PedidoItemFortPlus oItemPedido = new PedidoItemFortPlus();
                                                oItemPedido.id = 0;
                                                oItemPedido.mtIdNfOrigem = null;
                                                oItemPedido.mtIdMovto = oPedidoFortPlus.id;
                                                lstProduto.Add(oProduto);

                                                float? eTotalSemTarifa = eTotalValor - eTotalDesconto;
                                                double? eQuantidade = o.qty * oFormaPagamento.pcQtde;
                                                float? eQtd = float.Parse(eQuantidade.ToString());
                                                List<ProdutoComplemento> oProdutoComplementoComposicao = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(ClasseFuncoes.RetornaProdutoComplementoFortPlus(oFormaPagamento.pcIdProdutoComposicao.ToString()).Content);
                                                ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();


                                                foreach (ProdutoComplemento oPC in oProdutoComplementoComposicao)
                                                {
                                                    string sMarketPlace = ClasseFuncoes.RetornaNomeGlobalMK("MK", oPC.cmIdMarketPlace);
                                                    if (sMarketPlace.Contains("B2W"))
                                                    {
                                                        oProdutoComplementoUsar = oPC;
                                                        break;
                                                    }
                                                }
                                                float? ePercentual = (oProdutoComplementoUsar.cmPrecoDePor * 100) / eValorTotalComposicao;
                                                double? eValorProduto = (eTotalValor * ePercentual) / 100;

                                                oItemPedido.mtIdProduto = oFormaPagamento.pcIdProdutoComposicao;
                                                oItemPedido.mtQtde = eQtd;
                                                oItemPedido.mtValorUnitario = float.Parse(eValorProduto.ToString());
                                                oItemPedido.mtValorTotal = oItemPedido.mtValorUnitario * eQtd;

                                                //////mais de uma unidade
                                                //////04_02_2020
                                                //if (oPedido.CustomerPfCpf != "CPF")
                                                //{
                                                //    ePercentual = (oProdutoComplementoUsar.cmPrecoDePor * 100) / eValorTotalComposicao;
                                                //    eValorProduto = (eTotalSemTarifa * ePercentual) / 100;

                                                //    if (oListFormaPagamento.Count == 1)
                                                //    {
                                                //        eValorProduto = eTotalSemTarifa / eQtd;
                                                //    }

                                                //    oItemPedido.mtValorUnitario = float.Parse(eValorProduto.ToString());
                                                //    oItemPedido.mtValorTotal = oItemPedido.mtValorUnitario * eQtd;
                                                //}

                                                oItemPedido.mtValorDesconto = 0;
                                                oItemPedido.mtValorDescontoRateio = 0;
                                                oItemPedido.mtPercDesconto = 0;
                                                oItemPedido.mtValor = 0;
                                                oItemPedido.mtValorFrete = eValorFreteProduto;
                                                oItemPedido.mtValorSeguro = 0;
                                                oItemPedido.mtValorOutrasDespesas = 0;
                                                oItemPedido.mtCustoMedio = null;
                                                oItemPedido.mtValorTabela = oProdutoComplementoUsar.cmPrecoVenda;
                                                oItemPedido.mtPesoBruto = null;
                                                oItemPedido.mtPesoLiquido = null;
                                                oItemPedido.mtIdCfop = null;
                                                oItemPedido.mtIdNcm = oProduto.prIdNcm;

                                                oItemPedido.mtIdLocalEstoque = iLocalEstoque;

                                                oItemPedido.mtValorAproxImposto = null;
                                                oItemPedido.mtValorTributoEstadual = null;
                                                oItemPedido.mtValorTributoImportado = null;
                                                oItemPedido.mtValorTributoMunicipal = null;
                                                oItemPedido.mtValorTributoNacional = null;
                                                oItemPedido.mtPercEstadual = null;
                                                oItemPedido.mtPercImportado = null;
                                                oItemPedido.mtPercMunicipal = null;
                                                oItemPedido.mtPercNacional = null;
                                                oItemPedido.mtVersaoIbpt = "";
                                                oItemPedido.mtIdUnidade = oProduto.prIdUnidadePrincipal;
                                                oItemPedido.mtOrdemCompra = "";
                                                oItemPedido.mtOrdemItemCompra = "";
                                                oItemPedido.mtReferencia = "";
                                                oItemPedido.mtEntidade = "";
                                                oItemPedido.mtModalidadeBcIcms = "";
                                                oItemPedido.mtIdCstIcms = null;
                                                oItemPedido.mtBaseIcms = null;
                                                oItemPedido.mtAliquotaIcms = null;
                                                oItemPedido.mtPercentReducaoBaseIcms = null;
                                                oItemPedido.mtValorIcms = null;
                                                oItemPedido.mtValorReducaoIcms = null;
                                                oItemPedido.mtAliquotaIcmsCr = null;
                                                oItemPedido.mtValorIcmsCr = null;
                                                oItemPedido.mtBaseIcmsCr = null;
                                                oItemPedido.mtModalidadeBcIcmsSt = "";
                                                oItemPedido.mtPercentReducaoBaseIcmsSt = null;
                                                oItemPedido.mtAliquotaIcmsSt = null;
                                                oItemPedido.mtAliquotaMva = null;
                                                oItemPedido.mtValorIcmsSt = null;
                                                oItemPedido.mtValorReducaoIcmsSt = null;
                                                oItemPedido.mtBaseIcmsSt = null;
                                                oItemPedido.mtIdCstPis = null;
                                                oItemPedido.mtBasePis = null;
                                                oItemPedido.mtPercentReducaoBasePis = null;
                                                oItemPedido.mtAliquotaPis = null;
                                                oItemPedido.mtValorPis = null;
                                                oItemPedido.mtIdCstCofins = null;
                                                oItemPedido.mtBaseCofins = null;
                                                oItemPedido.mtPercentReducaoBaseCofins = null;
                                                oItemPedido.mtAliquotaCofins = null;
                                                oItemPedido.mtValorCofins = null;
                                                oItemPedido.mtIdCstIpi = null;
                                                oItemPedido.mtBaseIpi = null;
                                                oItemPedido.mtPercentReducaoBaseIpi = null;
                                                oItemPedido.mtAliquotaIpi = null;
                                                oItemPedido.mtValorIpi = null;
                                                oItemPedido.mtIdCstIi = null;
                                                oItemPedido.mtBaseIi = null;
                                                oItemPedido.mtPercentReducaoBaseIi = null;
                                                oItemPedido.mtValorIi = null;
                                                oItemPedido.mtIdCstIssqn = null;
                                                oItemPedido.mtBaseIssqn = null;
                                                oItemPedido.mtPercentReducaoBaseIssqn = null;
                                                oItemPedido.mtValorIssqn = null;
                                                //oItemPedido.mtAliquotaInterEstadual = null;
                                                oItemPedido.mtBaseDifal = null;
                                                oItemPedido.mtAliquotaDifal = null;
                                                oItemPedido.mtValorDifal = null;
                                                oItemPedido.mtBaseFecp = null;
                                                oItemPedido.mtAliquotaFecp = null;
                                                oItemPedido.mtValorFecp = null;
                                                oItemPedido.mtBaseFecpSt = null;
                                                oItemPedido.mtAliquotaFecpSt = null;
                                                oItemPedido.mtValorFecpSt = null;
                                                oItemPedido.mtBaseFecpStRet = null;
                                                oItemPedido.mtAliquotaFecpStRet = null;
                                                oItemPedido.mtValorFecpStRet = null;
                                                oItemPedido.mtValorIcmsPartUfOrigem = null;
                                                oItemPedido.mtValorIcmsPartUfDestino = null;
                                                oItemPedido.mtAliquotaIcmsPartUfOrigem = null;
                                                oItemPedido.mtAliquotaIcmsPartUfDestino = null;
                                                oItemPedido.mtBaseIcmsPartUfOrigem = null;
                                                oItemPedido.mtBaseIcmsPartUfDestino = null;
                                                oItemPedido.mtBaseCalculoKardex = null;
                                                oItemPedido.mtPercentComissao = null;
                                                oItemPedido.mtGuid = oPedidoFortPlus.mvGuid;
                                                oItemPedido.mtObservacao = "";
                                                oItemPedido.mtDmaItem = DateTime.Now;
                                                oItemPedido.idFilial = ClasseParametros.iFilial;
                                                oItemPedido.idIncluidoPor = null;
                                                oItemPedido.idAltaradoPor = null;
                                                oItemPedido.dmaInclusao = DateTime.Now;
                                                oItemPedido.dmaAlteracao = DateTime.Now;
                                                oItemPedido.ativo = "S";
                                                oItemPedido.mtIdCest = oProduto.prIdCest;
                                                oItemPedido.mtIdParent = null;
                                                oItemPedido.mtQtdeLiberada = null;
                                                oItemPedido.mtQtdeSaldo = null;
                                                oItemPedido.mtVariacao = "";
                                                oItemPedido.mtPrecoDePor = null;
                                                oItemPedido.mtAjCusto = "";
                                                oItemPedido.mtCEnqIpi = "";
                                                oItemPedido.mtAgregaTotalFecp = "";
                                                oItemPedido.mtIdLote = null;
                                                oItemPedido.mtLote = "";
                                                oItemPedido.mtDmaLote = DateTime.Now;
                                                s = Newtonsoft.Json.JsonConvert.SerializeObject(oItemPedido);
                                                ClasseFuncoes.InseriItensPedidoFortPlus(oItemPedido);

                                            }
                                        }
                                        else
                                        {

                                            PedidoItemFortPlus oItemPedido = new PedidoItemFortPlus();
                                            oItemPedido.id = 0;
                                            oItemPedido.mtIdNfOrigem = null;
                                            oItemPedido.mtIdMovto = oPedidoFortPlus.id;
                                            oItemPedido.mtValorFrete = eValorFreteProduto;

                                            lstProduto.Add(oProduto);

                                            oItemPedido.mtIdProduto = oProdutoComplemento.cmIdProduto;
                                            oItemPedido.mtQtde = o.qty;

                                            string sPreco = o.original_price.ToString();

                                            oItemPedido.mtValorUnitario = float.Parse(sPreco);
                                            oItemPedido.mtValorTotal = (float)(o.qty * float.Parse(sPreco));

                                            //mais de uma unidade
                                            //04_02_2020
                                            //float? eTotalSemTarifa = eTotalValor - eTotalDesconto;

                                            //if (oPedido.CustomerPfCpf != null)
                                            //{
                                            //    float? eValorProduto = eTotalSemTarifa / o.Quantity;
                                            //    oItemPedido.mtIdProduto = oProdutoComplemento.cmIdProduto;
                                            //    oItemPedido.mtQtde = o.Quantity;
                                            //    oItemPedido.mtValorUnitario = eValorProduto;
                                            //    oItemPedido.mtValorTotal = eValorProduto * o.Quantity;
                                            //}

                                            oItemPedido.mtValorDesconto = 0;
                                            oItemPedido.mtValorDescontoRateio = 0;
                                            oItemPedido.mtPercDesconto = 0;
                                            oItemPedido.mtValor = 0;
                                            oItemPedido.mtValorFrete = eValorFreteProduto;
                                            oItemPedido.mtValorSeguro = 0;
                                            oItemPedido.mtValorOutrasDespesas = 0;
                                            oItemPedido.mtCustoMedio = null;
                                            oItemPedido.mtValorTabela = oProdutoComplemento.cmPrecoVenda;
                                            oItemPedido.mtPesoBruto = null;
                                            oItemPedido.mtPesoLiquido = null;
                                            oItemPedido.mtIdCfop = null;
                                            oItemPedido.mtIdNcm = oProduto.prIdNcm;

                                            oItemPedido.mtIdLocalEstoque = iLocalEstoque;

                                            oItemPedido.mtValorAproxImposto = null;
                                            oItemPedido.mtValorTributoEstadual = null;
                                            oItemPedido.mtValorTributoImportado = null;
                                            oItemPedido.mtValorTributoMunicipal = null;
                                            oItemPedido.mtValorTributoNacional = null;
                                            oItemPedido.mtPercEstadual = null;
                                            oItemPedido.mtPercImportado = null;
                                            oItemPedido.mtPercMunicipal = null;
                                            oItemPedido.mtPercNacional = null;
                                            oItemPedido.mtVersaoIbpt = "";
                                            oItemPedido.mtIdUnidade = oProduto.prIdUnidadePrincipal;
                                            oItemPedido.mtOrdemCompra = "";
                                            oItemPedido.mtOrdemItemCompra = "";
                                            oItemPedido.mtReferencia = "";
                                            oItemPedido.mtEntidade = "";
                                            oItemPedido.mtModalidadeBcIcms = "";
                                            oItemPedido.mtIdCstIcms = null;
                                            oItemPedido.mtBaseIcms = null;
                                            oItemPedido.mtAliquotaIcms = null;
                                            oItemPedido.mtPercentReducaoBaseIcms = null;
                                            oItemPedido.mtValorIcms = null;
                                            oItemPedido.mtValorReducaoIcms = null;
                                            oItemPedido.mtAliquotaIcmsCr = null;
                                            oItemPedido.mtValorIcmsCr = null;
                                            oItemPedido.mtBaseIcmsCr = null;
                                            oItemPedido.mtModalidadeBcIcmsSt = "";
                                            oItemPedido.mtPercentReducaoBaseIcmsSt = null;
                                            oItemPedido.mtAliquotaIcmsSt = null;
                                            oItemPedido.mtAliquotaMva = null;
                                            oItemPedido.mtValorIcmsSt = null;
                                            oItemPedido.mtValorReducaoIcmsSt = null;
                                            oItemPedido.mtBaseIcmsSt = null;
                                            oItemPedido.mtIdCstPis = null;
                                            oItemPedido.mtBasePis = null;
                                            oItemPedido.mtPercentReducaoBasePis = null;
                                            oItemPedido.mtAliquotaPis = null;
                                            oItemPedido.mtValorPis = null;
                                            oItemPedido.mtIdCstCofins = null;
                                            oItemPedido.mtBaseCofins = null;
                                            oItemPedido.mtPercentReducaoBaseCofins = null;
                                            oItemPedido.mtAliquotaCofins = null;
                                            oItemPedido.mtValorCofins = null;
                                            oItemPedido.mtIdCstIpi = null;
                                            oItemPedido.mtBaseIpi = null;
                                            oItemPedido.mtPercentReducaoBaseIpi = null;
                                            oItemPedido.mtAliquotaIpi = null;
                                            oItemPedido.mtValorIpi = null;
                                            oItemPedido.mtIdCstIi = null;
                                            oItemPedido.mtBaseIi = null;
                                            oItemPedido.mtPercentReducaoBaseIi = null;
                                            oItemPedido.mtValorIi = null;
                                            oItemPedido.mtIdCstIssqn = null;
                                            oItemPedido.mtBaseIssqn = null;
                                            oItemPedido.mtPercentReducaoBaseIssqn = null;
                                            oItemPedido.mtValorIssqn = null;
                                            //oItemPedido.mtAliquotaInterEstadual = null;
                                            oItemPedido.mtBaseDifal = null;
                                            oItemPedido.mtAliquotaDifal = null;
                                            oItemPedido.mtValorDifal = null;
                                            oItemPedido.mtBaseFecp = null;
                                            oItemPedido.mtAliquotaFecp = null;
                                            oItemPedido.mtValorFecp = null;
                                            oItemPedido.mtBaseFecpSt = null;
                                            oItemPedido.mtAliquotaFecpSt = null;
                                            oItemPedido.mtValorFecpSt = null;
                                            oItemPedido.mtBaseFecpStRet = null;
                                            oItemPedido.mtAliquotaFecpStRet = null;
                                            oItemPedido.mtValorFecpStRet = null;
                                            oItemPedido.mtValorIcmsPartUfOrigem = null;
                                            oItemPedido.mtValorIcmsPartUfDestino = null;
                                            oItemPedido.mtAliquotaIcmsPartUfOrigem = null;
                                            oItemPedido.mtAliquotaIcmsPartUfDestino = null;
                                            oItemPedido.mtBaseIcmsPartUfOrigem = null;
                                            oItemPedido.mtBaseIcmsPartUfDestino = null;
                                            oItemPedido.mtBaseCalculoKardex = null;
                                            oItemPedido.mtPercentComissao = null;
                                            oItemPedido.mtGuid = oPedidoFortPlus.mvGuid;
                                            oItemPedido.mtObservacao = "";
                                            oItemPedido.mtDmaItem = DateTime.Now;
                                            oItemPedido.idFilial = ClasseParametros.iFilial;
                                            oItemPedido.idIncluidoPor = null;
                                            oItemPedido.idAltaradoPor = null;
                                            oItemPedido.dmaInclusao = DateTime.Now;
                                            oItemPedido.dmaAlteracao = DateTime.Now;
                                            oItemPedido.ativo = "S";
                                            oItemPedido.mtIdCest = oProduto.prIdCest;
                                            oItemPedido.mtIdParent = null;
                                            oItemPedido.mtQtdeLiberada = null;
                                            oItemPedido.mtQtdeSaldo = null;
                                            oItemPedido.mtVariacao = "";
                                            oItemPedido.mtPrecoDePor = null;
                                            oItemPedido.mtAjCusto = "";
                                            oItemPedido.mtCEnqIpi = "";
                                            oItemPedido.mtAgregaTotalFecp = "";
                                            oItemPedido.mtIdLote = null;
                                            oItemPedido.mtLote = "";
                                            oItemPedido.mtDmaLote = DateTime.Now;
                                            s = Newtonsoft.Json.JsonConvert.SerializeObject(oItemPedido);
                                            ClasseFuncoes.InseriItensPedidoFortPlus(oItemPedido);
                                        }
                                    }

                                    sSql = "UPDATE VENDAMARKETPLACE SET STATUS = 1, QUANTIDADEACIMA = 0 WHERE TRIM(ID) ='" + oPedido.code.ToString().Trim() + "'";
                                    ClasseParametros.ExecutabancoMySql(sSql);


                                    oPedidoFortPlus = null;
                                    oResposta = null;

                                    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                    {
                                        client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + oPedido.code.ToString());
                                        request = new RestRequest(Method.GET);
                                        request.AddHeader("Cache-Control", "no-cache");
                                        request.AddHeader("Accept", "*/*");
                                        request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                        request.AddHeader("Content-Type", "application/json");
                                        request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                        oResposta = client.Execute(request);

                                        if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaForteplus(5);
                                        }
                                        else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                                        {
                                            break;
                                        }
                                        else if (oResposta.StatusCode == System.Net.HttpStatusCode.OK)
                                        {

                                            oPedidoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);
                                            break;
                                        }

                                    }

                                    FortPlusFinanceiroReduzido oFinanceiro = new FortPlusFinanceiroReduzido();
                                    oFinanceiro.email = "rodrigonunes@2eletro.com.br";
                                    oFinanceiro.idFilial = oPedidoFortPlus.idFilial;
                                    oFinanceiro.idMovto = oPedidoFortPlus.id;
                                    oFinanceiro.idFormaPagamento = ClasseFuncoes.RetornaCodigoFormaPagamento("CREDIT_CARD");
                                    oFinanceiro.idCondicaoPagamento = ClasseFuncoes.RetornaCodigoCondicaoPagamento("À VISTA");
                                    oFinanceiro.valor = (double)oPedidoFortPlus.mvValorTotal;
                                    oFinanceiro = ClasseFuncoes.CadastraFinanceiroReduzido(oFinanceiro);

                                    //foreach (ProdutoFortePlus oProduto in lstProduto)
                                    //{
                                    //    ClasseFuncoes.EnviaProdutosMercadoLivre(oProduto.id.ToString());
                                    //}


                                    if (eTotal > 1)
                                    {
                                        sSql = "UPDATE VENDAMARKETPLACE SET STATUSMENSAGEM = 3, QUANTIDADEACIMA = 1 WHERE TRIM(ID) ='" + oPedido.code.ToString().Trim() + "'";
                                        ClasseParametros.ExecutabancoMySql(sSql);
                                    }

                                    string smensagem = string.Format(ClasseParametros.sMensagemAcabouComprar, oCliente.psNome);

                                    string sPack = oPedido.code.ToString();
                                    if (oPedido.code != null)
                                        sPack = oPedido.code.ToString();

                                    // EnviaMensagemMercadoLivre(sPack, oPedido.seller.id.ToString(), oPedido.buyer.id.ToString(), smensagem, "1", oPedido.id.ToString());

                                    d.Dispose();
                                    ClasseFuncoes.AtualizaDadosFortPlus(oPedidoFortPlus.id);
                                    ClasseFuncoes.AtualizaDadosFortPlus(oPedidoFortPlus.id);


                                    foreach (Item1 o in oPedido.items)
                                    {
                                        string sLast = o.product_id.Substring(o.product_id.Length - 5);
                                        string sInicio = o.product_id.Replace(sLast, "");
                                        sProduto = "";
                                        if (sLast.Substring(sLast.Length - 3, 3) == "VAR")
                                        {
                                            sLast = sLast.Replace("VAR", "");

                                            string[] aProduto = sLast.Split('G');
                                            sProduto = sInicio + aProduto[0];
                                        }
                                        else
                                        {
                                            sProduto = o.product_id;
                                        }
                                        ProdutoComplemento oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(sProduto);
                                        ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);

                                        if (oProduto.prIdParent != null)
                                        {
                                            List<ProdutoFortePlus> oProdutoTemp = lstProdutoGerais.Where(x => x.prCodigo != null && x.prCodigo == sProduto).ToList();
                                            List<ProdutoFortePlus> oProdutoParent = lstProdutoGerais.Where(x => x.id == oProdutoTemp[0].prIdParent).ToList();
                                            oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(oProdutoParent[0].prCodigo);

                                            //ProdutoFortePlus oProdutoTemp = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(sProduto).Content);
                                        }
                                        AtualizaProdutoB2W(oProdutoComplemento.cmCodigo, iCodigoCliente);
                                    }

                                    //sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + oPedido.code.ToString().Trim() + "' AND MARKETPLACE LIKE '%B2W%'";
                                    //d = ClasseParametros.ConsultaBancoMysql(sSql);
                                    //if (d.Rows.Count > 0)
                                    //{
                                    //    // Atualiza pedido para MAGALU
                                    //    #region Marca pedido como processado
                                    //    MAGALUPedidoProcessado oPedidoProcessado = new MAGALUPedidoProcessado();
                                    //    oPedidoProcessado.IdOrder = oPedido.code;
                                    //    oPedidoProcessado.OrderStatus = "PROCESSING";

                                    //    string sJsonProcessado = Newtonsoft.Json.JsonConvert.SerializeObject(oPedidoProcessado);

                                    //    client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order");
                                    //    request = new RestRequest(Method.PUT);
                                    //    request.AddHeader("cache-control", "no-cache");
                                    //    request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                                    //    request.AddParameter("application/json", sJsonProcessado, ParameterType.RequestBody);

                                    //    IRestResponse response = client.Execute(request);
                                    //    #endregion
                                    //}
                                    //d.Dispose();
                                }
                                else
                                {

                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            EnviaMensagemTelegramAsync("Pedido B2W não cadastrado pois está com erro!\n" + oPedido.customer.name, "0,1", "Pedido não cadastrado", oPedido.code.ToString().Trim());

                        }

                    }
                    #endregion
                    iPagina += 1;

                }

            }
            catch
            {

            }
        }

        public static void RecebeUmPedidoEnviaB2wEnviaFortPlus(int iCodigoCliente, string sPedido)
        {
            RestRequest oRequest = null;
            IRestResponse oResposta = null;
            RestClient client = null;
            RestRequest request = new RestRequest();
            DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
            List<FortPlusXML> lstXML = RetornaListaXMLFortPlus();
            List<ProdutoFortePlus> lstProdutoGerais = RetornaListProdutosFortPlus();
            string sProdutoSKU = "";

            string sKey = d.Rows[0]["KEYB2W"].ToString();
            string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
            string sAccount = "0MDxaksT8d";
            d.Dispose();

            int iPagina = 1;
            int iPorPagina = 50;
            B2WPedido oPedido = new B2WPedido();
            while (true)
            {
                oResposta = null;
                while (oResposta == null)
                {
                    //client = new RestClient("https://api.skyhub.com.br/orders/" + sPedido);

                    //client = new RestClient("https://api.skyhub.com.br/queues/orders");
                    client = new RestClient("https://api.skyhub.com.br/orders?filters[statuses][]=order_invoiced&page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                    //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
                    oRequest = new RestRequest(Method.GET);
                    oRequest.AddHeader("cache-control", "no-cache");
                    oRequest.AddHeader("Accept", "application/json");
                    oRequest.AddHeader("Content-Type", "application/json");
                    oRequest.AddHeader("x-Api-Key", sKey);
                    oRequest.AddHeader("X-User-Email", sUsuario);
                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                    oResposta = client.Execute(oRequest);

                    if (oResposta.StatusCode == HttpStatusCode.BadGateway || oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError || oResposta.StatusCode == 0)
                    {
                        oResposta = null;
                    }
                }
                Thread.Sleep(2000);
                #region etiqueta b2w
                if (oResposta.Content == "Account  not found")
                {
                    continue;
                }
                if (oResposta.Content.Contains("504 Gateway Time-ou"))
                {
                    continue;
                }
                Console.WriteLine("Pagina " + iPagina.ToString());
                B2WPedidos oPedidos = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPedidos>(oResposta.Content);
                if (oPedidos.orders.Length == 0)
                    break;
                B2WPedido[] aPedido = oPedidos.orders.Where(x => x.code.Contains(sPedido)).ToArray();
                if (aPedido.Length > 0)
                {
                    oPedido = aPedido[0];
                    if (oPedido == null)
                    {
                        break;
                    }
                }
                iPagina++;

            }
            bool lAtualiza = false;


            if (oPedido.code == "Submarino-351865549001")
            {

            }

            try
            {
                Console.WriteLine("Integrando Pedido " + oPedido.code);

                if (oPedido.shipping_method == "Correios PAC" || oPedido.shipping_method == "Planilha")
                {
                    Pedido oPedidoFortePlus = RetornaPedidoFortePlusPorIdExterno(oPedido.code);
                    if (oPedidoFortePlus != null)
                    {
                        GeraEtiquetaJADLOG(oPedidoFortePlus, iCodigoCliente, lstXML);
                    }

                    return;
                }

                //if (oPedido.invoices[0].key == "32200634036601000338550010000149041001217216")
                //{
                //    //Pedido oPedidoFortePlus = RetornaPedidoFortePlusPorIdExterno(oPedido.code);

                //    //GeraEtiquetaJADLOG(oPedidoFortePlus);
                //}

                if (oPedido.code.Contains("275530927201"))
                {

                }


                int iOffset = 0;
                int ilimit = 50;

                //List<Result> lstPedidosMercadoLivre = new List<Result>();
                bool lContinua = true;

                Console.WriteLine(" Salvando pedidos no banco");


                Console.WriteLine(" Integrando pedido " + oPedido.code);
                if (oPedido.code.ToString().Trim() == "2334214096")
                {

                }

                string sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + oPedido.code.ToString().Trim() + "' AND STATUS = 0 AND MARKETPLACE LIKE '%B2W%'";
                d = ClasseParametros.ConsultaBancoMysql(sSql);
                if (d.Rows.Count > 0)
                {
                    if (oPedido.status.type.ToUpper().Trim() == "APPROVED")
                    {
                        ClienteFortPlus oCliente = ClasseFuncoes.CadastraClienteB2WFortPlus(oPedido);
                        string s = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);

                        if (oCliente == null)
                        {
                            return;
                        }


                        int iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");
                        ClasseFuncoes.CarregaFiliais("34.036.601/0003-38 - 2ELETRO VAREJISTA");

                        //34036601000257 - 2ELETRO ATACADISTA	
                        //34036601000338 - 2ELETRO VAREJISTA


                        Pedido oPedidoFortPlus = new Pedido();

                        Guid oGuid = Guid.NewGuid();
                        oPedidoFortPlus.id = 0;
                        oPedidoFortPlus.mvDocto = 0;
                        oPedidoFortPlus.mvIdPessoa = int.Parse(oCliente.id);
                        string sCNPJ = "";
                        oPedidoFortPlus.mvIdVendedor = ClasseFuncoes.RetornaVendedorFortPlus("B2W");
                        oPedidoFortPlus.mvIdSerie = ClasseFuncoes.RetornaCodigoGlobal("SR", "1");
                        oPedidoFortPlus.mvIdModelo = ClasseFuncoes.RetornaCodigoGlobal("MD", "55");
                        oPedidoFortPlus.mvTipoMovimento = "1";
                        oPedidoFortPlus.mvTipoPedido = "P";
                        oPedidoFortPlus.mvIdTipoDocumento = ClasseFuncoes.RetornaCodigoGlobal("TD", "REC");

                        oPedidoFortPlus.mvIdTipoFrete = ClasseFuncoes.RetornaCodigoGlobal("TF", "9");
                        if (float.Parse(oPedido.shipping_cost.ToString()) > 0)
                        {
                            oPedidoFortPlus.mvIdTipoFrete = ClasseFuncoes.RetornaCodigoGlobal("TF", "1");
                        }

                        oPedidoFortPlus.mvPreNota = "N";
                        oPedidoFortPlus.mvFinNf = "1";
                        oPedidoFortPlus.mvPresenca = ClasseFuncoes.RetornaCodigoParametro("_FPS_NFE_PRESENCA");
                        oPedidoFortPlus.mvIdNatureza = ClasseFuncoes.RetornaCodigoGlobal("NO", "01");
                        oPedidoFortPlus.mvIdParent = null;
                        oPedidoFortPlus.idFilial = ClasseParametros.iFilial;

                        if (oPedido.shipping_carrier == "Courier")
                        {
                            oPedidoFortPlus.mvIdTransportadora = ClasseFuncoes.RetornaTransportadorFortPlus("Courier");
                        }
                        else if (oPedido.shipping_carrier == "PAC")
                        {
                            oPedidoFortPlus.mvIdTransportadora = ClasseFuncoes.RetornaTransportadorFortPlus("PAC");

                        }
                        else
                        {
                            EnviaMensagemTelegramAsync("Pedido B2W não cadastrado pois o transportador está com erro!\n" + oPedido.customer.name + "\nPedido: " + oPedido.code.ToString(), "0,1", "Pedido não cadastrado", oPedido.code.ToString().Trim());

                            return;
                        }



                        int? eTotal = 0;
                        float? eTotalPago = 0;
                        float? eTotalValor = 0;
                        float? eTotalDesconto = float.Parse(oPedido.shipping_cost.ToString());

                        foreach (Item1 o in oPedido.items)
                        {
                            eTotal += o.qty;
                            string sPreco = o.original_price.ToString();

                            eTotalValor += (float)(o.qty * float.Parse(sPreco));
                        }


                        s = Newtonsoft.Json.JsonConvert.SerializeObject(oPedidoFortPlus);
                        //List<Payment> lstPagamento = oPedido.payment.OfType<Payment>().ToList();
                        //foreach (Payment oPagamento in lstPagamento)
                        //{
                        //    eTotalPago += (float)oPagamento.Amount;
                        //}

                        oPedidoFortPlus.mvQuantidade = eTotal;
                        oPedidoFortPlus.mvPesoBruto = 0;
                        oPedidoFortPlus.mvPesoLiquido = 0;

                        oPedidoFortPlus.mvTpAmb = "1";
                        oPedidoFortPlus.mvTpEmis = "1";
                        oPedidoFortPlus.mvStatus = "0";
                        oPedidoFortPlus.mvEntidade = "PDV";
                        oPedidoFortPlus.ativo = "S";
                        oPedidoFortPlus.mvGuid = oGuid.ToString();
                        oPedidoFortPlus.dmaInclusao = DateTime.Now;
                        oPedidoFortPlus.dmaAlteracao = DateTime.Now;
                        oPedidoFortPlus.mvDmaEmissao = DateTime.Now;
                        oPedidoFortPlus.mvDmaEntradaSaida = DateTime.Now;
                        oPedidoFortPlus.mvValorOutrasDespesasAcessoria = 0;//float.Parse(oPedido.seller_shipping_cost.ToString());

                        oPedidoFortPlus.mvIdExterno = oPedido.code;
                        if (oPedido.shipping_cost.ToString() != "")
                            oPedidoFortPlus.mvValorFrete = float.Parse(oPedido.shipping_cost.ToString());
                        oPedidoFortPlus.mvValorDesconto = 0;

                        oPedidoFortPlus.mvValorTotalProduto = eTotalValor;
                        //oPedidoFortPlus.valo = oPedido.total_amount;
                        oPedidoFortPlus.mvValorTotal = oPedido.total_ordered;
                        //mais de uma unidade
                        //04_02_2020
                        //if (oPedido.CustomerPfCpf != null)
                        //{
                        //    oPedidoFortPlus.mvValorTotalProduto = eTotalValor - eTotalDesconto;
                        //    //oPedidoFortPlus.valo = oPedido.total_amount;
                        //    oPedidoFortPlus.mvValorTotal = eTotalPago - eTotalDesconto;
                        //}


                        oPedidoFortPlus.mvVersao = ClasseFuncoes.RetornaCodigoParametro("_FPS_NFE_VERSAO");

                        //2322426297

                        oResposta = null;

                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                        {
                            client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + oPedido.code.ToString());
                            request = new RestRequest(Method.GET);
                            request.AddHeader("Cache-Control", "no-cache");
                            request.AddHeader("Accept", "*/*");
                            request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                            request.AddHeader("Content-Type", "application/json");
                            request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                            oResposta = client.Execute(request);

                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                            {
                                ClasseFuncoes.ConectaForteplus(5);
                            }
                            else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                            {
                                break;
                            }
                            else if (oResposta.StatusCode == System.Net.HttpStatusCode.OK)
                            {

                                oPedidoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);
                                break;
                            }

                        }

                        if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                            oPedidoFortPlus = ClasseFuncoes.CriaPedidoFortPlus(oPedidoFortPlus);

                        //foreach (Payment oPagamento in lstPagamento)
                        //{

                        //}


                        List<ProdutoFortePlus> lstProduto = new List<ProdutoFortePlus>();
                        float? eValorFreteProduto = oPedidoFortPlus.mvValorFrete / oPedido.items.Length;
                        foreach (Item1 o in oPedido.items)
                        {

                            string sLast = o.product_id.Substring(o.product_id.Length - 5);
                            string sInicio = o.product_id.Replace(sLast, "");
                            sProdutoSKU = "";
                            if (sLast.Substring(sLast.Length - 3, 3) == "VAR")
                            {
                                sLast = sLast.Replace("VAR", "");

                                string[] aProduto = sLast.Split('G');
                                sProdutoSKU = sInicio + aProduto[0];
                            }
                            else
                            {
                                sProdutoSKU = o.product_id;
                            }


                            ProdutoComplemento oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(sProdutoSKU);
                            ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);

                            if (oProduto.prIdParent != null)
                            {
                                List<ProdutoFortePlus> oProdutoTemp = lstProdutoGerais.Where(x => x.prCodigo != null && x.prCodigo == sProdutoSKU).ToList();
                                List<ProdutoFortePlus> oProdutoParent = lstProdutoGerais.Where(x => x.id == oProdutoTemp[0].prIdParent).ToList();
                                oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(oProdutoParent[0].prCodigo);

                                //ProdutoFortePlus oProdutoTemp = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(sProduto).Content);
                            }

                            List<PedidoItemFortPlus> lstPedidoItem = RetornaItensPedido(oPedidoFortPlus.id);

                            if (oProduto.prCodigo.Substring(0, 3).Trim() == "KIT")
                            {
                                List<int?> lstSKU = RetornaProdutoKIT(oProduto.prCodigo, "B2W");
                                lstPedidoItem = lstPedidoItem.Where(x => x.mtIdProduto == lstSKU[0]).ToList();
                                if (lstPedidoItem.Count > 0)
                                {
                                    continue;
                                }

                            }
                            else

                            {
                                lstPedidoItem = lstPedidoItem.Where(x => x.mtIdProduto == oProduto.id).ToList();
                                if (lstPedidoItem.Count > 0)
                                {
                                    continue;
                                }
                            }




                            bool lTirarTarifa = oProduto.prPercentComissao == 1;

                            if (oProduto.prCodigo.Substring(0, 3).Trim() == "KIT")
                            {
                                oResposta = null;

                                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                {
                                    client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + oProduto.id.ToString());
                                    request = new RestRequest(Method.GET);
                                    request.AddHeader("Cache-Control", "no-cache");
                                    request.AddHeader("Accept", "*/*");
                                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                    request.AddHeader("Content-Type", "application/json");
                                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                    oResposta = client.Execute(request);

                                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                    {
                                        ClasseFuncoes.ConectaForteplus(5);
                                    }
                                }

                                List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
                                float? eValorTotalComposicao = 0;

                                foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
                                {
                                    ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();
                                    List<ProdutoComplemento> oProdutoComplementoComposicao = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(ClasseFuncoes.RetornaProdutoComplementoFortPlus(oFormaPagamento.pcIdProdutoComposicao.ToString()).Content);
                                    foreach (ProdutoComplemento oPC in oProdutoComplementoComposicao)
                                    {
                                        string sMarketPlace = ClasseFuncoes.RetornaNomeGlobalMK("MK", oPC.cmIdMarketPlace);
                                        if (sMarketPlace.Contains("B2W"))
                                        {
                                            oProdutoComplementoUsar = oPC;
                                            break;
                                        }
                                    }
                                    eValorTotalComposicao += oProdutoComplementoUsar.cmPrecoDePor;
                                }

                                foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
                                {
                                    PedidoItemFortPlus oItemPedido = new PedidoItemFortPlus();
                                    oItemPedido.id = 0;
                                    oItemPedido.mtIdNfOrigem = null;
                                    oItemPedido.mtIdMovto = oPedidoFortPlus.id;
                                    lstProduto.Add(oProduto);

                                    float? eTotalSemTarifa = eTotalValor - eTotalDesconto;
                                    double? eQuantidade = o.qty * oFormaPagamento.pcQtde;
                                    float? eQtd = float.Parse(eQuantidade.ToString());
                                    List<ProdutoComplemento> oProdutoComplementoComposicao = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(ClasseFuncoes.RetornaProdutoComplementoFortPlus(oFormaPagamento.pcIdProdutoComposicao.ToString()).Content);
                                    ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();


                                    foreach (ProdutoComplemento oPC in oProdutoComplementoComposicao)
                                    {
                                        string sMarketPlace = ClasseFuncoes.RetornaNomeGlobalMK("MK", oPC.cmIdMarketPlace);
                                        if (sMarketPlace.Contains("B2W"))
                                        {
                                            oProdutoComplementoUsar = oPC;
                                            break;
                                        }
                                    }
                                    float? ePercentual = (oProdutoComplementoUsar.cmPrecoDePor * 100) / eValorTotalComposicao;
                                    double? eValorProduto = (eTotalValor * ePercentual) / 100;

                                    oItemPedido.mtIdProduto = oFormaPagamento.pcIdProdutoComposicao;
                                    oItemPedido.mtQtde = eQtd;
                                    oItemPedido.mtValorUnitario = float.Parse(eValorProduto.ToString());
                                    oItemPedido.mtValorTotal = oItemPedido.mtValorUnitario * eQtd;

                                    //////mais de uma unidade
                                    //////04_02_2020
                                    //if (oPedido.CustomerPfCpf != "CPF")
                                    //{
                                    //    ePercentual = (oProdutoComplementoUsar.cmPrecoDePor * 100) / eValorTotalComposicao;
                                    //    eValorProduto = (eTotalSemTarifa * ePercentual) / 100;

                                    //    if (oListFormaPagamento.Count == 1)
                                    //    {
                                    //        eValorProduto = eTotalSemTarifa / eQtd;
                                    //    }

                                    //    oItemPedido.mtValorUnitario = float.Parse(eValorProduto.ToString());
                                    //    oItemPedido.mtValorTotal = oItemPedido.mtValorUnitario * eQtd;
                                    //}

                                    oItemPedido.mtValorDesconto = 0;
                                    oItemPedido.mtValorDescontoRateio = 0;
                                    oItemPedido.mtPercDesconto = 0;
                                    oItemPedido.mtValor = 0;
                                    oItemPedido.mtValorFrete = eValorFreteProduto;
                                    oItemPedido.mtValorSeguro = 0;
                                    oItemPedido.mtValorOutrasDespesas = 0;
                                    oItemPedido.mtCustoMedio = null;
                                    oItemPedido.mtValorTabela = oProdutoComplementoUsar.cmPrecoVenda;
                                    oItemPedido.mtPesoBruto = null;
                                    oItemPedido.mtPesoLiquido = null;
                                    oItemPedido.mtIdCfop = null;
                                    oItemPedido.mtIdNcm = oProduto.prIdNcm;

                                    oItemPedido.mtIdLocalEstoque = iLocalEstoque;

                                    oItemPedido.mtValorAproxImposto = null;
                                    oItemPedido.mtValorTributoEstadual = null;
                                    oItemPedido.mtValorTributoImportado = null;
                                    oItemPedido.mtValorTributoMunicipal = null;
                                    oItemPedido.mtValorTributoNacional = null;
                                    oItemPedido.mtPercEstadual = null;
                                    oItemPedido.mtPercImportado = null;
                                    oItemPedido.mtPercMunicipal = null;
                                    oItemPedido.mtPercNacional = null;
                                    oItemPedido.mtVersaoIbpt = "";
                                    oItemPedido.mtIdUnidade = oProduto.prIdUnidadePrincipal;
                                    oItemPedido.mtOrdemCompra = "";
                                    oItemPedido.mtOrdemItemCompra = "";
                                    oItemPedido.mtReferencia = "";
                                    oItemPedido.mtEntidade = "";
                                    oItemPedido.mtModalidadeBcIcms = "";
                                    oItemPedido.mtIdCstIcms = null;
                                    oItemPedido.mtBaseIcms = null;
                                    oItemPedido.mtAliquotaIcms = null;
                                    oItemPedido.mtPercentReducaoBaseIcms = null;
                                    oItemPedido.mtValorIcms = null;
                                    oItemPedido.mtValorReducaoIcms = null;
                                    oItemPedido.mtAliquotaIcmsCr = null;
                                    oItemPedido.mtValorIcmsCr = null;
                                    oItemPedido.mtBaseIcmsCr = null;
                                    oItemPedido.mtModalidadeBcIcmsSt = "";
                                    oItemPedido.mtPercentReducaoBaseIcmsSt = null;
                                    oItemPedido.mtAliquotaIcmsSt = null;
                                    oItemPedido.mtAliquotaMva = null;
                                    oItemPedido.mtValorIcmsSt = null;
                                    oItemPedido.mtValorReducaoIcmsSt = null;
                                    oItemPedido.mtBaseIcmsSt = null;
                                    oItemPedido.mtIdCstPis = null;
                                    oItemPedido.mtBasePis = null;
                                    oItemPedido.mtPercentReducaoBasePis = null;
                                    oItemPedido.mtAliquotaPis = null;
                                    oItemPedido.mtValorPis = null;
                                    oItemPedido.mtIdCstCofins = null;
                                    oItemPedido.mtBaseCofins = null;
                                    oItemPedido.mtPercentReducaoBaseCofins = null;
                                    oItemPedido.mtAliquotaCofins = null;
                                    oItemPedido.mtValorCofins = null;
                                    oItemPedido.mtIdCstIpi = null;
                                    oItemPedido.mtBaseIpi = null;
                                    oItemPedido.mtPercentReducaoBaseIpi = null;
                                    oItemPedido.mtAliquotaIpi = null;
                                    oItemPedido.mtValorIpi = null;
                                    oItemPedido.mtIdCstIi = null;
                                    oItemPedido.mtBaseIi = null;
                                    oItemPedido.mtPercentReducaoBaseIi = null;
                                    oItemPedido.mtValorIi = null;
                                    oItemPedido.mtIdCstIssqn = null;
                                    oItemPedido.mtBaseIssqn = null;
                                    oItemPedido.mtPercentReducaoBaseIssqn = null;
                                    oItemPedido.mtValorIssqn = null;
                                    //oItemPedido.mtAliquotaInterEstadual = null;
                                    oItemPedido.mtBaseDifal = null;
                                    oItemPedido.mtAliquotaDifal = null;
                                    oItemPedido.mtValorDifal = null;
                                    oItemPedido.mtBaseFecp = null;
                                    oItemPedido.mtAliquotaFecp = null;
                                    oItemPedido.mtValorFecp = null;
                                    oItemPedido.mtBaseFecpSt = null;
                                    oItemPedido.mtAliquotaFecpSt = null;
                                    oItemPedido.mtValorFecpSt = null;
                                    oItemPedido.mtBaseFecpStRet = null;
                                    oItemPedido.mtAliquotaFecpStRet = null;
                                    oItemPedido.mtValorFecpStRet = null;
                                    oItemPedido.mtValorIcmsPartUfOrigem = null;
                                    oItemPedido.mtValorIcmsPartUfDestino = null;
                                    oItemPedido.mtAliquotaIcmsPartUfOrigem = null;
                                    oItemPedido.mtAliquotaIcmsPartUfDestino = null;
                                    oItemPedido.mtBaseIcmsPartUfOrigem = null;
                                    oItemPedido.mtBaseIcmsPartUfDestino = null;
                                    oItemPedido.mtBaseCalculoKardex = null;
                                    oItemPedido.mtPercentComissao = null;
                                    oItemPedido.mtGuid = oPedidoFortPlus.mvGuid;
                                    oItemPedido.mtObservacao = "";
                                    oItemPedido.mtDmaItem = DateTime.Now;
                                    oItemPedido.idFilial = ClasseParametros.iFilial;
                                    oItemPedido.idIncluidoPor = null;
                                    oItemPedido.idAltaradoPor = null;
                                    oItemPedido.dmaInclusao = DateTime.Now;
                                    oItemPedido.dmaAlteracao = DateTime.Now;
                                    oItemPedido.ativo = "S";
                                    oItemPedido.mtIdCest = oProduto.prIdCest;
                                    oItemPedido.mtIdParent = null;
                                    oItemPedido.mtQtdeLiberada = null;
                                    oItemPedido.mtQtdeSaldo = null;
                                    oItemPedido.mtVariacao = "";
                                    oItemPedido.mtPrecoDePor = null;
                                    oItemPedido.mtAjCusto = "";
                                    oItemPedido.mtCEnqIpi = "";
                                    oItemPedido.mtAgregaTotalFecp = "";
                                    oItemPedido.mtIdLote = null;
                                    oItemPedido.mtLote = "";
                                    oItemPedido.mtDmaLote = DateTime.Now;
                                    s = Newtonsoft.Json.JsonConvert.SerializeObject(oItemPedido);
                                    ClasseFuncoes.InseriItensPedidoFortPlus(oItemPedido);

                                }
                            }
                            else
                            {

                                PedidoItemFortPlus oItemPedido = new PedidoItemFortPlus();
                                oItemPedido.id = 0;
                                oItemPedido.mtIdNfOrigem = null;
                                oItemPedido.mtIdMovto = oPedidoFortPlus.id;
                                oItemPedido.mtValorFrete = eValorFreteProduto;

                                lstProduto.Add(oProduto);

                                oItemPedido.mtIdProduto = oProdutoComplemento.cmIdProduto;
                                oItemPedido.mtQtde = o.qty;

                                string sPreco = o.original_price.ToString();

                                oItemPedido.mtValorUnitario = float.Parse(sPreco);
                                oItemPedido.mtValorTotal = (float)(o.qty * float.Parse(sPreco));

                                //mais de uma unidade
                                //04_02_2020
                                //float? eTotalSemTarifa = eTotalValor - eTotalDesconto;

                                //if (oPedido.CustomerPfCpf != null)
                                //{
                                //    float? eValorProduto = eTotalSemTarifa / o.Quantity;
                                //    oItemPedido.mtIdProduto = oProdutoComplemento.cmIdProduto;
                                //    oItemPedido.mtQtde = o.Quantity;
                                //    oItemPedido.mtValorUnitario = eValorProduto;
                                //    oItemPedido.mtValorTotal = eValorProduto * o.Quantity;
                                //}

                                oItemPedido.mtValorDesconto = 0;
                                oItemPedido.mtValorDescontoRateio = 0;
                                oItemPedido.mtPercDesconto = 0;
                                oItemPedido.mtValor = 0;
                                oItemPedido.mtValorFrete = eValorFreteProduto;
                                oItemPedido.mtValorSeguro = 0;
                                oItemPedido.mtValorOutrasDespesas = 0;
                                oItemPedido.mtCustoMedio = null;
                                oItemPedido.mtValorTabela = oProdutoComplemento.cmPrecoVenda;
                                oItemPedido.mtPesoBruto = null;
                                oItemPedido.mtPesoLiquido = null;
                                oItemPedido.mtIdCfop = null;
                                oItemPedido.mtIdNcm = oProduto.prIdNcm;

                                oItemPedido.mtIdLocalEstoque = iLocalEstoque;

                                oItemPedido.mtValorAproxImposto = null;
                                oItemPedido.mtValorTributoEstadual = null;
                                oItemPedido.mtValorTributoImportado = null;
                                oItemPedido.mtValorTributoMunicipal = null;
                                oItemPedido.mtValorTributoNacional = null;
                                oItemPedido.mtPercEstadual = null;
                                oItemPedido.mtPercImportado = null;
                                oItemPedido.mtPercMunicipal = null;
                                oItemPedido.mtPercNacional = null;
                                oItemPedido.mtVersaoIbpt = "";
                                oItemPedido.mtIdUnidade = oProduto.prIdUnidadePrincipal;
                                oItemPedido.mtOrdemCompra = "";
                                oItemPedido.mtOrdemItemCompra = "";
                                oItemPedido.mtReferencia = "";
                                oItemPedido.mtEntidade = "";
                                oItemPedido.mtModalidadeBcIcms = "";
                                oItemPedido.mtIdCstIcms = null;
                                oItemPedido.mtBaseIcms = null;
                                oItemPedido.mtAliquotaIcms = null;
                                oItemPedido.mtPercentReducaoBaseIcms = null;
                                oItemPedido.mtValorIcms = null;
                                oItemPedido.mtValorReducaoIcms = null;
                                oItemPedido.mtAliquotaIcmsCr = null;
                                oItemPedido.mtValorIcmsCr = null;
                                oItemPedido.mtBaseIcmsCr = null;
                                oItemPedido.mtModalidadeBcIcmsSt = "";
                                oItemPedido.mtPercentReducaoBaseIcmsSt = null;
                                oItemPedido.mtAliquotaIcmsSt = null;
                                oItemPedido.mtAliquotaMva = null;
                                oItemPedido.mtValorIcmsSt = null;
                                oItemPedido.mtValorReducaoIcmsSt = null;
                                oItemPedido.mtBaseIcmsSt = null;
                                oItemPedido.mtIdCstPis = null;
                                oItemPedido.mtBasePis = null;
                                oItemPedido.mtPercentReducaoBasePis = null;
                                oItemPedido.mtAliquotaPis = null;
                                oItemPedido.mtValorPis = null;
                                oItemPedido.mtIdCstCofins = null;
                                oItemPedido.mtBaseCofins = null;
                                oItemPedido.mtPercentReducaoBaseCofins = null;
                                oItemPedido.mtAliquotaCofins = null;
                                oItemPedido.mtValorCofins = null;
                                oItemPedido.mtIdCstIpi = null;
                                oItemPedido.mtBaseIpi = null;
                                oItemPedido.mtPercentReducaoBaseIpi = null;
                                oItemPedido.mtAliquotaIpi = null;
                                oItemPedido.mtValorIpi = null;
                                oItemPedido.mtIdCstIi = null;
                                oItemPedido.mtBaseIi = null;
                                oItemPedido.mtPercentReducaoBaseIi = null;
                                oItemPedido.mtValorIi = null;
                                oItemPedido.mtIdCstIssqn = null;
                                oItemPedido.mtBaseIssqn = null;
                                oItemPedido.mtPercentReducaoBaseIssqn = null;
                                oItemPedido.mtValorIssqn = null;
                                //oItemPedido.mtAliquotaInterEstadual = null;
                                oItemPedido.mtBaseDifal = null;
                                oItemPedido.mtAliquotaDifal = null;
                                oItemPedido.mtValorDifal = null;
                                oItemPedido.mtBaseFecp = null;
                                oItemPedido.mtAliquotaFecp = null;
                                oItemPedido.mtValorFecp = null;
                                oItemPedido.mtBaseFecpSt = null;
                                oItemPedido.mtAliquotaFecpSt = null;
                                oItemPedido.mtValorFecpSt = null;
                                oItemPedido.mtBaseFecpStRet = null;
                                oItemPedido.mtAliquotaFecpStRet = null;
                                oItemPedido.mtValorFecpStRet = null;
                                oItemPedido.mtValorIcmsPartUfOrigem = null;
                                oItemPedido.mtValorIcmsPartUfDestino = null;
                                oItemPedido.mtAliquotaIcmsPartUfOrigem = null;
                                oItemPedido.mtAliquotaIcmsPartUfDestino = null;
                                oItemPedido.mtBaseIcmsPartUfOrigem = null;
                                oItemPedido.mtBaseIcmsPartUfDestino = null;
                                oItemPedido.mtBaseCalculoKardex = null;
                                oItemPedido.mtPercentComissao = null;
                                oItemPedido.mtGuid = oPedidoFortPlus.mvGuid;
                                oItemPedido.mtObservacao = "";
                                oItemPedido.mtDmaItem = DateTime.Now;
                                oItemPedido.idFilial = ClasseParametros.iFilial;
                                oItemPedido.idIncluidoPor = null;
                                oItemPedido.idAltaradoPor = null;
                                oItemPedido.dmaInclusao = DateTime.Now;
                                oItemPedido.dmaAlteracao = DateTime.Now;
                                oItemPedido.ativo = "S";
                                oItemPedido.mtIdCest = oProduto.prIdCest;
                                oItemPedido.mtIdParent = null;
                                oItemPedido.mtQtdeLiberada = null;
                                oItemPedido.mtQtdeSaldo = null;
                                oItemPedido.mtVariacao = "";
                                oItemPedido.mtPrecoDePor = null;
                                oItemPedido.mtAjCusto = "";
                                oItemPedido.mtCEnqIpi = "";
                                oItemPedido.mtAgregaTotalFecp = "";
                                oItemPedido.mtIdLote = null;
                                oItemPedido.mtLote = "";
                                oItemPedido.mtDmaLote = DateTime.Now;
                                s = Newtonsoft.Json.JsonConvert.SerializeObject(oItemPedido);
                                ClasseFuncoes.InseriItensPedidoFortPlus(oItemPedido);
                            }
                        }

                        sSql = "UPDATE VENDAMARKETPLACE SET STATUS = 1, QUANTIDADEACIMA = 0 WHERE TRIM(ID) ='" + oPedido.code.ToString().Trim() + "'";
                        ClasseParametros.ExecutabancoMySql(sSql);



                        oResposta = null;

                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                        {
                            client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + oPedido.code.ToString());
                            request = new RestRequest(Method.GET);
                            request.AddHeader("Cache-Control", "no-cache");
                            request.AddHeader("Accept", "*/*");
                            request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                            request.AddHeader("Content-Type", "application/json");
                            request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                            oResposta = client.Execute(request);

                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                            {
                                ClasseFuncoes.ConectaForteplus(5);
                            }
                            else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                            {
                                break;
                            }
                            else if (oResposta.StatusCode == System.Net.HttpStatusCode.OK)
                            {

                                oPedidoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);
                                break;
                            }

                        }

                        FortPlusFinanceiroReduzido oFinanceiro = new FortPlusFinanceiroReduzido();
                        oFinanceiro.email = "rodrigonunes@2eletro.com.br";
                        oFinanceiro.idFilial = oPedidoFortPlus.idFilial;
                        oFinanceiro.idMovto = oPedidoFortPlus.id;
                        oFinanceiro.idFormaPagamento = ClasseFuncoes.RetornaCodigoFormaPagamento("credit_card");
                        oFinanceiro.idCondicaoPagamento = ClasseFuncoes.RetornaCodigoCondicaoPagamento("À VISTA");
                        oFinanceiro.valor = (double)oPedidoFortPlus.mvValorTotal;
                        oFinanceiro = ClasseFuncoes.CadastraFinanceiroReduzido(oFinanceiro);

                        //foreach (ProdutoFortePlus oProduto in lstProduto)
                        //{
                        //    ClasseFuncoes.EnviaProdutosMercadoLivre(oProduto.id.ToString());
                        //}


                        if (eTotal > 1)
                        {
                            sSql = "UPDATE VENDAMARKETPLACE SET STATUSMENSAGEM = 3, QUANTIDADEACIMA = 1 WHERE TRIM(ID) ='" + oPedido.code.ToString().Trim() + "'";
                            ClasseParametros.ExecutabancoMySql(sSql);
                        }

                        string smensagem = string.Format(ClasseParametros.sMensagemAcabouComprar, oCliente.psNome);

                        string sPack = oPedido.code.ToString();
                        if (oPedido.code != null)
                            sPack = oPedido.code.ToString();

                        // EnviaMensagemMercadoLivre(sPack, oPedido.seller.id.ToString(), oPedido.buyer.id.ToString(), smensagem, "1", oPedido.id.ToString());

                        d.Dispose();
                        ClasseFuncoes.AtualizaDadosFortPlus(oPedidoFortPlus.id);
                        ClasseFuncoes.AtualizaDadosFortPlus(oPedidoFortPlus.id);


                        foreach (Item1 o in oPedido.items)
                        {
                            string sLast = o.product_id.Substring(o.product_id.Length - 5);
                            string sInicio = o.product_id.Replace(sLast, "");
                            sProdutoSKU = "";
                            if (sLast.Substring(sLast.Length - 3, 3) == "VAR")
                            {
                                sLast = sLast.Replace("VAR", "");

                                string[] aProduto = sLast.Split('G');
                                sProdutoSKU = sInicio + aProduto[0];
                            }
                            else
                            {
                                sProdutoSKU = o.product_id;
                            }
                            ProdutoComplemento oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(sProdutoSKU);
                            ProdutoFortePlus oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);

                            if (oProduto.prIdParent != null)
                            {
                                List<ProdutoFortePlus> oProdutoTemp = lstProdutoGerais.Where(x => x.prCodigo != null && x.prCodigo == sProdutoSKU).ToList();
                                List<ProdutoFortePlus> oProdutoParent = lstProdutoGerais.Where(x => x.id == oProdutoTemp[0].prIdParent).ToList();
                                oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(oProdutoParent[0].prCodigo);

                                //ProdutoFortePlus oProdutoTemp = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(sProduto).Content);
                            }
                            AtualizaProdutoB2W(o.product_id, iCodigoCliente);
                        }

                        //sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + oPedido.code.ToString().Trim() + "' AND MARKETPLACE LIKE '%B2W%'";
                        //d = ClasseParametros.ConsultaBancoMysql(sSql);
                        //if (d.Rows.Count > 0)
                        //{
                        //    // Atualiza pedido para MAGALU
                        //    #region Marca pedido como processado
                        //    MAGALUPedidoProcessado oPedidoProcessado = new MAGALUPedidoProcessado();
                        //    oPedidoProcessado.IdOrder = oPedido.code;
                        //    oPedidoProcessado.OrderStatus = "PROCESSING";

                        //    string sJsonProcessado = Newtonsoft.Json.JsonConvert.SerializeObject(oPedidoProcessado);

                        //    client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order");
                        //    request = new RestRequest(Method.PUT);
                        //    request.AddHeader("cache-control", "no-cache");
                        //    request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                        //    request.AddParameter("application/json", sJsonProcessado, ParameterType.RequestBody);

                        //    IRestResponse response = client.Execute(request);
                        //    #endregion
                        //}
                        //d.Dispose();
                    }
                    else
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                EnviaMensagemTelegramAsync("Pedido B2W não cadastrado pois o endereço está com erro!\n" + oPedido.customer.name, "0,1", "Pedido não cadastrado", oPedido.code.ToString().Trim());

            }


            #endregion
            iPagina += 1;
        }


        public static void GeraEtiquetaClientesAsync(int iCodigoCliente)
        {
            try
            {
                DataTable dtbCliente = ClasseParametros.ConsultaBancoMysql(@"SELECT PORANYMARKET, USUARIOMAGALU, SENHAMAGALU, PORARQUIVO, CODIGO, CLIENTE, IDMERCADOLIVRE, SENHAMERCADOLIVRE, CODEMERCADOLIVRE, ACCESSTOKENMERCADOLIVRE,
                                                                                    REFRESHTOKENMERCADOLIVRE, KEYB2W, USUARIOB2W,ACCOUNTMANAGERB2W, REMETENTE, ENDERECO, CEP, CIDADE, UF, GUMGATOKENANYMARKET, PASTA, PASTAXML, ACCOUNTMANAGERB2W,
                                                                                    USUARIOFTP,SENHAFTP
                                                                    FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString() + " ORDER BY PORARQUIVO DESC");
                string sCliente = dtbCliente.Rows[0]["CLIENTE"].ToString();
                Console.WriteLine("Inicia serviço do cliente " + sCliente);

                List<Content> lstContent = new List<Content>();
                Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                RestRequest oRequest = null;
                IRestResponse oResposta = null;
                RestClient client = null;

                int iTotalEtq = 0;

                foreach (DataRow r in dtbCliente.Rows)
                {
                    try
                    {
                        ClasseFuncoes.ConectaMercadoLivreAsync(int.Parse(dtbCliente.Rows[0]["CODIGO"].ToString()));

                        List<string> lstPastas = new List<string>();
                        FtpWebRequest oFTP = (FtpWebRequest)WebRequest.Create("ftp://50.116.87.79//07-EnvioSaidaNF");

                        try
                        {
                            oFTP.Method = WebRequestMethods.Ftp.ListDirectory;

                            oFTP.Credentials = new NetworkCredential(r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                            FtpWebResponse response = (FtpWebResponse)oFTP.GetResponse();
                            Stream responseStream = response.GetResponseStream();
                            StreamReader reader = new StreamReader(responseStream);
                            string names = reader.ReadToEnd();

                            reader.Close();
                            response.Close();

                            lstPastas = names.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries).ToList();
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine("erro ftp");
                        }


                        int iPorArquivo = 0;
                        if (r["PORARQUIVO"].ToString() != "")
                            iPorArquivo = int.Parse(r["PORARQUIVO"].ToString());

                        if (iPorArquivo == 1)
                        {
                            foreach (string sArquivo in lstPastas)
                            {
                                if (!sArquivo.ToLower().Contains(".xml"))
                                {
                                    continue;
                                }
                                string sArquiTemp = sArquivo.Replace("07-EnvioSaidaNF/", "");

                                Console.WriteLine("Gerando Nota " + sArquiTemp);
                                SalvaNotaArquivo(int.Parse(r["CODIGO"].ToString()), sArquiTemp, r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                            }

                            lstPastas = new List<string>();
                            oFTP = (FtpWebRequest)WebRequest.Create("ftp://50.116.87.79//12-Etiquetas");

                            try
                            {
                                oFTP.Method = WebRequestMethods.Ftp.ListDirectory;

                                oFTP.Credentials = new NetworkCredential(r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                                FtpWebResponse response = (FtpWebResponse)oFTP.GetResponse();
                                Stream responseStream = response.GetResponseStream();
                                StreamReader reader = new StreamReader(responseStream);
                                string names = reader.ReadToEnd();

                                reader.Close();
                                response.Close();

                                lstPastas = names.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries).ToList();
                            }
                            catch (Exception ex)
                            {
                                throw;
                            }

                            foreach (string sArquivo in lstPastas)
                            {
                                if (!sArquivo.ToLower().Contains(".txt"))
                                {
                                    continue;
                                }
                                Console.WriteLine("Gerando etiqueta " + sArquivo);

                                SalvaEtiquetaArquivo(int.Parse(r["CODIGO"].ToString()), sArquivo, r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                            }
                            continue;
                        }


                        Application.DoEvents();
                        if (r["PASTA"].ToString() == "")
                        {

                            #region B2W
                            DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + r["CODIGO"].ToString());
                            string sKey = d.Rows[0]["KEYB2W"].ToString();
                            string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                            string sAccount = d.Rows[0]["ACCOUNTMANAGERB2W"].ToString();
                            d.Dispose();

                            int iPagina = 1;
                            int iPorPagina = 50;
                            int iTotal = 0;

                            while (true)
                            {
                                oResposta = null;
                                while (oResposta == null)
                                {
                                    client = new RestClient("https://api.skyhub.com.br/orders?filters[statuses][]=order_invoiced&page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                                    //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                                    //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
                                    oRequest = new RestRequest(Method.GET);
                                    oRequest.AddHeader("cache-control", "no-cache");
                                    oRequest.AddHeader("Accept", "application/json");
                                    oRequest.AddHeader("Content-Type", "application/json");
                                    oRequest.AddHeader("x-Api-Key", sKey);
                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                                    oResposta = client.Execute(oRequest);

                                    if (oResposta.StatusCode == HttpStatusCode.BadGateway || oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError || oResposta.StatusCode == 0)
                                    {
                                        oResposta = null;
                                    }
                                }
                                Thread.Sleep(200);

                                if (oResposta.Content == "Account  not found")
                                {
                                    continue;
                                }
                                if (oResposta.Content.Contains("504 Gateway Time-ou"))
                                {
                                    continue;
                                }

                                B2WPedidos lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPedidos>(oResposta.Content);
                                if (lstPedido.orders == null || lstPedido.orders.Length == 0)
                                {
                                    break;
                                }

                                foreach (B2WPedido oPedido in lstPedido.orders)
                                {



                                    if (oPedido.invoices[0].key == "35200508355660000105550010000807741348889004")
                                    {

                                    }


                                    Content oItemAnymarket = new Content();
                                    InterRegraNegocio.Invoice oInvoice = new InterRegraNegocio.Invoice();
                                    oInvoice.accessKey = oPedido.invoices[0].key;
                                    oItemAnymarket.marketPlaceId = oPedido.code;
                                    oItemAnymarket.invoice = oInvoice;
                                    oItemAnymarket.CodigoCliente = iCodigoCliente;
                                    oItemAnymarket.marketPlace = "B2W";
                                    oItemAnymarket.subChannel = "";
                                    lstContent.Add(oItemAnymarket);
                                }

                                iTotal += lstPedido.orders.Length;

                                Application.DoEvents();

                                iPagina += 1;
                            }
                            #endregion

                            #region MERCADOLIVRE
                            //if (ClasseParametros.oMeli == null)
                            //    ClasseFuncoes.ConectaMercadoLivre(int.Parse(r["CODIGO"].ToString()));

                            //List<Parameter> ps = new List<Parameter>();
                            //int iOffset = 0;
                            //int ilimit = 50;
                            //List<Result> lstPedidosMercadoLivre = new List<Result>();
                            //bool lContinua = true;

                            //ps = new List<Parameter>();
                            //Parameter p = new Parameter();
                            //p.Name = "access_token";
                            //p.Value = ClasseParametros.oMeli.AccessToken;
                            //ps.Add(p);


                            //if (ClasseParametros.oUsuarioMercadoLivre == null)
                            //{
                            //    oResposta = ClasseParametros.oMeli.Get("/users/me", ps);
                            //    if (oResposta.Content.Contains("invalid_token"))
                            //    {
                            //        ClasseParametros.oMeli.refreshToken(ClasseParametros.oMeli.RefreshToken);
                            //        oResposta = ClasseParametros.oMeli.Get("/users/me", ps);
                            //    }
                            //    ClasseParametros.oUsuarioMercadoLivre = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreUsuario>(oResposta.Content);
                            //}

                            //while (lContinua)
                            //{
                            //    //offset=3&limit=3
                            //    MercadoLivrePedido oPedidoMercadoLivre = null;

                            //    while (oPedidoMercadoLivre == null || oPedidoMercadoLivre.results == null)
                            //    {
                            //        try
                            //        {
                            //            ps = new List<Parameter>();
                            //            p = new Parameter();
                            //            p.Name = "access_token";
                            //            p.Value = ClasseParametros.oMeli.AccessToken;
                            //            ps.Add(p);
                            //            p = new Parameter();
                            //            p.Name = "seller";
                            //            p.Value = ClasseParametros.oUsuarioMercadoLivre.id;
                            //            ps.Add(p);
                            //            p = new Parameter();
                            //            p.Name = "order.status";
                            //            p.Value = "paid";
                            //            ps.Add(p);
                            //            p = new Parameter();
                            //            p.Name = "offset";
                            //            p.Value = iOffset;
                            //            ps.Add(p);
                            //            p = new Parameter();
                            //            p.Name = "limit";
                            //            p.Value = ilimit;
                            //            ps.Add(p);
                            //            p = new Parameter();
                            //            p.Name = "sort";
                            //            p.Value = "date_desc";
                            //            ps.Add(p);

                            //            oResposta = ClasseParametros.oMeli.Get("/orders/search", ps);
                            //            oPedidoMercadoLivre = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivrePedido>(oResposta.Content);

                            //            foreach (Result oPedidoAtual in oPedidoMercadoLivre.results)
                            //            {
                            //                string sSql = "SELECT * FROM VENDAS WHERE PEDIDO = '" + oPedidoAtual.id.ToString().Trim() + "'";
                            //                DataTable dtbVendasTemp = ClasseParametros.ConsultaBancoMysql(sSql);
                            //                int iTotalTemp = dtbVendasTemp.Rows.Count;
                            //                dtbVendasTemp.Dispose();

                            //                if (iTotalTemp > 0)
                            //                    continue;

                            //                if (oPedidoAtual.order_request == null)
                            //                {
                            //                    continue;
                            //                }
                            //                ps = new List<Parameter>();
                            //                p = new Parameter();
                            //                p.Name = "access_token";
                            //                p.Value = ClasseParametros.oMeli.AccessToken;
                            //                ps.Add(p);
                            //                oResposta = null;
                            //                MercadoLivreEntrega oEntrega = null;

                            //                while (oResposta == null)
                            //                {
                            //                    oResposta = ClasseParametros.oMeli.Get("orders/" + oPedidoAtual.id.ToString().Trim() + "/shipments", ps);
                            //                    oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);
                            //                    if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                            //                    {
                            //                        ClasseFuncoes.ConectaMercadoLivre(5);
                            //                        ps = new List<Parameter>();
                            //                        p = new Parameter();
                            //                        p.Name = "access_token";
                            //                        p.Value = ClasseParametros.oMeli.AccessToken;
                            //                        ps.Add(p);


                            //                        oResposta = null;
                            //                    }
                            //                    else if (oResposta.StatusCode == 0)
                            //                    {
                            //                        break;
                            //                    }
                            //                }


                            //                if (oEntrega.status == "delivered" || oEntrega.status == "pending")
                            //                {
                            //                    lContinua = false;
                            //                    break;
                            //                }

                            //                var p1 = new Parameter();
                            //                p1.Name = "shipment_ids";
                            //                p1.Value = oEntrega.id.ToString().Trim();
                            //                ps.Add(p1);

                            //                var p2 = new Parameter();
                            //                p2.Name = "response_type";
                            //                p2.Value = "zpl2";
                            //                ps.Add(p2);

                            //                oResposta = null;
                            //                while (oResposta == null)
                            //                {
                            //                    oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                            //                    if (oResposta.Content.Contains("delivered"))
                            //                    {
                            //                        ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + r["ID"].ToString() + "'");
                            //                    }
                            //                    else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                            //                    {
                            //                        ClasseFuncoes.ConectaMercadoLivre(5);
                            //                        oResposta = null;

                            //                    }
                            //                }
                            //                /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                            //                if (oResposta.StatusCode == HttpStatusCode.OK)
                            //                {
                            //                    #region Pega a nota ML

                            //                    ps = new List<Parameter>();
                            //                    p = new Parameter();
                            //                    p.Name = "access_token";
                            //                    p.Value = ClasseParametros.oMeli.AccessToken;
                            //                    ps.Add(p);
                            //                    oResposta = null;
                            //                    MercadoLivreNotaFiscal oNota = null;

                            //                    while (oResposta == null)
                            //                    {
                            //                        oResposta = ClasseParametros.oMeli.Get("/users/" + ClasseParametros.oMeli.UserId.ToString() + "/invoices/orders/" + oPedidoAtual.id.ToString(), ps);
                            //                        oNota = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreNotaFiscal>(oResposta.Content);
                            //                        if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                            //                        {
                            //                            ClasseFuncoes.ConectaMercadoLivre(5);
                            //                            ps = new List<Parameter>();
                            //                            p = new Parameter();
                            //                            p.Name = "access_token";
                            //                            p.Value = ClasseParametros.oMeli.AccessToken;
                            //                            ps.Add(p);


                            //                            oResposta = null;
                            //                        }
                            //                        else if (oResposta.StatusCode == 0)
                            //                        {
                            //                            break;
                            //                        }
                            //                    }

                            //                    #endregion





                            //                    //ClasseParametros.SalvaEtiqueta(oPedidoAtual., oResposta.RawBytes, 5, oPedidoAtual.id, "MELI");
                            //                    // sSql = "SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oPedidoAtual.mvChaveAcesso + "' AND ETIQUETATXT = ''";
                            //                    //DataTable dtbVendas = ClasseParametros.ConsultaBancoMysql(sSql);
                            //                    //if (dtbVendas.Rows.Count == 0)
                            //                    //{
                            //                    //    ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oPedidoAtual.mvChaveAcesso + "'");
                            //                    //    ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + r["ID"].ToString() + "'");
                            //                    //}
                            //                    //dtbVendas.Dispose();
                            //                    break;
                            //                }
                            //            }
                            //        }
                            //        catch (Exception ex)
                            //        {

                            //            if (oPedidoMercadoLivre == null || oPedidoMercadoLivre.results == null)
                            //                ClasseFuncoes.ConectaMercadoLivre(5);
                            //        }
                            //        Thread.Sleep(2000);
                            //        iOffset++;

                            //    }
                            //}

                            #endregion

                            #region MAGAZINE LUIZA
                            string sSenha = r["SENHAMAGALU"].ToString();
                            sUsuario = r["USUARIOMAGALU"].ToString();

                            if (sUsuario == "")
                                continue;
                            iPagina = 1;
                            iPorPagina = 50;

                            //Faturado
                            while (true)
                            {
                                ClasseParametros.sTokenMAGALU = ClasseFuncoes.Base64Encode(sUsuario + ":" + sSenha);
                                //Os possíveis status são: New, Approved, Processing, Invoiced, Shipped, Delivered, Canceled, ShipmentException.
                                client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order?page=" + iPagina.ToString() + "&perPage=" + iPorPagina.ToString() + "&Status=INVOICED");
                                RestRequest request = new RestRequest(Method.GET);
                                request.AddHeader("cache-control", "no-cache");
                                request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                                oResposta = client.Execute(request);

                                Thread.Sleep(1000);
                                JsonPedidoMagalu oPedidos = Newtonsoft.Json.JsonConvert.DeserializeObject<JsonPedidoMagalu>(oResposta.Content);

                                if (oPedidos.Total == 0)
                                {
                                    break;
                                }

                                foreach (Order oPedido in oPedidos.Orders)
                                {
                                    try
                                    {
                                        Console.WriteLine("Gerando Magalu pedido " + oPedido.IdOrder + " cliente " + sCliente);

                                        if (oPedido.InvoicedKey.Contains("35210408355660000105550010001109481882231160"))
                                        {

                                        }


                                        oPedido.CodigoCliente = int.Parse(r["CODIGO"].ToString());
                                        DataTable dtbetiqueta = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oPedido.InvoicedKey + "'");
                                        if (dtbetiqueta.Rows.Count > 0)
                                            continue;
                                        MAGALUClasseFuncoes.SalvaBancoPDFZPLMagalu(oPedido);
                                    }
                                    catch
                                    { }
                                    //string sPastaXML = dtbCliente.Rows[0]["PASTAXML"].ToString();
                                    //sPastaXML = @"C:\CLIENTES\ORLA\07-EnvioSaidaNF\";


                                    //string[] aArquivos = Directory.GetFiles(sPastaXML, "*.xml");

                                    //foreach (string sArquivo in aArquivos)
                                    //{
                                    //    string s = @"C:\Users\rrgnu\OneDrive\Documentos\n\N.F. 80430.xml";
                                    //    DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeArquivoXml(sArquivo);
                                    //    string sXML = "";

                                    //    if (oDanfe == null)
                                    //    {
                                    //        continue;
                                    //    }

                                    //    if (oDanfe.ChaveAcesso == oPedido.InvoicedKey)
                                    //    {

                                    //        oPedido.CodigoCliente = int.Parse(r["CODIGO"].ToString());



                                    //    }

                                    //}










                                }
                                request = null;
                                iPagina++;
                            }
                            #endregion

                        }
                        else
                        {



                            //string sPastaParametro = r["PASTA"].ToString();

                            ////Processo XML
                            #region Processar Nota
                            ////string sPastaXML = sPastaParametro + "\\07-EnvioSaidaNF\\";
                            ////string sPastaEtiqueta = sPastaParametro + "\\12-Etiquetas\\";

                            ////if (!Directory.Exists(sPastaXML))
                            ////{

                            ////}

                            ////string[] aArquivos = Directory.GetFiles(sPastaXML, "*.xml");

                            ////foreach (string sArquivo in aArquivos)
                            ////{
                            ////    try
                            ////    {
                            ////        bool lLivre = false;
                            ////        while (!lLivre)
                            ////        {
                            ////            FileStream stream = null;
                            ////            try
                            ////            {
                            ////                stream = File.Open(sArquivo, FileMode.Open, FileAccess.Read, FileShare.None);
                            ////                lLivre = true;
                            ////            }
                            ////            catch (IOException)
                            ////            {
                            ////                //the file is unavailable because it is:
                            ////                //still being written to
                            ////                //or being processed by another thread
                            ////                //or does not exist (has already been processed)
                            ////                lLivre = false;
                            ////            }
                            ////            finally
                            ////            {
                            ////                if (stream != null)
                            ////                    stream.Close();
                            ////            }

                            ////            //file is not locked
                            ////        }

                            ////        string sTexto = File.ReadAllText(sArquivo);
                            ////        XmlDocument doc = new XmlDocument();
                            ////        doc.LoadXml(sTexto);

                            ////        // Add a price element.
                            ////        XmlNodeList newElem = doc.GetElementsByTagName("infNFe");
                            ////        string sChaveNota = newElem[0].Attributes["Id"].InnerText.Replace("NFe", "");
                            ////        string sNota = sChaveNota.Substring(26, 8);
                            ////        newElem = doc.GetElementsByTagName("dhEmi");
                            ////        string sDataEmissao = newElem[0].InnerText;
                            ////        newElem = doc.GetElementsByTagName("CNPJ");
                            ////        string sCNPJ = newElem[0].InnerText;


                            ////        DateTime dEmissao = DateTime.Parse(sDataEmissao);

                            ////        string sPasta = Directory.GetCurrentDirectory();
                            ////        string sPastaPDFBACKUP = sPastaXML + "PDFBACKUP\\";
                            ////        if (!Directory.Exists(sPastaPDFBACKUP))
                            ////        {
                            ////            Directory.CreateDirectory(sPastaPDFBACKUP);
                            ////        }

                            ////        string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";
                            ////        if (!Directory.Exists(sPastaPDFBACKUP + sPastaDataHoje))
                            ////        {
                            ////            Directory.CreateDirectory(sPastaPDFBACKUP + sPastaDataHoje);
                            ////        }

                            ////        string sPastaSalvaDANFE = sPastaPDFBACKUP + sPastaDataHoje;

                            ////        DanfeViewModel oModel = DanfeViewModelCreator.CriarDeArquivoXml(sArquivo);
                            ////        oModel.Duplicatas.Clear();
                            ////        //Inicia o Danfe com o modelo criado
                            ////        using (Danfe danfe = new Danfe(oModel))
                            ////        {
                            ////            danfe.Gerar();
                            ////            danfe.Salvar(sPastaSalvaDANFE + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                            ////        }

                            ////        byte[] oPDFStream = File.ReadAllBytes(sPastaSalvaDANFE + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                            ////        string sSql = "";
                            ////        sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF)";
                            ////        ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                            ////        ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                            ////        ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                            ////        ParametrosSQL.Add("FINALIZADO", "0");
                            ////        ParametrosSQL.Add("CNPJ", sCNPJ);
                            ////        ParametrosSQL.Add("XML", sTexto);
                            ////        ParametrosSQL.Add("PDF", oPDFStream);
                            ////        ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                            ////        newElem = doc.GetElementsByTagName("det");

                            ////        for (int i = 0; i < newElem.Count; i++)
                            ////        {
                            ////            XmlNode eleTemp = newElem[i];
                            ////            string sEAN = eleTemp.ChildNodes[0].ChildNodes[1].InnerText;
                            ////            sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ) VALUES(@NOTA,@PRODUTO,@CNPJ)";
                            ////            ParametrosSQL.Clear();
                            ////            ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                            ////            ParametrosSQL.Add("PRODUTO", sEAN);
                            ////            ParametrosSQL.Add("CNPJ", sCNPJ);
                            ////            ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                            ////        }

                            ////        newElem = null;
                            ////        doc = null;
                            ////        oModel = null;
                            ////        GC.Collect();
                            ////        GC.WaitForPendingFinalizers();

                            ////        string sPastaXMLBACKUP = sPastaXML + "XMLBACKUP\\";

                            ////        if (!Directory.Exists(sPastaXMLBACKUP))
                            ////        {
                            ////            Directory.CreateDirectory(sPastaXMLBACKUP);
                            ////        }

                            ////        if (!Directory.Exists(sPastaXMLBACKUP + sPastaDataHoje))
                            ////        {
                            ////            Directory.CreateDirectory(sPastaXMLBACKUP + sPastaDataHoje);
                            ////        }

                            ////        File.Copy(sArquivo, sPastaXMLBACKUP + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                            ////        File.Delete(sArquivo);
                            ////    }

                            ////    catch (Exception ex)
                            ////    {
                            ////        ClasseParametros.MostraErro(ex.Message, iconApp);
                            ////    }
                            ////}

                            #endregion

                            //string sPastaXML = r["PASTAXML"].ToString();

                            //if (!Directory.Exists(sPastaXML))
                            //{
                            //    sPastaXML = "C" + sPastaXML.Substring(1);
                            //}





                            foreach (string sArquivo in lstPastas)
                            {
                                try
                                {
                                    string s = sArquivo;
                                    if (!s.ToLower().Contains(".xml"))
                                    {
                                        continue;
                                    }
                                    oFTP = (FtpWebRequest)WebRequest.Create("ftp://50.116.87.79//07-EnvioSaidaNF//" + s);

                                    oFTP.Method = WebRequestMethods.Ftp.DownloadFile;

                                    oFTP.Credentials = new NetworkCredential(r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());

                                    FtpWebResponse response = (FtpWebResponse)oFTP.GetResponse();

                                    Stream responseStream = response.GetResponseStream();

                                    StreamReader reader = new StreamReader(responseStream);

                                    string sXML = reader.ReadToEnd();
                                    string sPastaTemp = Directory.GetCurrentDirectory() + "\\" + Path.GetFileName(sArquivo.Split('.')[0] + ".xml");

                                    File.WriteAllText(sPastaTemp, sXML);

                                    reader.Close();
                                    response.Close();

                                    DanfeViewModel oModel = DanfeViewModel.CreateFromXmlFile(sPastaTemp);
                                    string sTransportadora = oModel.Transportadora.RazaoSocial;
                                    Console.WriteLine("Gerando nota e etiqueta da nota " + oModel.ChaveAcesso);

                                    //string sXML = System.IO.File.ReadAllText(s);
                                    string sTemp = "";
                                    try
                                    {
                                        int iECOMMERCE = oModel.InformacoesComplementares.IndexOf("E-COMMERCE");
                                        if (iECOMMERCE > -1)
                                        {
                                            string sComplemento = oModel.InformacoesComplementares.Substring(iECOMMERCE);

                                            sTemp = sComplemento.Substring(sComplemento.IndexOf("[") + 1, sComplemento.IndexOf("]") - sComplemento.IndexOf("["));
                                            sTemp = sTemp.Replace("]", "");
                                        }
                                        else
                                        {
                                            int iPedido = oModel.InformacoesComplementares.IndexOf("Pedido");
                                            if (iPedido > -1)
                                            {
                                                string sComplemento = oModel.InformacoesComplementares.Substring(iPedido);
                                                sTemp = sComplemento.Split(':')[1].Trim();

                                                sTemp = sTemp.Split('/')[0].Trim();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                    string sPedido = sTemp.Trim();
                                    if (sTransportadora.Contains("B2W"))
                                    {

                                    }

                                    if (sTransportadora.Contains("CORREIOS SEDEX") || sTransportadora.Contains("CORREIOS PAC"))
                                    {
                                        string sCidade = oModel.Destinatario.Municipio;
                                        string sUF = oModel.Destinatario.EnderecoUf;
                                        string sVendedor = oModel.Emitente.RazaoSocial;
                                        string sEtiquetaCorreios = "";
                                        if (oModel.Emitente.CnpjCpf == "34036601000338")
                                        {
                                            sEtiquetaCorreios = string.Format(ClasseParametros.sEtiquetaCorreios,
                                               oModel.Destinatario.RazaoSocial,
                                               oModel.Destinatario.EnderecoLogadrouro + "," + oModel.Destinatario.EnderecoNumero,
                                               oModel.Destinatario.EnderecoCep,
                                               sCidade + "-" + sUF,
                                               "Remetente: 2ELETRO COM. E DIST. DE PRODUTOS DE INFORMATICA LTDA",
                                               "Rua Samuel Meira Brasil 394",
                                               "SALA 25",
                                               "Taquara II, Serra, ES");
                                        }
                                        else
                                        {
                                            sEtiquetaCorreios = string.Format(ClasseParametros.sEtiquetaCorreios,
                              oModel.Destinatario.RazaoSocial,
                              oModel.Destinatario.EnderecoLogadrouro + "," + oModel.Destinatario.EnderecoNumero,
                              oModel.Destinatario.EnderecoCep,
                              sCidade + "-" + sUF,
                              "Remetente: " + oModel.Emitente.RazaoSocial,
                              oModel.Emitente.EnderecoLogadrouro + " " + oModel.Emitente.EnderecoNumero.ToLower(),
                              oModel.Emitente.EnderecoComplemento,
                              oModel.Emitente.EnderecoBairro + "," + oModel.Emitente.Municipio + "," + oModel.Emitente.EnderecoUf);
                                        }

                                        byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiquetaCorreios);

                                        ClasseParametros.SalvaEtiquetaAnyMarket(oModel.ChaveAcesso, aEtiqueta, "CORREIOS", iCodigoCliente, sVendedor, sTemp);
                                        SalvaNotaArquivo(int.Parse(r["CODIGO"].ToString()), sArquivo, r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                                        continue;
                                    }

                                    if (sTransportadora == "MERCADO ENVIOS SERVICOS DE LOGISTICA LTDA" || sTransportadora == "MERCADOLIVRE.COM ATIVIDADES DE INTERNET")
                                    {
                                        #region mercado livre
                                        //string sXML = System.IO.File.ReadAllText(sArquivo);

                                        //if (ClasseParametros.oMeli == null)



                                        if (ClasseParametros.oUsuarioMercadoLivre == null)
                                        {
                                            ConectaMercadoLivreAsync(iCodigoCliente);
                                        }

                                        int iOffset = 0;
                                        int ilimit = 50;
                                        List<Result> lstPedidosMercadoLivre = new List<Result>();
                                        bool lContinua = true;

                                        while (lContinua)
                                        {
                                            //offset=3&limit=3
                                            MercadoLivrePedido oPedidoMercadoLivre = null;
                                            bool lEncontrado = false;


                                            while (oPedidoMercadoLivre == null || oPedidoMercadoLivre.results == null)
                                            {
                                                try
                                                {
                                                    List<Parameter> ps = new List<Parameter>();
                                                    Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                                    ps.Add(p);
                                                    p = new Parameter("seller", ClasseParametros.oMeli.UserId, ParameterType.QueryString);
                                                    ps.Add(p);
                                                    p = new Parameter("q", sPedido, ParameterType.QueryString);
                                                    ps.Add(p);

                                                    var oRespostaPedido = ClasseParametros.oMeli.Get("/orders/search", ps);

                                                    oPedidoMercadoLivre = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivrePedido>(oRespostaPedido.Content);

                                                    if (oPedidoMercadoLivre.results.Length == 0)
                                                    {
                                                        ps = new List<Parameter>();
                                                        p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                                        ps.Add(p);
                                                        p = new Parameter("seller", ClasseParametros.oUsuarioMercadoLivre.id, ParameterType.QueryString);
                                                        ps.Add(p);
                                                        p = new Parameter("order.status", "paid", ParameterType.QueryString);
                                                        ps.Add(p);
                                                        p = new Parameter("offset", iOffset, ParameterType.QueryString);
                                                        ps.Add(p);
                                                        p = new Parameter("limit", ilimit, ParameterType.QueryString);
                                                        ps.Add(p);
                                                        p = new Parameter("sort", "date_desc", ParameterType.QueryString);
                                                        ps.Add(p);

                                                        oRespostaPedido = ClasseParametros.oMeli.Get("/orders/search", ps);
                                                        oPedidoMercadoLivre = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivrePedido>(oRespostaPedido.Content);

                                                        if (oPedidoMercadoLivre.results.Length == 0)
                                                        {
                                                            lEncontrado = true;
                                                            break;
                                                        }

                                                        Result[] lstResult = oPedidoMercadoLivre.results.Where(x => x.pack_id != null && x.pack_id.ToString() == sPedido).ToArray();

                                                        if (lstResult.Length == 0)
                                                        {
                                                            iOffset += 50;
                                                            oPedidoMercadoLivre = null;
                                                        }
                                                        else
                                                        {
                                                            oPedidoMercadoLivre.results = lstResult;
                                                            break;
                                                        }
                                                    }
                                                }
                                                catch (Exception ex)
                                                {

                                                    if (oPedidoMercadoLivre == null || oPedidoMercadoLivre.results == null)
                                                        ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                                                }
                                                Thread.Sleep(2000);
                                            }



                                            foreach (Result oPedido in oPedidoMercadoLivre.results)
                                            {
                                                Console.WriteLine("Gerando ML pedido " + oPedido.id.ToString() + " cliente " + sCliente);

                                                try
                                                {

                                                    if (oPedido.status == "paid" && (oPedido.shipping.status == "ready_to_ship" || oPedido.shipping.status == null))
                                                    {
                                                        List<Parameter> ps = new List<Parameter>();
                                                        Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                                        ps.Add(p);


                                                        oResposta = null;
                                                        MercadoLivreEntrega oEntrega = null;


                                                        while (oResposta == null)
                                                        {
                                                            oResposta = ClasseParametros.oMeli.Get("orders/" + oPedido.id.ToString() + "/shipments", ps);

                                                            if (oResposta.StatusCode == HttpStatusCode.NotFound)
                                                            {
                                                                oResposta = ClasseParametros.oMeli.Get("orders/" + r["ID"].ToString() + "/shipments", ps);

                                                            }

                                                            oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);

                                                            if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                                            {
                                                                ClasseFuncoes.ConectaMercadoLivreAsync(5);


                                                                oResposta = null;
                                                            }
                                                            else if (oResposta.StatusCode == 0)
                                                            {
                                                                ClasseFuncoes.ConectaMercadoLivreAsync(5);

                                                                oResposta = null;
                                                            }
                                                        }

                                                        ps = new List<Parameter>();
                                                        p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                                        ps.Add(p);
                                                        p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                                                        ps.Add(p);
                                                        p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                                                        ps.Add(p);

                                                        oResposta = null;
                                                        while (oResposta == null)
                                                        {


                                                            oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                                                            if (oResposta.Content.Contains("delivered") || oResposta.Content.Contains("shipped"))
                                                            {
                                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oPedido.id.ToString() + "'");
                                                                SalvaNotaArquivo(int.Parse(r["CODIGO"].ToString()), sArquivo, r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                                                                lEncontrado = true;
                                                                break;
                                                            }
                                                            else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                                            {
                                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                                                                oResposta = null;

                                                            }

                                                        }
                                                        /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                                                        if (oResposta.StatusCode == HttpStatusCode.OK)
                                                        {
                                                            ClasseParametros.SalvaEtiqueta(oModel.ChaveAcesso, oResposta.RawBytes, iCodigoCliente, oPedido.id.ToString(), "MELI");

                                                            lEncontrado = true;

                                                            SalvaNotaArquivo(int.Parse(r["CODIGO"].ToString()), sArquivo, r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                                                            break;
                                                        }
                                                        break;
                                                    }
                                                    else
                                                    {
                                                        SalvaNotaArquivo(int.Parse(r["CODIGO"].ToString()), sArquivo, r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                                                        break;
                                                    }
                                                }
                                                catch (Exception ex)
                                                {


                                                }
                                            }
                                            iOffset += 50;

                                            if (lEncontrado)
                                                break;
                                        }

                                        #endregion

                                    }

                                    if (sTransportadora == "B2W ENTREGAS")
                                    {
                                        #region B2W
                                        SalvaNotaArquivo(int.Parse(r["CODIGO"].ToString()), sArquivo, r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());

                                        #endregion
                                    }

                                    if (sTransportadora == "MAGALU ENTREGAS")
                                    {
                                        SalvaNotaArquivo(int.Parse(r["CODIGO"].ToString()), sArquivo, r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                                    }

                                    if (sTransportadora == "NETSHOES ENTREGAS")
                                    {
                                        SalvaNotaArquivo(int.Parse(r["CODIGO"].ToString()), sArquivo, r["USUARIOFTP"].ToString(), r["SENHAFTP"].ToString());
                                    }
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                            if (r["USUARIOMAGALU"].ToString() != "")
                            {
                                #region MAGALU

                                string sSenha = r["SENHAMAGALU"].ToString();
                                string sUsuario = r["USUARIOMAGALU"].ToString();

                                if (sUsuario == "")
                                    continue;
                                int iPagina = 1;
                                int iPorPagina = 50;

                                //Faturado
                                while (true)
                                {
                                    try
                                    {
                                        ClasseParametros.sTokenMAGALU = ClasseFuncoes.Base64Encode(sUsuario + ":" + sSenha);
                                        //Os possíveis status são: New, Approved, Processing, Invoiced, Shipped, Delivered, Canceled, ShipmentException.
                                        client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order?page=" + iPagina.ToString() + "&perPage=" + iPorPagina.ToString() + "&Status=INVOICED");
                                        RestRequest request = new RestRequest(Method.GET);
                                        request.AddHeader("cache-control", "no-cache");
                                        request.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                                        oResposta = client.Execute(request);

                                        Thread.Sleep(1000);
                                        JsonPedidoMagalu oPedidos = Newtonsoft.Json.JsonConvert.DeserializeObject<JsonPedidoMagalu>(oResposta.Content);

                                        if (oPedidos.Orders == null)
                                        {
                                            break;
                                        }

                                        foreach (Order oPedido in oPedidos.Orders)
                                        {
                                            Console.WriteLine("Gerando MAGALU pedido " + oPedido.IdOrder + " cliente " + sCliente);

                                            if (oPedido.InvoicedKey.Contains("35200608355660000105550010000845311395776907"))
                                            {

                                            }

                                            oPedido.CodigoCliente = int.Parse(r["CODIGO"].ToString());
                                            DataTable dtbetiqueta = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oPedido.InvoicedKey + "'");
                                            if (dtbetiqueta.Rows.Count > 0)
                                                continue;
                                            MAGALUClasseFuncoes.SalvaBancoPDFZPLMagalu(oPedido);
                                        }
                                        request = null;
                                    }
                                    catch (Exception ex)
                                    {

                                    }

                                    iPagina++;
                                }



                                #endregion
                            }


                            if (r["KEYB2W"].ToString() != "")
                            {
                                #region B2W

                                string sKey = r["KEYB2W"].ToString();
                                string sUsuario = r["USUARIOB2W"].ToString();
                                string sAccount = r["ACCOUNTMANAGERB2W"].ToString();

                                int iPagina = 1;
                                int iPorPagina = 50;
                                int iTotal = 0;
                                bool lRodando = true;

                                while (lRodando)
                                {
                                    oResposta = null;
                                    while (oResposta == null)
                                    {
                                        client = new RestClient("https://api.skyhub.com.br/orders?filters[statuses][]=order_invoiced&page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                                        //client = new RestClient("https://api.skyhub.com.br/orders?page=" + iPagina.ToString() + "&per_page=" + iPorPagina.ToString());
                                        //client = new RestClient("https://api.skyhub.com.br/orders?page=0&per_page=50");
                                        oRequest = new RestRequest(Method.GET);
                                        oRequest.AddHeader("cache-control", "no-cache");
                                        oRequest.AddHeader("Accept", "application/json");
                                        oRequest.AddHeader("Content-Type", "application/json");
                                        oRequest.AddHeader("x-Api-Key", sKey);
                                        oRequest.AddHeader("X-User-Email", sUsuario);
                                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                                        oResposta = client.Execute(oRequest);

                                        if (oResposta.StatusCode == HttpStatusCode.BadGateway || oResposta.StatusCode == HttpStatusCode.GatewayTimeout || oResposta.StatusCode == HttpStatusCode.InternalServerError || oResposta.StatusCode == 0)
                                        {
                                            oResposta = null;
                                        }
                                    }
                                    Thread.Sleep(200);

                                    if (oResposta.Content == "Account  not found")
                                    {
                                        continue;
                                    }
                                    if (oResposta.Content.Contains("504 Gateway Time-ou"))
                                    {
                                        continue;
                                    }

                                    B2WPedidos lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPedidos>(oResposta.Content);
                                    if (lstPedido.orders == null || lstPedido.orders.Length == 0)
                                    {
                                        break;
                                    }

                                    if (lstPedido.orders[0].placed_at < DateTime.Now.AddDays(-8))
                                    {
                                        lRodando = false;
                                        break;
                                    }

                                    List<B2WPedido> lstB2WPedido = lstPedido.orders.Where(x => x.invoices.Length > 0).ToList();

                                    foreach (B2WPedido oPedido in lstB2WPedido)
                                    {

                                        Console.WriteLine("Gerando B2W pedido " + oPedido.code + " cliente " + sCliente);


                                        if (oPedido.invoices[0].key == "32200729079030000117550010000280821598346678")
                                        {

                                        }
                                        bool lOk = false;

                                        client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                        var request = new RestRequest(Method.POST);
                                        request.AddHeader("Content-Length", "52");
                                        request.AddHeader("Cache-Control", "no-cache");
                                        request.AddHeader("Accept", "application/json");
                                        request.AddHeader("Content-Type", "application/json");
                                        request.AddHeader("x-Api-Key", sKey);
                                        request.AddHeader("X-User-Email", sUsuario);
                                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                        string sPost = "{\n  \"order_remote_codes\": [\n    \"" + oPedido.code.Split('-')[1] + "\"\n  ]\n}";
                                        request.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                        IRestResponse response = client.Execute(request);
                                        if (response.Content.Contains("nao encontrada") || response.Content.Contains("nao localizados"))
                                        {
                                            continue;
                                        }

                                        Thread.Sleep(100);
                                        for (int i = 0; i < 12; i++)
                                        {
                                            if (response.StatusCode.ToString() == "422")
                                            {
                                                response = client.Execute(request);
                                            }
                                            else if (response.StatusCode.ToString() == "429")
                                            {
                                                Thread.Sleep(15000);

                                                client.ClearHandlers();
                                                client = null;
                                                request = null;
                                                client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                                request = new RestRequest(Method.POST);
                                                request.AddHeader("Content-Length", "52");
                                                request.AddHeader("Cache-Control", "no-cache");
                                                request.AddHeader("Accept", "application/json");
                                                request.AddHeader("Content-Type", "application/json");
                                                request.AddHeader("x-Api-Key", r["KEYB2W"].ToString());
                                                request.AddHeader("X-User-Email", r["USUARIOB2W"].ToString());
                                                sPost = "{\n  \"order_remote_codes\": [\n    \"" + oPedido.code.Split('-')[1] + "\"\n  ]\n}";
                                                request.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                                response = client.Execute(request);
                                                Thread.Sleep(200);

                                            }
                                            else
                                                break;
                                        }

                                        if (response.StatusCode == HttpStatusCode.Created)
                                        {
                                            string sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                            client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                            request = new RestRequest(Method.GET);
                                            request.AddHeader("cache-control", "no-cache");
                                            request.AddHeader("Accept", "application/json");
                                            request.AddHeader("Content-Type", "application/json");
                                            request.AddHeader("x-Api-Key", r["KEYB2W"].ToString());
                                            request.AddHeader("X-User-Email", r["USUARIOB2W"].ToString());
                                            response = client.Execute(request);
                                            Thread.Sleep(100);

                                            EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                            if (oJsonB2W.plp != null)
                                            {
                                                string sEtiqueta = GeraEtiquetaB2W(oJsonB2W, oPedido.code.Split('-')[1], oJsonB2W.docsExternos[0].tpEntrega);
                                                byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                                ClasseParametros.SalvaEtiquetaAnyMarket(oPedido.invoices[0].key, aEtiqueta, oPedido.code.Split('-')[0], int.Parse(r["CODIGO"].ToString()), oPedido.code.Split('-')[0], oPedido.code);
                                                // salva json

                                                if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                                File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oPedido.invoices[0].key + ".json", response.Content); // Requires System.IO
                                            }
                                            lOk = true;
                                            break;
                                        }
                                        if (!lOk)
                                        {

                                        }
                                    }

                                    iTotal += lstPedido.orders.Length;

                                    Application.DoEvents();

                                    iPagina += 1;
                                }



                                #endregion
                            }


                        }
                    }
                    catch (Exception ex)
                    {
                        if (ClasseParametros.oMeli == null)
                            ClasseFuncoes.ConectaMercadoLivreAsync(int.Parse(dtbCliente.Rows[0]["CODIGO"].ToString()));
                    }

                }


                int iProgresso = 0;


                foreach (Content oAnymarket in lstContent)
                {
                    try
                    {
                        if (oAnymarket.marketPlaceId.Contains("275928599301"))
                        {

                        }


                        Console.WriteLine("Gerando " + oAnymarket.marketPlace + " pedido " + oAnymarket.marketPlaceId + " cliente " + sCliente);



                        DataTable dtbNota = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oAnymarket.invoice.accessKey.ToString() + "' ");

                        if (dtbNota.Rows.Count > 0)
                        {
                            dtbNota.Dispose();


                            continue;
                        }
                        dtbNota.Dispose();

                        string sEtiqueta = "";

                        if (oAnymarket.invoice.accessKey == "35200508355660000105550010000807741348889004")
                        {

                        }

                        if (oAnymarket.marketPlace.Contains("B2W"))
                        {
                            bool lOk = false;
                            foreach (DataRow r in dtbCliente.Rows)
                            {
                                DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + r["CODIGO"].ToString());
                                string sKey = d.Rows[0]["KEYB2W"].ToString();
                                string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                string sAccount = d.Rows[0]["ACCOUNTMANAGERB2W"].ToString();
                                d.Dispose();


                                client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                var request = new RestRequest(Method.POST);
                                request.AddHeader("Content-Length", "52");
                                request.AddHeader("Cache-Control", "no-cache");
                                request.AddHeader("Accept", "application/json");
                                request.AddHeader("Content-Type", "application/json");
                                request.AddHeader("x-Api-Key", sKey);
                                request.AddHeader("X-User-Email", sUsuario);
                                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oAnymarket.marketPlaceId, @"[^\d]")) + "\"\n  ]\n}";
                                request.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                IRestResponse response = client.Execute(request);
                                if (response.Content.Contains("nao encontrada"))
                                {
                                    continue;
                                }

                                Thread.Sleep(100);
                                for (int i = 0; i < 12; i++)
                                {
                                    if (response.StatusCode.ToString() == "422")
                                    {
                                        response = client.Execute(request);
                                    }
                                    else if (response.StatusCode.ToString() == "429")
                                    {
                                        Thread.Sleep(15000);

                                        client.ClearHandlers();
                                        client = null;
                                        request = null;
                                        client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                        request = new RestRequest(Method.POST);
                                        request.AddHeader("Content-Length", "52");
                                        request.AddHeader("Cache-Control", "no-cache");
                                        request.AddHeader("Accept", "application/json");
                                        request.AddHeader("Content-Type", "application/json");
                                        request.AddHeader("x-Api-Key", r["KEYB2W"].ToString());
                                        request.AddHeader("X-User-Email", r["USUARIOB2W"].ToString());
                                        sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oAnymarket.marketPlaceId, @"[^\d]")) + "\"\n  ]\n}";
                                        request.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                        response = client.Execute(request);
                                        Thread.Sleep(200);

                                    }
                                    else
                                        break;
                                }

                                if (response.StatusCode == HttpStatusCode.Created)
                                {
                                    string sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                    request = new RestRequest(Method.GET);
                                    request.AddHeader("cache-control", "no-cache");
                                    request.AddHeader("Accept", "application/json");
                                    request.AddHeader("Content-Type", "application/json");
                                    request.AddHeader("x-Api-Key", r["KEYB2W"].ToString());
                                    request.AddHeader("X-User-Email", r["USUARIOB2W"].ToString());
                                    response = client.Execute(request);
                                    Thread.Sleep(100);

                                    EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                    if (oJsonB2W.plp != null)
                                    {
                                        sEtiqueta = GeraEtiquetaB2W(oJsonB2W, oAnymarket.marketPlaceId.Split('-')[0], oJsonB2W.docsExternos[0].tpEntrega);
                                        byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                        ClasseParametros.SalvaEtiquetaAnyMarket(oAnymarket.invoice.accessKey, aEtiqueta, oAnymarket.marketPlace, oAnymarket.CodigoCliente, oAnymarket.marketPlaceId.Split('-')[0], oAnymarket.marketPlaceId);
                                        // salva json

                                        if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                            Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                        File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oAnymarket.invoice.accessKey + ".json", response.Content); // Requires System.IO
                                    }
                                    lOk = true;
                                    break;
                                }
                            }
                            if (!lOk)
                            {

                            }
                        }
                        else if (oAnymarket.marketPlace == "MERCADO_LIVRE")
                        {
                            client = new RestClient("http://api.anymarket.com.br/v2/printtag/zpl2");
                            var request = new RestRequest(Method.POST);
                            request.AddHeader("cache-control", "no-cache");
                            request.AddHeader("Accept-Encoding", "gzip, deflate");
                            request.AddHeader("Host", "api.anymarket.com.br");
                            request.AddHeader("Cache-Control", "no-cache");
                            request.AddHeader("Accept", "application/json");
                            request.AddHeader("Content-Type", "application/json");
                            request.AddHeader("gumgaToken", oAnymarket.TokenCliente);
                            request.AddParameter("application/json", "{\"orders\":[" + oAnymarket.id + "]}", ParameterType.RequestBody);
                            IRestResponse response = client.Execute(request);
                            if (response.StatusCode != HttpStatusCode.BadRequest)
                            {
                                ClasseParametros.SalvaEtiqueta(oAnymarket.invoice.accessKey, response.RawBytes, oAnymarket.CodigoCliente, "BaseInfo", "MELI");
                            }
                        }
                        else if (oAnymarket.marketPlace == "MAGAZINE_LUIZA")
                        {
                            if (oAnymarket.UsuarioMAGALU != "")
                            {
                                client = new RestClient("http://api.anymarket.com.br/v2/printtag/zpl");
                                var request = new RestRequest(Method.POST);
                                request.AddHeader("cache-control", "no-cache");
                                request.AddHeader("Accept-Encoding", "gzip, deflate");
                                request.AddHeader("Cache-Control", "no-cache");
                                request.AddHeader("Accept", "application/zpl");
                                request.AddHeader("Content-Type", "application/zpl");
                                request.AddHeader("gumgaToken", oAnymarket.TokenCliente);
                                request.AddParameter("application/json", "{\"orders\":[" + oAnymarket.id + "]}", ParameterType.RequestBody);
                                IRestResponse response = client.Execute(request);
                                if (response.StatusCode != HttpStatusCode.BadRequest)
                                {
                                    ClasseParametros.SalvaEtiqueta(oAnymarket.invoice.accessKey, response.RawBytes, oAnymarket.CodigoCliente, "BaseInfo", "MAGAZINE_LUIZA");
                                }


                                #region Funciona 100% magazine luiza
                                //DataTable dtbChaves = ClasseParametros.ConsultaBanco("SELECT PORANYMARKET,USUARIOMAGALU,SENHAMAGALU,PORARQUIVO, CODIGO, CLIENTE, IDMERCADOLIVRE, SENHAMERCADOLIVRE, CODEMERCADOLIVRE, ACCESSTOKENMERCADOLIVRE,REFRESHTOKENMERCADOLIVRE,KEYB2W,USUARIOB2W,REMETENTE,ENDERECO,CEP,CIDADE,UF,GUMGATOKENANYMARKET FROM CLIENTE WHERE CODIGO IN (1,2,4)");
                                //Order oJson = null;
                                //foreach (DataRow rChaves in dtbChaves.Rows)
                                //{
                                //    if (rChaves["USUARIOMAGALU"].ToString() != "")
                                //    {
                                //        string sAPI = ClasseFuncoes.Base64Encode(rChaves["USUARIOMAGALU"].ToString() + ":" + rChaves["SENHAMAGALU"].ToString());
                                //        //var client = new RestClient("https://api-integra.azurewebsites.net/api/Order?page=1&perPage=50&Status=INVOICED");
                                //        var client = new RestClient("https://api-integra.azurewebsites.net/api/Order/" + oAnymarket.marketPlaceId);
                                //        var request = new RestRequest(Method.GET);
                                //        request.AddHeader("cache-control", "no-cache");
                                //        request.AddHeader("authorization", "Basic " + sAPI);
                                //        //request.AddHeader("authorization", "Basic " + Base64Encode("lojamegastoreapi:LyJymDIY4gwX"));
                                //        IRestResponse response = client.Execute(request);
                                //        if (response.StatusCode == HttpStatusCode.OK)
                                //        {
                                //            oJson = Newtonsoft.Json.JsonConvert.DeserializeObject<Order>(response.Content);
                                //            //decimal ePagina = Math.Ceiling(decimal.Divide(oJson.Total, 50));
                                //            try
                                //            {
                                //                // Gera tracking
                                //                oJson.CodigoCliente = oAnymarket.CodigoCliente;
                                //                ClasseParametros.SalvaBancoPDFZPLMagalu(oJson, rChaves["USUARIOMAGALU"].ToString(), rChaves["SENHAMAGALU"].ToString());

                                //            }
                                //            catch (Exception ex)
                                //            {
                                //                ClasseParametros.MostraErro(ex.Message, ClasseParametros.iconApp);
                                //            }
                                //            break;
                                //        }
                                //    }
                                //}
                                #endregion 

                                //if (ePagina > 1)
                                //    for (int i = 2; i <= ePagina; i++)
                                //    {
                                //        client = new RestClient("https://api-integra.azurewebsites.net/api/Order?page=" + i + "&perPage=50&Status=INVOICED");
                                //        request = new RestRequest(Method.GET);
                                //        request.AddHeader("cache-control", "no-cache");
                                //        request.AddHeader("authorization", "Basic " + ClasseFuncoes.Base64Encode(oAnymarket.UsuarioMAGALU + ":" + oAnymarket.SenhaMAGALU));
                                //        //request.AddHeader("authorization", "Basic " + Base64Encode("lojamegastoreapi:LyJymDIY4gwX"));
                                //        response = client.Execute(request);
                                //        oJson = Newtonsoft.Json.JsonConvert.DeserializeObject<JsonPedidoMagalu>(response.Content);
                                //        foreach (Order oPedido in oJson.Orders)
                                //        {
                                //            try
                                //            {
                                //                //gera tracking
                                //                oPedido.CodigoCliente = oAnymarket.CodigoCliente;
                                //                ClasseParametros.SalvaBancoPDFZPLMagalu(oPedido, oAnymarket);
                                //            }
                                //            catch (Exception ex)
                                //            {
                                //                ClasseParametros.MostraErro(ex.Message, ClasseParametros.iconApp);
                                //            }
                                //        }
                                //    }
                            }
                            else
                            {
                                //ClasseParametros.MostraErro("Solicitar chave magalu cliente " + oAnymarket.CodigoCliente.ToString(), iconApp);
                            }
                        }
                        else
                        {
                            byte[] aEtiqueta = null;
                            //ClasseParametros.SalvaEtiquetaAnyMarket(oAnymarket.invoice.accessKey, aEtiqueta, oAnymarket.marketPlace, oAnymarket.CodigoCliente, oAnymarket.subChannel, oAnymarket.marketPlaceId);
                        }
                    }
                    catch (Exception ex)
                    {
                        ClasseFuncoes.SalvaLogServicos(ex.Message);

                    }

                    Application.DoEvents();
                    iProgresso++;
                }
            }
            catch (Exception ex)
            {
                ClasseFuncoes.SalvaLogServicos(ex.Message);

            }



        }


        public static void SalvaEtiquetaArquivo(int iCliente, string sArquivo, string sUsuarioFTP, string sSenhaFTP)
        {
            try
            {
                Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                FtpWebRequest oFTP = (FtpWebRequest)WebRequest.Create("ftp://50.116.87.79//12-Etiquetas//" + sArquivo);

                oFTP.Method = WebRequestMethods.Ftp.DownloadFile;

                oFTP.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);

                FtpWebResponse responseFTP = (FtpWebResponse)oFTP.GetResponse();

                Stream responseStream = responseFTP.GetResponseStream();

                StreamReader reader = new StreamReader(responseStream);

                string sXML = reader.ReadToEnd();
                string sPastaTemp = Directory.GetCurrentDirectory() + "\\" + Path.GetFileName(sArquivo.Split('.')[0] + ".txt");

                File.WriteAllText(sPastaTemp, sXML);

                reader.Close();
                responseFTP.Close();

                // salva etiquetas
                try
                {
                    bool lLivre = false;
                    while (!lLivre)
                    {
                        FileStream stream = null;
                        try
                        {
                            stream = File.Open(sPastaTemp, FileMode.Open, FileAccess.Read, FileShare.None);
                            lLivre = true;
                        }
                        catch (IOException)
                        {
                            //the file is unavailable because it is:
                            //still being written to
                            //or being processed by another thread
                            //or does not exist (has already been processed)
                            lLivre = false;
                        }
                        finally
                        {
                            if (stream != null)
                                stream.Close();
                        }
                        //file is not locked
                    }

                    byte[] aEtiqueta = null;
                    string sTexto = File.ReadAllText(sPastaTemp);
                    string sSql = "";
                    string sEtiqueta = "";
                    string sTransportadora = "";

                    //Console.WriteLine("Gerando etiqueta " + sArquivo);


                    if (sArquivo.Contains("_"))
                    {
                        sTransportadora = sArquivo.Split('_')[1].Split('.')[0];
                    }
                    else
                    {
                        sTransportadora = "CORREIOS";

                    }

                    if (sTransportadora.ToUpper() == "MELI")
                    {
                        ClasseOrlaMercadoLivre oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<ClasseOrlaMercadoLivre>(sTexto);
                        sEtiqueta = oJsonB2W.content;
                        aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                    }
                    else if (sTransportadora.ToUpper() == "B2W")
                    {
                        EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(sTexto);
                        if (oJsonB2W.plp != null)
                        {
                            sSql = "";
                            sEtiqueta = GeraEtiquetaB2W(oJsonB2W, "", "");
                            aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                        }
                    }
                    else if (sTransportadora == "CORREIOS")
                    {
                        //A chave de acesso da NF-e é um número de 44 dígitos
                        //calculado de acordo com o manual de integração do
                        //contribuinte(disponibilizado no portal do NF - e).
                        //(02 dígitos) ***Código do Estado(UF) do emitente
                        //(04 dígitos) * **Ano e mês da emissão da NF - e(no formato AAMM)
                        //(14 dígitos) * **CNPJ do emitente da NF - e(CNPJ da sua Empresa)
                        //(02 dígitos) * **Modelo do NF - e
                        //(03 dígitos) * **Série do NF - e
                        //(09 dígitos) * **Número da NF - e
                        //(09 dígitos) * **Código da NF-e - Número gerado pelo sistema
                        //(01 dígitos) * **Dígito verificador - DV(Cálculo no módulo 11).
                        //Ex.de chave de acesso do NF - e:
                        //51080701212344000127550010000000981364112281
                        //51 * 0807 * 01212344000127 * 55 * 001 * 000000098 * 136411228 * 1
                        //Parte do Código Significado
                        //51 = Código do Estado
                        //0807 = Ano e mês da emissão da NF-e
                        //01212344000127 = CNPJ do Emitente
                        //55 = Modelo da NF-e
                        //001 = Série da NF-e
                        //000000098 = Número da NF-e
                        //136411778 = Código da NF-e
                        //1 = DV(digito verificador)
                        string sExtensao = sArquivo.Split('.')[1];
                        if (sExtensao.ToLower() == "txt")
                        {
                            sEtiqueta = sTexto;

                            aEtiqueta = Encoding.UTF8.GetBytes(sTexto);


                            if (aEtiqueta != null)
                            {
                                DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0] + "'");
                                if (d.Rows.Count > 0)
                                {
                                    sSql = "UPDATE VENDAS SET ETIQUETATXTTXT = @ETIQUETATXTTXT, ETIQUETATXT=@ETQ,LOJA=@LOJA,CODIGOCLIENTE=@CODIGOCLIENTE WHERE NOTAFISCAL = @NOTA";
                                }
                                else
                                {
                                    sSql = "INSERT INTO VENDAS(NOTAFISCAL,ETIQUETATXT,ETIQUETATXTTXT,LOJA,DATACRIADO,LOTE,CODIGOCLIENTE) VALUES(@NOTA,@ETQ,@ETIQUETATXTTXT,@LOJA,@DATACRIADO,@LOTE,@CODIGOCLIENTE)";
                                    ParametrosSQL.Add("@DATACRIADO", DateTime.Now);
                                    ParametrosSQL.Add("@LOTE", ClasseParametros.PegaLote(Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1], iCliente.ToString()));
                                }
                                d.Dispose();

                                File.WriteAllBytes(Directory.GetCurrentDirectory() + "\\XMLETQ\\" + Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0] + ".TXT", aEtiqueta); // Requires System.IO

                                ParametrosSQL.Add("@ETQ", aEtiqueta);
                                ParametrosSQL.Add("@ETIQUETATXTTXT", sEtiqueta);
                                ParametrosSQL.Add("@NOTA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0]);
                                ParametrosSQL.Add("@LOJA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1]);
                                ParametrosSQL.Add("@CODIGOCLIENTE", iCliente);
                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                                //if (!Directory.Exists(sPastaEtiqueta + "\\JSONTXTBACKUP\\"))
                                //{
                                //    Directory.CreateDirectory(sPastaEtiqueta + "\\JSONTXTBACKUP\\");
                                //}

                                //string sPastaEtiquetaBackup = sPastaEtiqueta + "\\JSONTXTBACKUP\\";
                                //string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";
                                //if (!Directory.Exists(sPastaEtiquetaBackup + sPastaDataHoje))
                                //{
                                //    Directory.CreateDirectory(sPastaEtiquetaBackup + sPastaDataHoje);
                                //}


                                //File.Copy(sArquivo, sPastaEtiquetaBackup + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                                File.Delete(sArquivo);
                            }
                        }
                        else
                        {
                            //string sTextoXMl = File.ReadAllText(sArquivo);
                            //var sr = new StreamReader(sArquivo, Encoding.GetEncoding("ISO-8859-1"));
                            int iTOtal = 0;

                            try

                            {

                                XmlDocument doc = new XmlDocument();
                                doc.Load(sArquivo);
                                XmlElement root = doc.DocumentElement;
                                XmlNodeList nodesObjetoPostal = root.SelectNodes("objeto_postal"); // You can also use XPath here
                                XmlNodeList nodeplp = root.SelectNodes("plp"); // You can also use XPath here
                                XmlNode nodecartao_postagem = nodeplp[0].SelectSingleNode("cartao_postagem");
                                // remetente
                                XmlNodeList nodesRemetente = root.SelectNodes("remetente"); // You can also use XPath here
                                string sCartaoPostagem = nodecartao_postagem.InnerText;


                                foreach (XmlNode nodeObjetoPostal in nodesObjetoPostal)
                                {
                                    XmlNode nodeNacional = nodeObjetoPostal.SelectNodes("nacional")[0];
                                    XmlNode nodnumero_nota_fiscal = nodeNacional.SelectSingleNode("numero_nota_fiscal");
                                    string sNota = nodnumero_nota_fiscal.InnerText;
                                    Console.WriteLine("Etiqueta correios da nota " + sNota);

                                    DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM NOTAMASTER WHERE NOTA = '" + sNota + "'");
                                    if (d.Rows.Count > 0)
                                    {
                                        string sChaveNota = d.Rows[0]["CHAVENOTA"].ToString();
                                        ClasseCorreiosLocal.GeraEtiquetaCorreios(sCartaoPostagem, nodesRemetente, nodeObjetoPostal, sChaveNota, iCliente.ToString());
                                        iTOtal++;
                                    }
                                }

                                if (iTOtal == nodesObjetoPostal.Count)
                                {
                                    //string sPastaEtiquetaBackup = sPastaEtiqueta + "\\JSONTXTBACKUP\\";
                                    //string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";


                                    //File.Copy(sArquivo, sPastaEtiquetaBackup + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                                    File.Delete(sArquivo);
                                }
                            }
                            catch (Exception ex1)
                            {

                            }
                        }


                    }
                    else if ((sArquivo.Split('_')[1].Split('.')[0].Contains("MAGA")) || sArquivo.Split('_')[1].Split('.')[0].Contains("NET"))
                    {
                        //List<string> lstZPL = ZplFromPdf(new MemoryStream(Convert.FromBase64String(sArquivo)), new Size(0, 0), 300);

                        //aEtiqueta = Encoding.UTF8.GetBytes(sTexto);
                    }
                    else
                    {
                        sEtiqueta = sTexto;

                        aEtiqueta = Encoding.UTF8.GetBytes(sTexto);
                    }

                    if (aEtiqueta != null)
                    {
                        DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0] + "'");
                        if (d.Rows.Count > 0)
                        {
                            sSql = "UPDATE VENDAS SET ETIQUETATXTTXT = @ETIQUETATXTTXT, ETIQUETATXT=@ETQ,LOJA=@LOJA,CODIGOCLIENTE=@CODIGOCLIENTE WHERE NOTAFISCAL = @NOTA";
                        }
                        else
                        {
                            sSql = "INSERT INTO VENDAS(NOTAFISCAL,ETIQUETATXT,ETIQUETATXTTXT,LOJA,DATACRIADO,LOTE,CODIGOCLIENTE) VALUES(@NOTA,@ETQ,@ETIQUETATXTTXT,@LOJA,@DATACRIADO,@LOTE,@CODIGOCLIENTE)";
                            ParametrosSQL.Add("@DATACRIADO", DateTime.Now);
                            ParametrosSQL.Add("@LOTE", ClasseParametros.PegaLote(Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1], iCliente.ToString()));
                        }
                        d.Dispose();

                        File.WriteAllBytes(Directory.GetCurrentDirectory() + "\\XMLETQ\\" + Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0] + ".TXT", aEtiqueta); // Requires System.IO

                        ParametrosSQL.Add("@ETQ", aEtiqueta);
                        ParametrosSQL.Add("@ETIQUETATXTTXT", sEtiqueta);
                        ParametrosSQL.Add("@NOTA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0]);
                        ParametrosSQL.Add("@LOJA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1]);
                        ParametrosSQL.Add("@CODIGOCLIENTE", iCliente);
                        ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                        //if (!Directory.Exists(sPastaEtiqueta + "\\JSONTXTBACKUP\\"))
                        //{
                        //    Directory.CreateDirectory(sPastaEtiqueta + "\\JSONTXTBACKUP\\");
                        //}

                        //string sPastaEtiquetaBackup = sPastaEtiqueta + "\\JSONTXTBACKUP\\";
                        //string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";
                        //if (!Directory.Exists(sPastaEtiquetaBackup + sPastaDataHoje))
                        //{
                        //    Directory.CreateDirectory(sPastaEtiquetaBackup + sPastaDataHoje);
                        //}


                        //File.Copy(sArquivo, sPastaEtiquetaBackup + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                        File.Delete(sPastaTemp);


                        FtpWebRequest requestDelete = (FtpWebRequest)WebRequest.Create("ftp://50.116.87.79//12-Etiquetas//" + sArquivo);

                        //If you need to use network credentials
                        requestDelete.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                        //additionally, if you want to use the current user's network credentials, just use:
                        //System.Net.CredentialCache.DefaultNetworkCredentials

                        requestDelete.Method = WebRequestMethods.Ftp.DeleteFile;
                        FtpWebResponse responsedelete = (FtpWebResponse)requestDelete.GetResponse();
                        responsedelete.Close();

                    }
                }

                catch (Exception ex)
                {
                    // ClasseParametros.MostraErro(ex.Message, iconApp);
                }

            }
            catch (Exception ex)
            {

            }

        }


        public static void SalvaNotaArquivo(int iCliente, string sArquivo, string sUsuarioFTP, string sSenhaFTP)
        {
            Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

            try
            {
                //bool lLivre = false;
                //while (!lLivre)
                //{
                //    FileStream stream = null;
                //    try
                //    {
                //        stream = File.Open(sArquivo, FileMode.Open, FileAccess.Read, FileShare.None);
                //        lLivre = true;
                //    }
                //    catch (IOException)
                //    {
                //        //the file is unavailable because it is:
                //        //still being written to
                //        //or being processed by another thread
                //        //or does not exist (has already been processed)
                //        return;
                //    }
                //    finally
                //    {
                //        if (stream != null)
                //            stream.Close();
                //    }

                //    //file is not locked
                //}




                string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";
                string sPastaXML = "ftp://50.116.87.79//07-EnvioSaidaNF//XMLBACKUP//" + sPastaDataHoje;

                #region cria pasta do dia
                try
                {
                    //create the directory
                    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaXML));
                    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                    requestDir.UsePassive = true;
                    requestDir.UseBinary = true;
                    requestDir.KeepAlive = false;
                    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                    Stream ftpStream = response.GetResponseStream();

                    ftpStream.Close();
                    response.Close();
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                    {
                        response.Close();
                    }
                    else
                    {
                        response.Close();
                    }
                }

                #endregion

                string sPastaPDF = "ftp://50.116.87.79//07-EnvioSaidaNF//PDFBACKUP//" + sPastaDataHoje;
                #region cria pasta do dia xml
                try
                {
                    //create the directory
                    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaPDF));
                    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                    requestDir.UsePassive = true;
                    requestDir.UseBinary = true;
                    requestDir.KeepAlive = false;
                    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                    Stream ftpStream = response.GetResponseStream();

                    ftpStream.Close();
                    response.Close();
                }
                catch (WebException ex)
                {
                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                    {
                        response.Close();
                    }
                    else
                    {
                        response.Close();
                    }
                }

                #endregion


                //string sPasta = Directory.GetCurrentDirectory();
                //string sPastaXML = Path.GetDirectoryName(sArquivo);
                //string sPastaPDFBACKUP = sPastaXML + "\\PDFBACKUP\\";
                //if (!Directory.Exists(sPastaPDFBACKUP))
                //{
                //    Directory.CreateDirectory(sPastaPDFBACKUP);
                //}

                //if (!Directory.Exists(sPastaPDFBACKUP + sPastaDataHoje))
                //{
                //    Directory.CreateDirectory(sPastaPDFBACKUP + sPastaDataHoje);
                //}


                FtpWebRequest oFTP = (FtpWebRequest)WebRequest.Create("ftp://50.116.87.79//07-EnvioSaidaNF//" + sArquivo);

                oFTP.Method = WebRequestMethods.Ftp.DownloadFile;

                oFTP.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);

                FtpWebResponse responseFTP = (FtpWebResponse)oFTP.GetResponse();

                Stream responseStream = responseFTP.GetResponseStream();

                StreamReader reader = new StreamReader(responseStream);

                string sXML = reader.ReadToEnd();
                string sPastaTemp = Directory.GetCurrentDirectory() + "\\" + Path.GetFileName(sArquivo.Split('.')[0] + ".xml");

                File.WriteAllText(sPastaTemp, sXML);

                reader.Close();
                responseFTP.Close();


                //string sPastaSalvaDANFE = sPastaPDFBACKUP + sPastaDataHoje;
                string sTextoXML = File.ReadAllText(Directory.GetCurrentDirectory() + "\\" + sArquivo);
                DanfeViewModel oModel = DanfeViewModelCreator.CriarDeArquivoXml(Directory.GetCurrentDirectory() + "\\" + sArquivo);
                if (iCliente == 3)
                    oModel.Duplicatas.Clear();

                //Inicia o Danfe com o modelo criado
                Danfe danfe = new Danfe(oModel);
                danfe.Gerar();
                danfe.Salvar(Directory.GetCurrentDirectory() + "\\" + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                danfe.Dispose();

                string sChaveNota = oModel.ChaveAcesso;
                string sNota = oModel.NfNumero.ToString();
                string sDataEmissao = oModel.DataHoraEmissao.ToString();
                string sCNPJ = oModel.Emitente.CnpjCpf;

                DateTime dEmissao = DateTime.Parse(sDataEmissao);

                byte[] oPDFStream = File.ReadAllBytes(Directory.GetCurrentDirectory() + "\\" + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                string sSql = "SELECT * FROM NOTAMASTER WHERE CHAVENOTA = '" + sChaveNota + "'";
                DataTable dtbNota = ClasseParametros.ConsultaBancoMysql(sSql);

                if (dtbNota.Rows.Count > 0)
                {
                    File.Delete(sArquivo);
                    return;
                }

                sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF)";
                ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                ParametrosSQL.Add("FINALIZADO", "0");
                ParametrosSQL.Add("CNPJ", sCNPJ);
                ParametrosSQL.Add("XML", sTextoXML);
                ParametrosSQL.Add("PDF", oPDFStream);
                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                foreach (ProdutoViewModel oProduto in oModel.Produtos)
                {
                    string sEAN = oProduto.EAN;
                    sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ) VALUES(@NOTA,@PRODUTO,@CNPJ)";
                    ParametrosSQL.Clear();
                    ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                    ParametrosSQL.Add("PRODUTO", sEAN);
                    ParametrosSQL.Add("CNPJ", sCNPJ);
                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                }

                oModel = null;
                GC.Collect();
                GC.WaitForPendingFinalizers();

                //string sPastaXMLBACKUP = sPastaXML + "\\XMLBACKUP\\";

                //if (!Directory.Exists(sPastaXMLBACKUP))
                //{
                //    Directory.CreateDirectory(sPastaXMLBACKUP);
                //}

                //if (!Directory.Exists(sPastaXMLBACKUP + sPastaDataHoje))
                //{
                //    Directory.CreateDirectory(sPastaXMLBACKUP + sPastaDataHoje);
                //}

                //File.Copy(sArquivo, sPastaXMLBACKUP + sPastaDataHoje + Path.GetFileName(sArquivo), true);

                using (var client = new WebClient())
                {

                    #region Envia pdf
                    client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                    client.UploadFile(sPastaPDF + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"), WebRequestMethods.Ftp.UploadFile, Directory.GetCurrentDirectory() + "\\" + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                    #endregion

                    #region Envia XML
                    client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                    client.UploadFile(sPastaXML + Path.GetFileName(sArquivo.Split('.')[0] + ".xml"), WebRequestMethods.Ftp.UploadFile, Directory.GetCurrentDirectory() + "\\" + sArquivo);
                    #endregion

                }
                File.Delete(Directory.GetCurrentDirectory() + "\\" + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                File.Delete(Directory.GetCurrentDirectory() + "\\" + sArquivo);

                FtpWebRequest requestDelete = (FtpWebRequest)WebRequest.Create("ftp://50.116.87.79//07-EnvioSaidaNF//" + sArquivo);

                //If you need to use network credentials
                requestDelete.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                //additionally, if you want to use the current user's network credentials, just use:
                //System.Net.CredentialCache.DefaultNetworkCredentials

                requestDelete.Method = WebRequestMethods.Ftp.DeleteFile;
                FtpWebResponse responsedelete = (FtpWebResponse)requestDelete.GetResponse();
                responsedelete.Close();







            }

            catch (Exception ex)
            {
                //ClasseParametros.MostraErro(ex.Message, iconApp);
            }
        }



        private static void SalvaNotaArquivo(int iCodigo, string sPastaParametro)
        {
            Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();


            //#if DEBUG
            //            string sPastaXML = "C:\\Users\\Rodrigo\\Documents\\XML";
            //            string sPastaEtiqueta = "C:\\Users\\Rodrigo\\Documents\\Etiqueta";
            //#endif
            string sPastaXML = sPastaParametro + "\\07-EnvioSaidaNF\\";
            string sPastaEtiqueta = sPastaParametro + "\\12-Etiquetas\\";

            if (sPastaXML.ToLower().Contains("multifast"))
            {
                sPastaXML += "Pendentes\\";
                sPastaEtiqueta += "Pendentes\\";
            }


            if (!Directory.Exists(sPastaXML))
            {
                sPastaXML = "C" + sPastaXML.Substring(1);
                sPastaEtiqueta = "C" + sPastaEtiqueta.Substring(1);

            }

            string[] aArquivos = Directory.GetFiles(sPastaXML, "*.xml");

            foreach (string sArquivo in aArquivos)
            {
                try
                {
                    bool lLivre = false;
                    while (!lLivre)
                    {
                        FileStream stream = null;
                        try
                        {
                            stream = File.Open(sArquivo, FileMode.Open, FileAccess.Read, FileShare.None);
                            lLivre = true;
                        }
                        catch (IOException)
                        {
                            //the file is unavailable because it is:
                            //still being written to
                            //or being processed by another thread
                            //or does not exist (has already been processed)
                            lLivre = false;
                        }
                        finally
                        {
                            if (stream != null)
                                stream.Close();
                        }

                        //file is not locked
                    }
                    string sPasta = Directory.GetCurrentDirectory();
                    string sPastaPDFBACKUP = sPastaXML + "PDFBACKUP\\";
                    if (!Directory.Exists(sPastaPDFBACKUP))
                    {
                        Directory.CreateDirectory(sPastaPDFBACKUP);
                    }

                    string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";
                    if (!Directory.Exists(sPastaPDFBACKUP + sPastaDataHoje))
                    {
                        Directory.CreateDirectory(sPastaPDFBACKUP + sPastaDataHoje);
                    }

                    string sPastaSalvaDANFE = sPastaPDFBACKUP + sPastaDataHoje;
                    string sTextoXML = File.ReadAllText(sArquivo);
                    DanfeSharp.Modelo.DanfeViewModel oModel = DanfeSharp.Modelo.DanfeViewModelCreator.CriarDeArquivoXml(sArquivo);
                    if (iCodigo == 3)
                        oModel.Duplicatas.Clear();

                    Console.WriteLine("Gerando Nota " + oModel.ChaveAcesso);


                    //Inicia o Danfe com o modelo criado
                    using (Danfe danfe = new Danfe(oModel))
                    {
                        danfe.Gerar();
                        danfe.Salvar(sPastaSalvaDANFE + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                    }

                    string sChaveNota = oModel.ChaveAcesso;
                    string sNota = oModel.NfNumero.ToString();
                    string sDataEmissao = oModel.DataHoraEmissao.ToString();
                    string sCNPJ = oModel.Emitente.CnpjCpf;

                    DateTime dEmissao = DateTime.Parse(sDataEmissao);

                    byte[] oPDFStream = File.ReadAllBytes(sPastaSalvaDANFE + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                    string sSql = "SELECT * FROM NOTAMASTER WHERE CHAVENOTA = '" + sChaveNota + "'";

                    DataTable dtbNotaMaster = ClasseParametros.ConsultaBancoMysql(sSql);

                    if (dtbNotaMaster.Rows.Count == 0)
                    {
                        sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF)";
                        ParametrosSQL.Clear();
                        ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                        ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                        ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                        ParametrosSQL.Add("FINALIZADO", "0");
                        ParametrosSQL.Add("CNPJ", sCNPJ);
                        ParametrosSQL.Add("XML", sTextoXML);
                        ParametrosSQL.Add("PDF", oPDFStream);
                        ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                        foreach (ProdutoViewModel oProduto in oModel.Produtos)
                        {
                            string sEAN = oProduto.EAN;
                            sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ) VALUES(@NOTA,@PRODUTO,@CNPJ)";
                            ParametrosSQL.Clear();
                            ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                            ParametrosSQL.Add("PRODUTO", sEAN);
                            ParametrosSQL.Add("CNPJ", sCNPJ);
                            ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                        }
                        oModel = null;
                        GC.Collect();
                        GC.WaitForPendingFinalizers();

                        string sPastaXMLBACKUP = sPastaXML + "XMLBACKUP\\";

                        if (!Directory.Exists(sPastaXMLBACKUP))
                        {
                            Directory.CreateDirectory(sPastaXMLBACKUP);
                        }

                        if (!Directory.Exists(sPastaXMLBACKUP + sPastaDataHoje))
                        {
                            Directory.CreateDirectory(sPastaXMLBACKUP + sPastaDataHoje);
                        }

                        File.Copy(sArquivo, sPastaXMLBACKUP + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                    }
                    File.Delete(sArquivo);
                }

                catch (Exception ex)
                {
                    //ClasseParametros.MostraErro(ex.Message, iconApp);
                }
            }

            // salva etiquetas
            IEnumerable<String> aEtiquetas = Directory.EnumerateFiles(sPastaEtiqueta, "*.*", SearchOption.TopDirectoryOnly).Where(s => s.ToLower().EndsWith(".json") || s.ToLower().EndsWith(".txt") || s.ToLower().EndsWith(".xml"));
            foreach (string sArquivo in aEtiquetas)
            {
                try
                {
                    bool lLivre = false;
                    while (!lLivre)
                    {
                        FileStream stream = null;
                        try
                        {
                            stream = File.Open(sArquivo, FileMode.Open, FileAccess.Read, FileShare.None);
                            lLivre = true;
                        }
                        catch (IOException)
                        {
                            //the file is unavailable because it is:
                            //still being written to
                            //or being processed by another thread
                            //or does not exist (has already been processed)
                            lLivre = false;
                        }
                        finally
                        {
                            if (stream != null)
                                stream.Close();
                        }
                        //file is not locked
                    }

                    byte[] aEtiqueta = null;
                    string sTexto = File.ReadAllText(sArquivo);
                    string sSql = "";
                    string sEtiqueta = "";
                    string sTransportadora = "";

                    Console.WriteLine("Gerando etiqueta " + sArquivo);


                    if (sArquivo.Contains("_"))
                    {
                        sTransportadora = sArquivo.Split('_')[1].Split('.')[0];
                    }
                    else
                    {
                        sTransportadora = "CORREIOS";

                    }

                    if (sTransportadora.ToUpper() == "MELI")
                    {
                        ClasseOrlaMercadoLivre oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<ClasseOrlaMercadoLivre>(sTexto);
                        sEtiqueta = oJsonB2W.content;
                        aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                    }
                    else if (sTransportadora.ToUpper() == "B2W")
                    {
                        EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(sTexto);
                        if (oJsonB2W.plp != null)
                        {
                            sSql = "";
                            sEtiqueta = GeraEtiquetaB2W(oJsonB2W, "", "");
                            aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                        }
                    }
                    else if (sTransportadora == "CORREIOS")
                    {
                        //A chave de acesso da NF-e é um número de 44 dígitos
                        //calculado de acordo com o manual de integração do
                        //contribuinte(disponibilizado no portal do NF - e).
                        //(02 dígitos) ***Código do Estado(UF) do emitente
                        //(04 dígitos) * **Ano e mês da emissão da NF - e(no formato AAMM)
                        //(14 dígitos) * **CNPJ do emitente da NF - e(CNPJ da sua Empresa)
                        //(02 dígitos) * **Modelo do NF - e
                        //(03 dígitos) * **Série do NF - e
                        //(09 dígitos) * **Número da NF - e
                        //(09 dígitos) * **Código da NF-e - Número gerado pelo sistema
                        //(01 dígitos) * **Dígito verificador - DV(Cálculo no módulo 11).
                        //Ex.de chave de acesso do NF - e:
                        //51080701212344000127550010000000981364112281
                        //51 * 0807 * 01212344000127 * 55 * 001 * 000000098 * 136411228 * 1
                        //Parte do Código Significado
                        //51 = Código do Estado
                        //0807 = Ano e mês da emissão da NF-e
                        //01212344000127 = CNPJ do Emitente
                        //55 = Modelo da NF-e
                        //001 = Série da NF-e
                        //000000098 = Número da NF-e
                        //136411778 = Código da NF-e
                        //1 = DV(digito verificador)
                        string sExtensao = sArquivo.Split('.')[1];
                        if (sExtensao.ToLower() == "txt")
                        {
                            sEtiqueta = sTexto;

                            aEtiqueta = Encoding.UTF8.GetBytes(sTexto);


                            if (aEtiqueta != null)
                            {
                                DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0] + "'");
                                if (d.Rows.Count > 0)
                                {
                                    sSql = "UPDATE VENDAS SET ETIQUETATXTTXT = @ETIQUETATXTTXT, ETIQUETATXT=@ETQ,LOJA=@LOJA,CODIGOCLIENTE=@CODIGOCLIENTE WHERE NOTAFISCAL = @NOTA";
                                }
                                else
                                {
                                    sSql = "INSERT INTO VENDAS(NOTAFISCAL,ETIQUETATXT,ETIQUETATXTTXT,LOJA,DATACRIADO,LOTE,CODIGOCLIENTE) VALUES(@NOTA,@ETQ,@ETIQUETATXTTXT,@LOJA,@DATACRIADO,@LOTE,@CODIGOCLIENTE)";
                                    ParametrosSQL.Add("@DATACRIADO", DateTime.Now);
                                    ParametrosSQL.Add("@LOTE", ClasseParametros.PegaLote(Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1], iCodigo.ToString()));
                                }
                                d.Dispose();

                                File.WriteAllBytes(Directory.GetCurrentDirectory() + "\\XMLETQ\\" + Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0] + ".TXT", aEtiqueta); // Requires System.IO

                                ParametrosSQL.Add("@ETQ", aEtiqueta);
                                ParametrosSQL.Add("@ETIQUETATXTTXT", sEtiqueta);
                                ParametrosSQL.Add("@NOTA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0]);
                                ParametrosSQL.Add("@LOJA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1]);
                                ParametrosSQL.Add("@CODIGOCLIENTE", iCodigo);
                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                                if (!Directory.Exists(sPastaEtiqueta + "\\JSONTXTBACKUP\\"))
                                {
                                    Directory.CreateDirectory(sPastaEtiqueta + "\\JSONTXTBACKUP\\");
                                }

                                string sPastaEtiquetaBackup = sPastaEtiqueta + "\\JSONTXTBACKUP\\";
                                string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";
                                if (!Directory.Exists(sPastaEtiquetaBackup + sPastaDataHoje))
                                {
                                    Directory.CreateDirectory(sPastaEtiquetaBackup + sPastaDataHoje);
                                }


                                File.Copy(sArquivo, sPastaEtiquetaBackup + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                                File.Delete(sArquivo);
                            }
                        }
                        else
                        {
                            //string sTextoXMl = File.ReadAllText(sArquivo);
                            //var sr = new StreamReader(sArquivo, Encoding.GetEncoding("ISO-8859-1"));
                            int iTOtal = 0;

                            try

                            {

                                XmlDocument doc = new XmlDocument();
                                doc.Load(sArquivo);
                                XmlElement root = doc.DocumentElement;
                                XmlNodeList nodesObjetoPostal = root.SelectNodes("objeto_postal"); // You can also use XPath here
                                XmlNodeList nodeplp = root.SelectNodes("plp"); // You can also use XPath here
                                XmlNode nodecartao_postagem = nodeplp[0].SelectSingleNode("cartao_postagem");
                                // remetente
                                XmlNodeList nodesRemetente = root.SelectNodes("remetente"); // You can also use XPath here
                                string sCartaoPostagem = nodecartao_postagem.InnerText;


                                foreach (XmlNode nodeObjetoPostal in nodesObjetoPostal)
                                {
                                    XmlNode nodeNacional = nodeObjetoPostal.SelectNodes("nacional")[0];
                                    XmlNode nodnumero_nota_fiscal = nodeNacional.SelectSingleNode("numero_nota_fiscal");
                                    string sNota = nodnumero_nota_fiscal.InnerText;
                                    Console.WriteLine("Etiqueta correios da nota " + sNota);

                                    DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM NOTAMASTER WHERE NOTA = '" + sNota + "'");
                                    if (d.Rows.Count > 0)
                                    {
                                        string sChaveNota = d.Rows[0]["CHAVENOTA"].ToString();
                                        ClasseCorreiosLocal.GeraEtiquetaCorreios(sCartaoPostagem, nodesRemetente, nodeObjetoPostal, sChaveNota, iCodigo.ToString());
                                        iTOtal++;
                                    }
                                }

                                if (iTOtal == nodesObjetoPostal.Count)
                                {
                                    //string sPastaEtiquetaBackup = sPastaEtiqueta + "\\JSONTXTBACKUP\\";
                                    //string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";

                                    //File.Copy(sArquivo, sPastaEtiquetaBackup + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                                    File.Delete(sArquivo);
                                }
                            }
                            catch (Exception ex1)
                            {

                            }
                        }




                        continue;
                    }
                    else if ((sArquivo.Split('_')[1].Split('.')[0].Contains("MAGA")) || sArquivo.Split('_')[1].Split('.')[0].Contains("NET"))
                    {
                        //List<string> lstZPL = ZplFromPdf(new MemoryStream(Convert.FromBase64String(sArquivo)), new Size(0, 0), 300);

                        //aEtiqueta = Encoding.UTF8.GetBytes(sTexto);
                    }
                    else
                    {
                        sEtiqueta = sTexto;

                        aEtiqueta = Encoding.UTF8.GetBytes(sTexto);
                    }

                    if (aEtiqueta != null)
                    {
                        DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0] + "'");
                        if (d.Rows.Count > 0)
                        {
                            sSql = "UPDATE VENDAS SET ETIQUETATXTTXT = @ETIQUETATXTTXT, ETIQUETATXT=@ETQ,LOJA=@LOJA,CODIGOCLIENTE=@CODIGOCLIENTE WHERE NOTAFISCAL = @NOTA";
                        }
                        else
                        {
                            sSql = "INSERT INTO VENDAS(NOTAFISCAL,ETIQUETATXT,ETIQUETATXTTXT,LOJA,DATACRIADO,LOTE,CODIGOCLIENTE) VALUES(@NOTA,@ETQ,@ETIQUETATXTTXT,@LOJA,@DATACRIADO,@LOTE,@CODIGOCLIENTE)";
                            ParametrosSQL.Add("@DATACRIADO", DateTime.Now);
                            ParametrosSQL.Add("@LOTE", ClasseParametros.PegaLote(Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1], iCodigo.ToString()));
                        }
                        d.Dispose();

                        File.WriteAllBytes(Directory.GetCurrentDirectory() + "\\XMLETQ\\" + Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0] + ".TXT", aEtiqueta); // Requires System.IO

                        ParametrosSQL.Add("@ETQ", aEtiqueta);
                        ParametrosSQL.Add("@ETIQUETATXTTXT", sEtiqueta);
                        ParametrosSQL.Add("@NOTA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0]);
                        ParametrosSQL.Add("@LOJA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1]);
                        ParametrosSQL.Add("@CODIGOCLIENTE", iCodigo);
                        ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                        if (!Directory.Exists(sPastaEtiqueta + "\\JSONTXTBACKUP\\"))
                        {
                            Directory.CreateDirectory(sPastaEtiqueta + "\\JSONTXTBACKUP\\");
                        }

                        string sPastaEtiquetaBackup = sPastaEtiqueta + "\\JSONTXTBACKUP\\";
                        string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";
                        if (!Directory.Exists(sPastaEtiquetaBackup + sPastaDataHoje))
                        {
                            Directory.CreateDirectory(sPastaEtiquetaBackup + sPastaDataHoje);
                        }


                        File.Copy(sArquivo, sPastaEtiquetaBackup + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                        File.Delete(sArquivo);
                    }
                }

                catch (Exception ex)
                {
                    // ClasseParametros.MostraErro(ex.Message, iconApp);
                }
            }

        }

        public static T DeserializeFromXml<T>(string xml)
        {
            T result;
            XmlSerializer ser = new XmlSerializer(typeof(T));
            using (TextReader tr = new StringReader(xml))
            {
                result = (T)ser.Deserialize(tr);
            }
            return result;
        }

        public static void EnviaNotaOrla(int iCodigoCliente)
        {
            try
            {
                int? iLocalEstoque = RetornaCodigoLocalEstoque("LE", "32");
                List<Pedido> lstPedido = RetornaPedidosFortePlus();
                List<FortPlusXML> lstXML = RetornaListaXMLFortPlus();

                List<PedidoItemFortPlus> lstPedidoItens = RetornaPedidosItensFortePlus();
                lstPedidoItens = lstPedidoItens.Where(x => x.mtIdLocalEstoque == iLocalEstoque).ToList();

                foreach (PedidoItemFortPlus oItem in lstPedidoItens)
                {
                    try
                    {


                        if (oItem.mtIdMovto == null)
                        {
                            continue;
                        }

                        List<Pedido> lstPedidoTemp = lstPedido.Where(x => x.id == oItem.mtIdMovto).ToList();
                        List<FortPlusXML> lstXMLTep = lstXML.Where(x => x.trDocto == lstPedidoTemp[0].mvDocto).ToList();


                        Console.WriteLine("Envia nota " + lstXMLTep[0].trChaveAcesso);

                        if (lstXMLTep.Count == 0)
                            continue;

                        if (lstXMLTep[0].trDmaEmissao < DateTime.Now.AddDays(-5))
                        {
                            continue;
                        }


                        if (lstXMLTep[0].trChaveAcesso.Contains("23385"))
                        {

                        }

                        string sPasta = Directory.GetCurrentDirectory() + "\\tempxml\\";

                        if (!Directory.Exists(sPasta))
                        {
                            Directory.CreateDirectory(sPasta);
                        }
                        string sPastaPDF = Directory.GetCurrentDirectory() + "\\temppdf\\";
                        if (!Directory.Exists(sPastaPDF))
                        {
                            Directory.CreateDirectory(sPastaPDF);
                        }
                        string sArquivo = sPasta + "\\" + lstXMLTep[0].trChaveAcesso + ".xml";
                        string sArquivoPDF = sPastaPDF + "\\" + lstXMLTep[0].trChaveAcesso + ".pdf";
                        string sPastaXML = Path.GetDirectoryName(sArquivo);
                        File.WriteAllText(sArquivo, lstXMLTep[0].trArquivoRetorno);
                        string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";
                        string sPastaSalvaDANFE = "";

                        using (var client = new WebClient())
                        {
                            if (lstXMLTep[0].dmaInclusao < DateTime.Now.AddDays(-5))
                            {
                                continue;
                            }

                            string sSql = "SELECT * FROM NOTAMASTER WHERE CHAVENOTA='" + lstXMLTep[0].trChaveAcesso + "'";
                            DataTable d = ClasseParametros.ConsultaBancoMysql(sSql);

                            if (d.Rows.Count > 0)
                                continue;

                            Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                            try
                            {
                                bool lLivre = false;
                                while (!lLivre)
                                {
                                    FileStream stream = null;
                                    try
                                    {

                                        stream = File.Open(sArquivo, FileMode.Open, FileAccess.Read, FileShare.None);

                                        lLivre = true;
                                    }
                                    catch (IOException)
                                    {
                                        //the file is unavailable because it is:
                                        //still being written to
                                        //or being processed by another thread
                                        //or does not exist (has already been processed)
                                        lLivre = false;
                                    }
                                    finally
                                    {
                                        if (stream != null)
                                            stream.Close();
                                    }

                                    //file is not locked
                                }


                                if (!Directory.Exists(sPastaPDF))
                                {
                                    Directory.CreateDirectory(sPastaPDF);
                                }


                                if (!Directory.Exists(sPastaPDF + sPastaDataHoje))
                                {
                                    Directory.CreateDirectory(sPastaPDF + sPastaDataHoje);
                                }

                                sPastaSalvaDANFE = sPastaPDF + sPastaDataHoje;
                                string sTextoXML = File.ReadAllText(sArquivo);
                                DanfeViewModel oModel = DanfeViewModelCreator.CriarDeArquivoXml(sArquivo);

                                //Inicia o Danfe com o modelo criado
                                Danfe danfe = new Danfe(oModel);
                                danfe.Gerar();
                                danfe.Salvar(sPastaSalvaDANFE + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                                danfe.Dispose();

                                #region cria pasta xmlbkacup
                                try
                                {
                                    //create the directory
                                    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP"));
                                    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                    requestDir.Credentials = new NetworkCredential("2eletroftp@2eletro.com.br", "#2eletro2020#");
                                    requestDir.UsePassive = true;
                                    requestDir.UseBinary = true;
                                    requestDir.KeepAlive = false;
                                    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                    Stream ftpStream = response.GetResponseStream();

                                    ftpStream.Close();
                                    response.Close();
                                }
                                catch (WebException ex)
                                {
                                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                    {
                                        response.Close();
                                    }
                                    else
                                    {
                                        response.Close();
                                    }
                                }
                                #endregion

                                #region cria pasta pdfbkacup
                                try
                                {
                                    //create the directory
                                    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP"));
                                    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                    requestDir.Credentials = new NetworkCredential("2eletroftp@2eletro.com.br", "#2eletro2020#");
                                    requestDir.UsePassive = true;
                                    requestDir.UseBinary = true;
                                    requestDir.KeepAlive = false;
                                    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                    Stream ftpStream = response.GetResponseStream();

                                    ftpStream.Close();
                                    response.Close();
                                }
                                catch (WebException ex)
                                {
                                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                    {
                                        response.Close();
                                    }
                                    else
                                    {
                                        response.Close();
                                    }
                                }
                                #endregion

                                string sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP/" + sPastaDataHoje;

                                #region cria pasta do dia
                                try
                                {
                                    //create the directory
                                    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaFTP));
                                    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                    requestDir.Credentials = new NetworkCredential("2eletroftp@2eletro.com.br", "#2eletro2020#");
                                    requestDir.UsePassive = true;
                                    requestDir.UseBinary = true;
                                    requestDir.KeepAlive = false;
                                    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                    Stream ftpStream = response.GetResponseStream();

                                    ftpStream.Close();
                                    response.Close();
                                }
                                catch (WebException ex)
                                {
                                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                    {
                                        response.Close();
                                    }
                                    else
                                    {
                                        response.Close();
                                    }
                                }

                                #endregion

                                string sPastaxml = "ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP/" + sPastaDataHoje;
                                #region cria pasta do dia xml
                                try
                                {
                                    //create the directory
                                    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaxml));
                                    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                    requestDir.Credentials = new NetworkCredential("2eletroftp@2eletro.com.br", "#2eletro2020#");
                                    requestDir.UsePassive = true;
                                    requestDir.UseBinary = true;
                                    requestDir.KeepAlive = false;
                                    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                    Stream ftpStream = response.GetResponseStream();

                                    ftpStream.Close();
                                    response.Close();
                                }
                                catch (WebException ex)
                                {
                                    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                    {
                                        response.Close();
                                    }
                                    else
                                    {
                                        response.Close();
                                    }
                                }

                                #endregion

                                #region Envia pdf

                                client.Credentials = new NetworkCredential("2eletroftp@2eletro.com.br", "#2eletro2020#");
                                client.UploadFile(sPastaFTP + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"), WebRequestMethods.Ftp.UploadFile, sPastaSalvaDANFE + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));


                                #endregion

                                #region Envia pdf

                                client.Credentials = new NetworkCredential("2eletroftp@2eletro.com.br", "#2eletro2020#");
                                client.UploadFile(sPastaxml + Path.GetFileName(sArquivo.Split('.')[0] + ".xml"), WebRequestMethods.Ftp.UploadFile, sArquivo);
                                #endregion


                                string sChaveNota = oModel.ChaveAcesso;
                                string sNota = oModel.NfNumero.ToString();
                                string sDataEmissao = oModel.DataHoraEmissao.ToString();
                                string sCNPJ = oModel.Emitente.CnpjCpf;

                                DateTime dEmissao = DateTime.Parse(sDataEmissao);

                                byte[] oPDFStream = File.ReadAllBytes(sPastaSalvaDANFE + Path.GetFileName(sArquivo.Split('.')[0] + ".pdf"));
                                sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF)";
                                ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                                ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                                ParametrosSQL.Add("FINALIZADO", "0");
                                ParametrosSQL.Add("CNPJ", sCNPJ);
                                ParametrosSQL.Add("XML", sTextoXML);
                                ParametrosSQL.Add("PDF", oPDFStream);
                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                                foreach (ProdutoViewModel oProduto in oModel.Produtos)
                                {
                                    string sEAN = oProduto.EAN;
                                    sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ) VALUES(@NOTA,@PRODUTO,@CNPJ)";
                                    ParametrosSQL.Clear();
                                    ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                    ParametrosSQL.Add("PRODUTO", sEAN);
                                    ParametrosSQL.Add("CNPJ", sCNPJ);
                                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                                }

                                oModel = null;
                                GC.Collect();
                                GC.WaitForPendingFinalizers();
                            }

                            catch (Exception ex)
                            {
                                Console.WriteLine("Erro: " + ex.Message);
                            }


                        }
                    }
                    catch (Exception ex)
                    {

                    }

                    //lstPedido = lstPedido.Where(x => x.loc)
                }


            }
            catch (Exception ex)
            {

            }

        }

        public static void EnviaColetaFEDEX(int iCodigoCliente)
        {
            try
            {
                int iPagina = 1;
                int iPorPagina = 50;


                RestClient client = null;
                RestRequest request = null;
                IRestResponse oResposta = null;

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                {
                    client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido");
                    request = new RestRequest(Method.GET);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ClasseFuncoes.ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                    {
                        break;
                    }
                }


                List<Pedido> lstPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Pedido>>(oResposta.Content);
                List<FortPlusXML> lstXML = RetornaListaXMLFortPlus();
                int? iCodigoTranportadora1 = ClasseFuncoes.RetornaCodigoTranportadora("RAPIDAO COMETA");

                lstPedido = lstPedido.Where(x => x.mvDmaEmissao != null && DateTime.Parse(x.mvDmaEmissao.ToString()) > DateTime.Now.AddDays(-6) && (x.mvIdTransportadora == iCodigoTranportadora1) && x.mvEntidade == "NFE").ToList();

                foreach (Pedido oPedido in lstPedido)
                {

                    if (oPedido.mvChaveAcesso.Contains("18753"))
                    {

                    }

                    Console.WriteLine(" Requisição jadlog da nota " + oPedido.mvChaveAcesso);


                    //GeraEtiquetaJADLOG(oPedido, iCodigoCliente, lstXML);
                    GeraEtiquetaFEDEX(oPedido, iCodigoCliente, lstXML);



                }

            }
            catch { }
        }

        private static void GeraEtiquetaFEDEX(Pedido oPedido, int iCodigoCliente, List<FortPlusXML> lstXML)
        {
            if (oPedido.mvChaveAcesso == null)
            {
                return;
            }

            string sShipment = "";
            string sCodigo = "";
            string sChaveAcesso = "";
            IRestResponse oResposta = null;

            DataTable dtbJADLOG = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oPedido.mvChaveAcesso + "'");

            sChaveAcesso = oPedido.mvChaveAcesso;
            if (dtbJADLOG.Rows.Count == 0)
            {
                try
                {
                    List<FortPlusXML> lstXMLTemp = lstXML.Where(x => x.trDocto != null && x.trDocto == oPedido.mvDocto).ToList();

                    DanfeViewModel oModel = DanfeViewModel.CreateFromXmlString(lstXMLTemp[0].trArquivoRetorno);
                    oResposta = null;
                    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                    {
                        RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/PedidoItem/Pedido/" + oPedido.id.ToString());
                        RestRequest request = new RestRequest(Method.GET);
                        request.AddHeader("Accept-Encoding", "gzip, deflate");
                        request.AddHeader("Cache-Control", "no-cache");
                        request.AddHeader("Accept", "*/*");
                        if (ClasseParametros.oJsonFortePluslogin == null)
                            ConectaForteplus(5);
                        request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);
                        oResposta = client.Execute(request);

                        if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                        {
                            ClasseFuncoes.ConectaForteplus(5);
                        }
                    }
                    List<PedidoItemFortPlus> oPedidoItem = Newtonsoft.Json.JsonConvert.DeserializeObject<List<PedidoItemFortPlus>>(oResposta.Content);

                    string sProduto = "";
                    string sPedido = "";

                    // Salva Etiqueta JadLog
                    string sResult = ClasseParametros.sEtiquetaFEDEX.Replace("{Nota}", oPedido.mvDocto.ToString())
                                        .Replace("{qrcode}", oModel.Destinatario.RazaoSocial + "\r\n" + oModel.Destinatario.EnderecoLogadrouro + "-" + oModel.Destinatario.EnderecoNumero + "\r\n" +
                                        oModel.Destinatario.EnderecoBairro + "\r\n" + oModel.Destinatario.EnderecoComplemento +
                                        "\r\n" + oModel.Destinatario.EnderecoCep + "-" + oModel.Destinatario.Municipio + "/" + oModel.Destinatario.EnderecoUf + "\r\n" +
                                        oModel.Destinatario.EnderecoCep.PadLeft(8, '0'))
                                        .Replace("{Contrato}", "JADLOG")
                                       //.Replace("{Volume}", oAnymarket.docsExternos[0].awbs[i].posicaoVolume.ToString() + "/" + oAnymarket.docsExternos[0].qtVolumes.ToString())
                                       //.Replace("{Imagem}", sImagem)
                                       //.Replace("{Direct}", sImagemDirect)
                                       .Replace("{Pedido}", oPedido.id.ToString())
                                       //.Replace("{PLP}", oAnymarket.plp.id.ToString())
                                       //.Replace("{DtPr}", "")
                                       //.Replace("{Tracking}", oRetornoPedido.codigo.Trim())
                                       .Replace("{NomeDestinatario}", oModel.Destinatario.RazaoSocial)
                                       .Replace("{EndererecoNumeroDestinatario}", oModel.Destinatario.EnderecoLogadrouro + "-" + oModel.Destinatario.EnderecoNumero)
                                       .Replace("{BairroDestinatario}", oModel.Destinatario.EnderecoBairro)
                                       .Replace("{ComplementoDestinatario}", oModel.Destinatario.EnderecoComplemento)
                                       .Replace("{CidadeEstadoDestinatario}", oModel.Destinatario.EnderecoCep + "-" + oModel.Destinatario.Municipio + "/" + oModel.Destinatario.EnderecoUf)
                                       .Replace("{Cep}", oModel.Destinatario.EnderecoCep.PadLeft(8, '0'))
                                       .Replace("{NomeRemetente}", oModel.Emitente.NomeFantasia)
                                       .Replace("{EnderecoNumeroRemetente}", oModel.Emitente.EnderecoLogadrouro + " Nº: " + oModel.Emitente.EnderecoNumero)
                                       //.Replace("{B2WEND}", oAnymarket.docsExternos[0].megaRota)
                                       //.Replace("{Rota}", oAnymarket.docsExternos[0].rota)
                                       .Replace("{ComplementoRemetente}", oModel.Emitente.EnderecoBairro)
                                       //.Replace("{ComplementoRemetente}", r["REMETENTE"].ToString())
                                       .Replace("{CEPCidadeEstadoRemetente}", oModel.Emitente.EnderecoCep.PadLeft(8, '0') + "-" + oModel.Emitente.Municipio + "-" + oModel.Emitente.EnderecoUf);

                    byte[] aEtiqueta = Encoding.UTF8.GetBytes(sResult);
                    string sNomeVendedor = RetornaFantasiaVendedorFortPlus(oPedido.mvIdVendedor);

                    ClasseParametros.SalvaEtiquetaAnyMarket(oPedido.mvChaveAcesso, aEtiqueta, "FEDEX", iCodigoCliente, sNomeVendedor, oPedido.mvIdExterno);
                }
                catch (Exception ex)
                {

                }

            }
            else
            {
                // sCodigo = dtbJADLOG.Rows[0]["CODIGOJADLOG"].ToString().Trim();
            }
        }

        public static void AtualizaEstoqueML(int iCodigoCliente)
        {
            try
            {
                ConectaMercadoLivreAsync(iCodigoCliente);
                int? iMarketplace = RetornaCodigoGlobal("MK", "MLP");
                List<ProdutoFortePlus> lstProduto = RetornaListProdutosFortPlus();

                foreach (ProdutoFortePlus oProduto in lstProduto)
                {
                    Console.WriteLine("Enviando produto: " + oProduto.prCodigo);

                    //if (oProduto.prCodigo != "MAQSIG29")
                    //    continue;


                    ProdutoComplemento oProdutoComplementoFortPlus = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(oProduto.prCodigo, iMarketplace);

                    if (oProdutoComplementoFortPlus == null)
                        continue;

                    ProdutoFortePlus oProdutoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplementoFortPlus.cmIdProduto.ToString()).Content);

                    if (oProdutoFortPlus.prIdParent != null)
                    {
                        oProdutoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoFortPlus.prIdParent.ToString()).Content);
                    }

                    string sMarketPlace = RetornaNomeGlobalMK("MK", oProdutoComplementoFortPlus.cmIdMarketPlace);

                    if (sMarketPlace.ToUpper().Contains("MERCADO LIVRE"))
                    {
                        EnviaProdutosMercadoLivreAsync(oProduto.prCodigo);



                    }

                }

            }
            catch
            { }
        }

        public static void RecebePedidoAmazonEnviaFortplus(int iCodigoCliente)
        {
            try
            {
                string sPastaRelatorio = Directory.GetCurrentDirectory() + "\\AmazonRelatorio";
                if (!Directory.Exists(sPastaRelatorio))
                    Directory.CreateDirectory(sPastaRelatorio);

                string[] aArquivos = Directory.GetFiles(sPastaRelatorio, "*.txt");

                bool lTudook = true;

                foreach (string sArquivo in aArquivos)
                {
                    try
                    {

                        string sTextoArquivo = File.ReadAllText(sArquivo);
                        sTextoArquivo = sTextoArquivo.Replace(",", "");
                        //File.WriteAllText(sArquivo, sTextoArquivo);

                        string[] aLinhas = sTextoArquivo.Split('\n');


                        int i = 0;
                        IRestResponse oResposta = null;
                        string sLast = "";
                        string sInicio = "";
                        string sProdutoTemp = "";
                        ProdutoComplemento oProdutoComplemento = null;
                        ProdutoFortePlus oProduto = null;

                        foreach (string sLinha in aLinhas)
                        {
                            if (sLinha.Trim() == "")
                                continue;
                            string[] aDados = null;

                            try
                            {
                                if (i == 0)
                                {
                                    i++;
                                    continue;
                                }
                                aDados = sLinha.Split('	');
                                aDados = aDados.Where(x => x != "").ToArray();


                                int iDiminuir = 0;
                                if (aDados.Length == 26)
                                {
                                    iDiminuir = 1;
                                }


                                bool lAtualiza = false;



                                if (aDados[0].Contains("9808153"))
                                {

                                }

                                string sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + aDados[0].Trim() + "' AND MARKETPLACE = 'AMAZON'";
                                DataTable d = ClasseParametros.ConsultaBancoMysql(sSql);
                                if (d.Rows.Count == 0)
                                {
                                    sSql = "INSERT INTO VENDAMARKETPLACE(ID,STATUS,MARKETPLACE, DATA,STATUSMENSAGEM,PACKID,USERID,EMAILML,PEDIDOML,SELLERID) " +
                                        "VALUES('" + aDados[0].Trim() + "',0,'AMAZON',CURDATE(),0,'" + aDados[0].Trim() + "', " +
                                        "'" + aDados[7].Trim() + "','" + aDados[4].Trim() + "','" + aDados[0].Trim() + "','2ELETRO')";
                                    ClasseParametros.ExecutabancoMySql(sSql);
                                }

                                Console.WriteLine(" Integrando pedido " + aDados[0].Trim());


                                int? iMarketplace = ClasseFuncoes.RetornaCodigoGlobal("MK", "AMA");

                                sSql = "SELECT TRIM(ID) AS ID FROM VENDAMARKETPLACE WHERE TRIM(ID) = '" + aDados[0].Trim() + "' AND STATUS = 0 AND MARKETPLACE = 'AMAZON'";
                                d = ClasseParametros.ConsultaBancoMysql(sSql);

                                if (aDados[0].Trim() == "701-9860509-6553062")
                                {

                                }

                                if (d.Rows.Count > 0)
                                {

                                    ClienteFortPlus oCliente = ClasseFuncoes.CadastraClienteAMAZONFortPlus(aDados);
                                    string s = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);

                                    if (oCliente == null)
                                    {
                                        EnviaMensagemTelegramAsync("Pedido AMAZON não cadastrado pois o endereço está com erro!\n" + aDados[19], "0,1", "Pedido não cadastrado", aDados[0].Trim());

                                        continue;
                                    }


                                    int iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "32");
                                    ClasseFuncoes.CarregaFiliais("34.036.601/0003-38 - 2ELETRO VAREJISTA");

                                    ////34036601000257 - 2ELETRO ATACADISTA	
                                    ////34036601000338 - 2ELETRO VAREJISTA

                                    string sProduto = "";
                                    try
                                    {
                                        sLast = aDados[10].Substring(aDados[10].Length - 5);
                                        sInicio = aDados[10].Replace(sLast, "");
                                        sProdutoTemp = "";

                                        if (sLast.Substring(sLast.Length - 3, 3) == "VAR")
                                        {
                                            sLast = sLast.Replace("VAR", "");

                                            string[] aProduto = sLast.Split('G');
                                            sProdutoTemp = sInicio + aProduto[0];
                                        }
                                        else
                                        {
                                            sProdutoTemp = aDados[10 - iDiminuir];
                                        }

                                        oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(sProdutoTemp, iMarketplace);
                                        oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);
                                        if (sProdutoTemp.Contains("KIT"))
                                        {




                                            oResposta = null;

                                            while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                            {
                                                RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + oProduto.id.ToString());
                                                RestRequest request = new RestRequest(Method.GET);
                                                request.AddHeader("Cache-Control", "no-cache");
                                                request.AddHeader("Accept", "*/*");
                                                request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                                request.AddHeader("Content-Type", "application/json");
                                                request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                                oResposta = client.Execute(request);

                                                if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                                {
                                                    ClasseFuncoes.ConectaForteplus(5);
                                                }
                                            }

                                            List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
                                            float? eValorTotalComposicao = 0;

                                            foreach (FortPlusProdutoComposicao oProdutoComposicao in oListFormaPagamento)
                                            {
                                                ProdutoFortePlus oProdutoTemp = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComposicao.pcIdProdutoComposicao.ToString()).Content);


                                                ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();
                                                int iLocalEstoque34 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "34");
                                                int iLocalEstoque32 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "32");
                                                double eQtdEstoque = ClasseFuncoes.RetornaSeTemEstoque(oProdutoComposicao.pcIdProdutoComposicao.ToString(), iLocalEstoque34);
                                                eQtdEstoque += ClasseFuncoes.RetornaSeTemEstoque(oProdutoComposicao.pcIdProdutoComposicao.ToString(), iLocalEstoque32);

                                                if (int.Parse(aDados[12 - iDiminuir]) > eQtdEstoque)
                                                {
                                                    iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");
                                                    break;
                                                }
                                                else
                                                {
                                                    iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "32");
                                                }
                                            }
                                        }
                                        else
                                        {

                                            int iLocalEstoque34 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "34");
                                            int iLocalEstoque32 = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "32");
                                            double eQtdEstoque = ClasseFuncoes.RetornaSeTemEstoque(oProduto.id.ToString(), iLocalEstoque34);
                                            eQtdEstoque += ClasseFuncoes.RetornaSeTemEstoque(oProduto.id.ToString(), iLocalEstoque32);

                                            if (int.Parse(aDados[12 - iDiminuir]) > eQtdEstoque)
                                            {
                                                iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");
                                                //break;
                                            }
                                            else
                                            {
                                                DataTable dtbProdutoOrla = ClasseParametros.ConsultaBancoMysql("SELECT * FROM PRODUTOSORLA WHERE SKU = '" + sProdutoTemp + "'");

                                                if (dtbProdutoOrla.Rows.Count > 0)
                                                    iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "32");
                                                else
                                                    iLocalEstoque = (int)ClasseFuncoes.RetornaCodigoLocalEstoque("LE", "33");

                                                dtbProdutoOrla.Dispose();
                                            }
                                        }
                                    }
                                    catch (Exception ex)
                                    {
                                        ClasseFuncoes.EnviaMensagemTelegramAsync("Pedido com erro no item!\n" + aDados[0] + "\n" + aDados[19 - iDiminuir] + " - " + sProduto, "0,2", "Pedido com erro no item", aDados[0]);

                                        continue;
                                    }

                                    Pedido oPedidoFortPlus = new Pedido();

                                    Guid oGuid = Guid.NewGuid();
                                    oPedidoFortPlus.id = 0;
                                    oPedidoFortPlus.mvDocto = 0;
                                    oPedidoFortPlus.mvIdPessoa = int.Parse(oCliente.id);
                                    string sCNPJ = "";
                                    oPedidoFortPlus.mvIdVendedor = ClasseFuncoes.RetornaVendedorFortPlus("AMAZON.COM.BR");
                                    oPedidoFortPlus.mvIdSerie = ClasseFuncoes.RetornaCodigoGlobal("SR", "1");
                                    oPedidoFortPlus.mvIdModelo = ClasseFuncoes.RetornaCodigoGlobal("MD", "55");
                                    oPedidoFortPlus.mvTipoMovimento = "1";
                                    oPedidoFortPlus.mvTipoPedido = "P";
                                    oPedidoFortPlus.mvIdTipoDocumento = ClasseFuncoes.RetornaCodigoGlobal("TD", "REC");

                                    oPedidoFortPlus.mvIdTipoFrete = ClasseFuncoes.RetornaCodigoGlobal("TF", "9");
                                    if (float.Parse(aDados[16 - iDiminuir]) > 0)
                                    {
                                        oPedidoFortPlus.mvIdTipoFrete = ClasseFuncoes.RetornaCodigoGlobal("TF", "1");
                                    }

                                    oPedidoFortPlus.mvPreNota = "N";
                                    oPedidoFortPlus.mvFinNf = "1";
                                    oPedidoFortPlus.mvPresenca = ClasseFuncoes.RetornaCodigoParametro("_FPS_NFE_PRESENCA");
                                    oPedidoFortPlus.mvIdNatureza = ClasseFuncoes.RetornaCodigoGlobal("NO", "01");
                                    oPedidoFortPlus.mvIdParent = null;
                                    oPedidoFortPlus.idFilial = ClasseParametros.iFilial;

                                    if (aDados[18 - iDiminuir] == "Standard")
                                    {
                                        oPedidoFortPlus.mvIdTransportadora = ClasseFuncoes.RetornaTransportadorFortPlus("JadLog Standard");
                                    }
                                    else if (aDados[18 - iDiminuir] == "PAC")
                                    {
                                        oPedidoFortPlus.mvIdTransportadora = ClasseFuncoes.RetornaTransportadorFortPlus("PAC");

                                    }


                                    int? eTotal = 0;
                                    float? eTotalPago = 0;
                                    float? eTotalValor = 0;
                                    //float? eTotalDesconto = float.Parse(aDados[16]);


                                    eTotal += int.Parse(aDados[12 - iDiminuir]);
                                    string sPreco = aDados[14 - iDiminuir].Replace(".", ",");

                                    eTotalValor += (float)(int.Parse(aDados[12 - iDiminuir]) * float.Parse(sPreco));



                                    s = Newtonsoft.Json.JsonConvert.SerializeObject(oPedidoFortPlus);

                                    eTotalPago += (float)eTotalValor + float.Parse(aDados[16 - iDiminuir].Replace(".", ","));


                                    oPedidoFortPlus.mvQuantidade = eTotal;
                                    oPedidoFortPlus.mvPesoBruto = 0;
                                    oPedidoFortPlus.mvPesoLiquido = 0;

                                    oPedidoFortPlus.mvTpAmb = "1";
                                    oPedidoFortPlus.mvTpEmis = "1";
                                    oPedidoFortPlus.mvStatus = "0";
                                    oPedidoFortPlus.mvEntidade = "PDV";
                                    oPedidoFortPlus.ativo = "S";
                                    oPedidoFortPlus.mvGuid = oGuid.ToString();
                                    oPedidoFortPlus.dmaInclusao = DateTime.Now;
                                    oPedidoFortPlus.dmaAlteracao = DateTime.Now;
                                    oPedidoFortPlus.mvDmaEmissao = DateTime.Now;
                                    oPedidoFortPlus.mvDmaEntradaSaida = DateTime.Now;
                                    oPedidoFortPlus.mvValorOutrasDespesasAcessoria = float.Parse(aDados[15 - iDiminuir]);

                                    oPedidoFortPlus.mvIdExterno = aDados[0];
                                    if (aDados[16 - iDiminuir] != "")
                                        oPedidoFortPlus.mvValorFrete = float.Parse(aDados[16 - iDiminuir].Replace(".", ","));
                                    oPedidoFortPlus.mvValorDesconto = 0;

                                    oPedidoFortPlus.mvValorTotalProduto = eTotalValor;
                                    //oPedidoFortPlus.valo = oPedido.total_amount;
                                    oPedidoFortPlus.mvValorTotal = eTotalPago;
                                    //mais de uma unidade
                                    //04_02_2020
                                    //if (oPedido.CustomerPfCpf != null)
                                    //{
                                    //    oPedidoFortPlus.mvValorTotalProduto = eTotalValor - eTotalDesconto;
                                    //    //oPedidoFortPlus.valo = oPedido.total_amount;
                                    //    oPedidoFortPlus.mvValorTotal = eTotalPago - eTotalDesconto;
                                    //}


                                    oPedidoFortPlus.mvVersao = ClasseFuncoes.RetornaCodigoParametro("_FPS_NFE_VERSAO");

                                    //2322426297

                                    oResposta = null;

                                    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                    {
                                        RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + aDados[0]);
                                        RestRequest request = new RestRequest(Method.GET);
                                        request.AddHeader("Cache-Control", "no-cache");
                                        request.AddHeader("Accept", "*/*");
                                        request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                        request.AddHeader("Content-Type", "application/json");
                                        request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                        oResposta = client.Execute(request);

                                        if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaForteplus(5);
                                        }
                                        else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                                        {
                                            break;
                                        }
                                        else if (oResposta.StatusCode == System.Net.HttpStatusCode.OK)
                                        {

                                            oPedidoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);
                                            break;
                                        }

                                    }

                                    if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                                        oPedidoFortPlus = ClasseFuncoes.CriaPedidoFortPlus(oPedidoFortPlus);


                                    List<ProdutoFortePlus> lstProduto = new List<ProdutoFortePlus>();
                                    float? eValorFreteProduto = oPedidoFortPlus.mvValorFrete / 1;


                                    sLast = aDados[10 - iDiminuir].Substring(aDados[10 - iDiminuir].Length - 5);
                                    sInicio = aDados[10 - iDiminuir].Replace(sLast, "");
                                    sProduto = "";
                                    if (sLast.Substring(sLast.Length - 3, 3) == "VAR")
                                    {
                                        sLast = sLast.Replace("VAR", "");

                                        string[] aProduto = sLast.Split('G');
                                        sProduto = sInicio + aProduto[0];
                                    }
                                    else
                                    {
                                        sProduto = aDados[10 - iDiminuir];
                                    }


                                    oProdutoComplemento = MAGALUClasseFuncoes.RetornaProdutoComplementoFortPlusPorSKU(sProduto, iMarketplace);
                                    oProduto = Newtonsoft.Json.JsonConvert.DeserializeObject<ProdutoFortePlus>(ClasseFuncoes.RetornaProdutoFortPlus(oProdutoComplemento.cmIdProduto.ToString()).Content);
                                    bool lTirarTarifa = oProduto.prPercentComissao == 1;

                                    if (oProduto.prCodigo.Substring(0, 3).Trim() == "KIT")
                                    {
                                        oResposta = null;

                                        while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                        {
                                            RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/ProdutoComposicao/Produto/" + oProduto.id.ToString());
                                            RestRequest request = new RestRequest(Method.GET);
                                            request.AddHeader("Cache-Control", "no-cache");
                                            request.AddHeader("Accept", "*/*");
                                            request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                            request.AddHeader("Content-Type", "application/json");
                                            request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                            oResposta = client.Execute(request);

                                            if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                            {
                                                ClasseFuncoes.ConectaForteplus(5);
                                            }
                                        }

                                        List<FortPlusProdutoComposicao> oListFormaPagamento = Newtonsoft.Json.JsonConvert.DeserializeObject<List<FortPlusProdutoComposicao>>(oResposta.Content);
                                        float? eValorTotalComposicao = 0;

                                        foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
                                        {
                                            ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();




                                            List<ProdutoComplemento> oProdutoComplementoComposicao = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(ClasseFuncoes.RetornaProdutoComplementoFortPlus(oFormaPagamento.pcIdProdutoComposicao.ToString()).Content);
                                            if (oProdutoComplementoComposicao.Count > 0)
                                            {
                                                foreach (ProdutoComplemento oPC in oProdutoComplementoComposicao)
                                                {
                                                    string sMarketPlace = ClasseFuncoes.RetornaNomeGlobalMK("MK", oPC.cmIdMarketPlace);
                                                    if (sMarketPlace.ToUpper().Contains("AMAZON"))
                                                    {
                                                        oProdutoComplementoUsar = oPC;
                                                        break;
                                                    }
                                                }
                                                eValorTotalComposicao += oProdutoComplementoUsar.cmPrecoDePor;
                                            }
                                        }

                                        foreach (FortPlusProdutoComposicao oFormaPagamento in oListFormaPagamento)
                                        {
                                            PedidoItemFortPlus oItemPedido = new PedidoItemFortPlus();
                                            oItemPedido.id = 0;
                                            oItemPedido.mtIdNfOrigem = null;
                                            oItemPedido.mtIdMovto = oPedidoFortPlus.id;
                                            lstProduto.Add(oProduto);

                                            float? eTotalSemTarifa = eTotalValor;
                                            double? eQuantidade = int.Parse(aDados[12 - iDiminuir]) * oFormaPagamento.pcQtde;
                                            float? eQtd = float.Parse(eQuantidade.ToString());
                                            List<ProdutoComplemento> oProdutoComplementoComposicao = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ProdutoComplemento>>(ClasseFuncoes.RetornaProdutoComplementoFortPlus(oFormaPagamento.pcIdProdutoComposicao.ToString()).Content);
                                            ProdutoComplemento oProdutoComplementoUsar = new ProdutoComplemento();


                                            foreach (ProdutoComplemento oPC in oProdutoComplementoComposicao)
                                            {
                                                string sMarketPlace = ClasseFuncoes.RetornaNomeGlobalMK("MK", oPC.cmIdMarketPlace);
                                                if (sMarketPlace.ToUpper().Contains("AMAZON"))
                                                {
                                                    oProdutoComplementoUsar = oPC;
                                                    break;
                                                }
                                            }
                                            float? ePercentual = (oProdutoComplementoUsar.cmPrecoDePor * 100) / eValorTotalComposicao;
                                            double? eValorProduto = (eTotalValor * ePercentual) / 100;

                                            oItemPedido.mtIdProduto = oFormaPagamento.pcIdProdutoComposicao;
                                            oItemPedido.mtQtde = eQtd;
                                            oItemPedido.mtValorUnitario = float.Parse(eValorProduto.ToString());
                                            oItemPedido.mtValorTotal = oItemPedido.mtValorUnitario * eQtd;

                                            //////mais de uma unidade
                                            //////04_02_2020
                                            //if (oPedido.CustomerPfCpf != "CPF")
                                            //{
                                            //    ePercentual = (oProdutoComplementoUsar.cmPrecoDePor * 100) / eValorTotalComposicao;
                                            //    eValorProduto = (eTotalSemTarifa * ePercentual) / 100;

                                            //    if (oListFormaPagamento.Count == 1)
                                            //    {
                                            //        eValorProduto = eTotalSemTarifa / eQtd;
                                            //    }

                                            //    oItemPedido.mtValorUnitario = float.Parse(eValorProduto.ToString());
                                            //    oItemPedido.mtValorTotal = oItemPedido.mtValorUnitario * eQtd;
                                            //}

                                            oItemPedido.mtValorDesconto = 0;
                                            oItemPedido.mtValorDescontoRateio = 0;
                                            oItemPedido.mtPercDesconto = 0;
                                            oItemPedido.mtValor = 0;
                                            oItemPedido.mtValorFrete = eValorFreteProduto;
                                            oItemPedido.mtValorSeguro = 0;
                                            oItemPedido.mtValorOutrasDespesas = 0;
                                            oItemPedido.mtCustoMedio = null;
                                            oItemPedido.mtValorTabela = oProdutoComplementoUsar.cmPrecoVenda;
                                            oItemPedido.mtPesoBruto = null;
                                            oItemPedido.mtPesoLiquido = null;
                                            oItemPedido.mtIdCfop = null;
                                            oItemPedido.mtIdNcm = oProduto.prIdNcm;

                                            oItemPedido.mtIdLocalEstoque = iLocalEstoque;

                                            oItemPedido.mtValorAproxImposto = null;
                                            oItemPedido.mtValorTributoEstadual = null;
                                            oItemPedido.mtValorTributoImportado = null;
                                            oItemPedido.mtValorTributoMunicipal = null;
                                            oItemPedido.mtValorTributoNacional = null;
                                            oItemPedido.mtPercEstadual = null;
                                            oItemPedido.mtPercImportado = null;
                                            oItemPedido.mtPercMunicipal = null;
                                            oItemPedido.mtPercNacional = null;
                                            oItemPedido.mtVersaoIbpt = "";
                                            oItemPedido.mtIdUnidade = oProduto.prIdUnidadePrincipal;
                                            oItemPedido.mtOrdemCompra = "";
                                            oItemPedido.mtOrdemItemCompra = "";
                                            oItemPedido.mtReferencia = "";
                                            oItemPedido.mtEntidade = "";
                                            oItemPedido.mtModalidadeBcIcms = "";
                                            oItemPedido.mtIdCstIcms = null;
                                            oItemPedido.mtBaseIcms = null;
                                            oItemPedido.mtAliquotaIcms = null;
                                            oItemPedido.mtPercentReducaoBaseIcms = null;
                                            oItemPedido.mtValorIcms = null;
                                            oItemPedido.mtValorReducaoIcms = null;
                                            oItemPedido.mtAliquotaIcmsCr = null;
                                            oItemPedido.mtValorIcmsCr = null;
                                            oItemPedido.mtBaseIcmsCr = null;
                                            oItemPedido.mtModalidadeBcIcmsSt = "";
                                            oItemPedido.mtPercentReducaoBaseIcmsSt = null;
                                            oItemPedido.mtAliquotaIcmsSt = null;
                                            oItemPedido.mtAliquotaMva = null;
                                            oItemPedido.mtValorIcmsSt = null;
                                            oItemPedido.mtValorReducaoIcmsSt = null;
                                            oItemPedido.mtBaseIcmsSt = null;
                                            oItemPedido.mtIdCstPis = null;
                                            oItemPedido.mtBasePis = null;
                                            oItemPedido.mtPercentReducaoBasePis = null;
                                            oItemPedido.mtAliquotaPis = null;
                                            oItemPedido.mtValorPis = null;
                                            oItemPedido.mtIdCstCofins = null;
                                            oItemPedido.mtBaseCofins = null;
                                            oItemPedido.mtPercentReducaoBaseCofins = null;
                                            oItemPedido.mtAliquotaCofins = null;
                                            oItemPedido.mtValorCofins = null;
                                            oItemPedido.mtIdCstIpi = null;
                                            oItemPedido.mtBaseIpi = null;
                                            oItemPedido.mtPercentReducaoBaseIpi = null;
                                            oItemPedido.mtAliquotaIpi = null;
                                            oItemPedido.mtValorIpi = null;
                                            oItemPedido.mtIdCstIi = null;
                                            oItemPedido.mtBaseIi = null;
                                            oItemPedido.mtPercentReducaoBaseIi = null;
                                            oItemPedido.mtValorIi = null;
                                            oItemPedido.mtIdCstIssqn = null;
                                            oItemPedido.mtBaseIssqn = null;
                                            oItemPedido.mtPercentReducaoBaseIssqn = null;
                                            oItemPedido.mtValorIssqn = null;
                                            //oItemPedido.mtAliquotaInterEstadual = null;
                                            oItemPedido.mtBaseDifal = null;
                                            oItemPedido.mtAliquotaDifal = null;
                                            oItemPedido.mtValorDifal = null;
                                            oItemPedido.mtBaseFecp = null;
                                            oItemPedido.mtAliquotaFecp = null;
                                            oItemPedido.mtValorFecp = null;
                                            oItemPedido.mtBaseFecpSt = null;
                                            oItemPedido.mtAliquotaFecpSt = null;
                                            oItemPedido.mtValorFecpSt = null;
                                            oItemPedido.mtBaseFecpStRet = null;
                                            oItemPedido.mtAliquotaFecpStRet = null;
                                            oItemPedido.mtValorFecpStRet = null;
                                            oItemPedido.mtValorIcmsPartUfOrigem = null;
                                            oItemPedido.mtValorIcmsPartUfDestino = null;
                                            oItemPedido.mtAliquotaIcmsPartUfOrigem = null;
                                            oItemPedido.mtAliquotaIcmsPartUfDestino = null;
                                            oItemPedido.mtBaseIcmsPartUfOrigem = null;
                                            oItemPedido.mtBaseIcmsPartUfDestino = null;
                                            oItemPedido.mtBaseCalculoKardex = null;
                                            oItemPedido.mtPercentComissao = null;
                                            oItemPedido.mtGuid = oPedidoFortPlus.mvGuid;
                                            oItemPedido.mtObservacao = "";
                                            oItemPedido.mtDmaItem = DateTime.Now;
                                            oItemPedido.idFilial = ClasseParametros.iFilial;
                                            oItemPedido.idIncluidoPor = null;
                                            oItemPedido.idAltaradoPor = null;
                                            oItemPedido.dmaInclusao = DateTime.Now;
                                            oItemPedido.dmaAlteracao = DateTime.Now;
                                            oItemPedido.ativo = "S";
                                            oItemPedido.mtIdCest = oProduto.prIdCest;
                                            oItemPedido.mtIdParent = null;
                                            oItemPedido.mtQtdeLiberada = null;
                                            oItemPedido.mtQtdeSaldo = null;
                                            oItemPedido.mtVariacao = "";
                                            oItemPedido.mtPrecoDePor = null;
                                            oItemPedido.mtAjCusto = "";
                                            oItemPedido.mtCEnqIpi = "";
                                            oItemPedido.mtAgregaTotalFecp = "";
                                            oItemPedido.mtIdLote = null;
                                            oItemPedido.mtLote = "";
                                            oItemPedido.mtDmaLote = DateTime.Now;
                                            s = Newtonsoft.Json.JsonConvert.SerializeObject(oItemPedido);
                                            ClasseFuncoes.InseriItensPedidoFortPlus(oItemPedido);

                                        }
                                    }
                                    else
                                    {

                                        PedidoItemFortPlus oItemPedido = new PedidoItemFortPlus();
                                        oItemPedido.id = 0;
                                        oItemPedido.mtIdNfOrigem = null;
                                        oItemPedido.mtIdMovto = oPedidoFortPlus.id;
                                        oItemPedido.mtValorFrete = eValorFreteProduto;

                                        lstProduto.Add(oProduto);

                                        oItemPedido.mtIdProduto = oProdutoComplemento.cmIdProduto;
                                        oItemPedido.mtQtde = int.Parse(aDados[12 - iDiminuir]);

                                        sPreco = aDados[14 - iDiminuir].Replace(".", ",");

                                        oItemPedido.mtValorUnitario = float.Parse(sPreco);
                                        oItemPedido.mtValorTotal = (float)(int.Parse(aDados[12 - iDiminuir]) * float.Parse(aDados[14 - iDiminuir].Replace(".", ",")));

                                        //mais de uma unidade
                                        //04_02_2020
                                        //float? eTotalSemTarifa = eTotalValor - eTotalDesconto;

                                        //if (oPedido.CustomerPfCpf != null)
                                        //{
                                        //    float? eValorProduto = eTotalSemTarifa / o.Quantity;
                                        //    oItemPedido.mtIdProduto = oProdutoComplemento.cmIdProduto;
                                        //    oItemPedido.mtQtde = o.Quantity;
                                        //    oItemPedido.mtValorUnitario = eValorProduto;
                                        //    oItemPedido.mtValorTotal = eValorProduto * o.Quantity;
                                        //}

                                        oItemPedido.mtValorDesconto = 0;
                                        oItemPedido.mtValorDescontoRateio = 0;
                                        oItemPedido.mtPercDesconto = 0;
                                        oItemPedido.mtValor = 0;
                                        oItemPedido.mtValorFrete = eValorFreteProduto;
                                        oItemPedido.mtValorSeguro = 0;
                                        oItemPedido.mtValorOutrasDespesas = 0;
                                        oItemPedido.mtCustoMedio = null;
                                        oItemPedido.mtValorTabela = oProdutoComplemento.cmPrecoVenda;
                                        oItemPedido.mtPesoBruto = null;
                                        oItemPedido.mtPesoLiquido = null;
                                        oItemPedido.mtIdCfop = null;
                                        oItemPedido.mtIdNcm = oProduto.prIdNcm;

                                        oItemPedido.mtIdLocalEstoque = iLocalEstoque;

                                        oItemPedido.mtValorAproxImposto = null;
                                        oItemPedido.mtValorTributoEstadual = null;
                                        oItemPedido.mtValorTributoImportado = null;
                                        oItemPedido.mtValorTributoMunicipal = null;
                                        oItemPedido.mtValorTributoNacional = null;
                                        oItemPedido.mtPercEstadual = null;
                                        oItemPedido.mtPercImportado = null;
                                        oItemPedido.mtPercMunicipal = null;
                                        oItemPedido.mtPercNacional = null;
                                        oItemPedido.mtVersaoIbpt = "";
                                        oItemPedido.mtIdUnidade = oProduto.prIdUnidadePrincipal;
                                        oItemPedido.mtOrdemCompra = "";
                                        oItemPedido.mtOrdemItemCompra = "";
                                        oItemPedido.mtReferencia = "";
                                        oItemPedido.mtEntidade = "";
                                        oItemPedido.mtModalidadeBcIcms = "";
                                        oItemPedido.mtIdCstIcms = null;
                                        oItemPedido.mtBaseIcms = null;
                                        oItemPedido.mtAliquotaIcms = null;
                                        oItemPedido.mtPercentReducaoBaseIcms = null;
                                        oItemPedido.mtValorIcms = null;
                                        oItemPedido.mtValorReducaoIcms = null;
                                        oItemPedido.mtAliquotaIcmsCr = null;
                                        oItemPedido.mtValorIcmsCr = null;
                                        oItemPedido.mtBaseIcmsCr = null;
                                        oItemPedido.mtModalidadeBcIcmsSt = "";
                                        oItemPedido.mtPercentReducaoBaseIcmsSt = null;
                                        oItemPedido.mtAliquotaIcmsSt = null;
                                        oItemPedido.mtAliquotaMva = null;
                                        oItemPedido.mtValorIcmsSt = null;
                                        oItemPedido.mtValorReducaoIcmsSt = null;
                                        oItemPedido.mtBaseIcmsSt = null;
                                        oItemPedido.mtIdCstPis = null;
                                        oItemPedido.mtBasePis = null;
                                        oItemPedido.mtPercentReducaoBasePis = null;
                                        oItemPedido.mtAliquotaPis = null;
                                        oItemPedido.mtValorPis = null;
                                        oItemPedido.mtIdCstCofins = null;
                                        oItemPedido.mtBaseCofins = null;
                                        oItemPedido.mtPercentReducaoBaseCofins = null;
                                        oItemPedido.mtAliquotaCofins = null;
                                        oItemPedido.mtValorCofins = null;
                                        oItemPedido.mtIdCstIpi = null;
                                        oItemPedido.mtBaseIpi = null;
                                        oItemPedido.mtPercentReducaoBaseIpi = null;
                                        oItemPedido.mtAliquotaIpi = null;
                                        oItemPedido.mtValorIpi = null;
                                        oItemPedido.mtIdCstIi = null;
                                        oItemPedido.mtBaseIi = null;
                                        oItemPedido.mtPercentReducaoBaseIi = null;
                                        oItemPedido.mtValorIi = null;
                                        oItemPedido.mtIdCstIssqn = null;
                                        oItemPedido.mtBaseIssqn = null;
                                        oItemPedido.mtPercentReducaoBaseIssqn = null;
                                        oItemPedido.mtValorIssqn = null;
                                        //oItemPedido.mtAliquotaInterEstadual = null;
                                        oItemPedido.mtBaseDifal = null;
                                        oItemPedido.mtAliquotaDifal = null;
                                        oItemPedido.mtValorDifal = null;
                                        oItemPedido.mtBaseFecp = null;
                                        oItemPedido.mtAliquotaFecp = null;
                                        oItemPedido.mtValorFecp = null;
                                        oItemPedido.mtBaseFecpSt = null;
                                        oItemPedido.mtAliquotaFecpSt = null;
                                        oItemPedido.mtValorFecpSt = null;
                                        oItemPedido.mtBaseFecpStRet = null;
                                        oItemPedido.mtAliquotaFecpStRet = null;
                                        oItemPedido.mtValorFecpStRet = null;
                                        oItemPedido.mtValorIcmsPartUfOrigem = null;
                                        oItemPedido.mtValorIcmsPartUfDestino = null;
                                        oItemPedido.mtAliquotaIcmsPartUfOrigem = null;
                                        oItemPedido.mtAliquotaIcmsPartUfDestino = null;
                                        oItemPedido.mtBaseIcmsPartUfOrigem = null;
                                        oItemPedido.mtBaseIcmsPartUfDestino = null;
                                        oItemPedido.mtBaseCalculoKardex = null;
                                        oItemPedido.mtPercentComissao = null;
                                        oItemPedido.mtGuid = oPedidoFortPlus.mvGuid;
                                        oItemPedido.mtObservacao = "";
                                        oItemPedido.mtDmaItem = DateTime.Now;
                                        oItemPedido.idFilial = ClasseParametros.iFilial;
                                        oItemPedido.idIncluidoPor = null;
                                        oItemPedido.idAltaradoPor = null;
                                        oItemPedido.dmaInclusao = DateTime.Now;
                                        oItemPedido.dmaAlteracao = DateTime.Now;
                                        oItemPedido.ativo = "S";
                                        oItemPedido.mtIdCest = oProduto.prIdCest;
                                        oItemPedido.mtIdParent = null;
                                        oItemPedido.mtQtdeLiberada = null;
                                        oItemPedido.mtQtdeSaldo = null;
                                        oItemPedido.mtVariacao = "";
                                        oItemPedido.mtPrecoDePor = null;
                                        oItemPedido.mtAjCusto = "";
                                        oItemPedido.mtCEnqIpi = "";
                                        oItemPedido.mtAgregaTotalFecp = "";
                                        oItemPedido.mtIdLote = null;
                                        oItemPedido.mtLote = "";
                                        oItemPedido.mtDmaLote = DateTime.Now;
                                        s = Newtonsoft.Json.JsonConvert.SerializeObject(oItemPedido);
                                        ClasseFuncoes.InseriItensPedidoFortPlus(oItemPedido);
                                    }
                                    sSql = "UPDATE VENDAMARKETPLACE SET STATUS = 1, QUANTIDADEACIMA = 0 WHERE TRIM(ID) ='" + aDados[0].Trim() + "'";
                                    ClasseParametros.ExecutabancoMySql(sSql);


                                    oResposta = null;
                                    while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.OK)
                                    {
                                        RestClient client = null;

                                        client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Pedido/IdExterno/" + aDados[0].Trim());
                                        RestRequest request = new RestRequest(Method.GET);
                                        request.AddHeader("Cache-Control", "no-cache");
                                        request.AddHeader("Accept", "*/*");
                                        request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                                        request.AddHeader("Content-Type", "application/json");
                                        if (ClasseParametros.oJsonFortePluslogin == null)
                                            ConectaForteplus(5);
                                        request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                                        oResposta = client.Execute(request);

                                        if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaForteplus(5);
                                        }
                                        else if (oResposta.StatusCode == System.Net.HttpStatusCode.NotFound)
                                        {
                                            break;
                                        }
                                    }


                                    oPedidoFortPlus = Newtonsoft.Json.JsonConvert.DeserializeObject<Pedido>(oResposta.Content);


                                    FortPlusFinanceiroReduzido oFinanceiro = new FortPlusFinanceiroReduzido();
                                    oFinanceiro.email = "rodrigonunes@2eletro.com.br";
                                    oFinanceiro.idFilial = oPedidoFortPlus.idFilial;
                                    oFinanceiro.idMovto = oPedidoFortPlus.id;
                                    oFinanceiro.idFormaPagamento = RetornaCodigoFormaPagamento("CREDIT_CARD");
                                    oFinanceiro.idCondicaoPagamento = RetornaCodigoCondicaoPagamento("À VISTA");

                                    oFinanceiro.valor = oPedidoFortPlus.mvValorTotal;


                                    oFinanceiro = CadastraFinanceiroReduzido(oFinanceiro);



                                    if (eTotal > 1)
                                    {
                                        sSql = "UPDATE VENDAMARKETPLACE SET STATUSMENSAGEM = 3, QUANTIDADEACIMA = 1 WHERE TRIM(ID) ='" + aDados[0].Trim() + "'";
                                        ClasseParametros.ExecutabancoMySql(sSql);
                                    }

                                    string smensagem = string.Format(ClasseParametros.sMensagemAcabouComprar, oCliente.psNome);

                                    string sPack = aDados[0].Trim();
                                    if (aDados[0].Trim() != null)
                                        sPack = aDados[0].Trim();

                                    // EnviaMensagemMercadoLivre(sPack, oPedido.seller.id.ToString(), oPedido.buyer.id.ToString(), smensagem, "1", oPedido.id.ToString());

                                    d.Dispose();

                                }


                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine("Erro no pedido " + aDados[0].Trim());
                            }


                            i++;
                        }

                    }
                    catch (Exception ex)
                    {
                        lTudook = false;
                    }




                }

                File.Delete(aArquivos[0]);

            }
            catch (Exception ex)
            {

            }
        }

        private static ClienteFortPlus CadastraClienteAMAZONFortPlus(string[] aDados)
        {
            int iDiminuir = 0;
            if (aDados.Length == 27 || aDados.Length == 26)
            {
                iDiminuir = 1;
            }

            ClienteFortPlus oRetorno = null;

            ClienteFortPlus oCliente = new ClienteFortPlus();
            oCliente.id = "0";
            oCliente.psCodigo = "0";
            oCliente.psTipoPessoa = "1";

            oCliente.psNome = aDados[19].Trim();
            oCliente.psNomeFantasia = aDados[19].Trim();
            oCliente.psCpfCnpj = aDados[7].Trim().Replace(".", "").Replace("-", "");

            //if (aDados[7].Trim() != null)
            //{
            //    oCliente.psNome = oPedidoMAGALU.CustomerPjCorporatename;
            //    oCliente.psNomeFantasia = oPedidoMAGALU.CustomerPjCorporatename;
            //    oCliente.psCpfCnpj = oPedidoMAGALU.CustomerPjCnpj;
            //    oCliente.psInscricaoEstadual = oPedidoMAGALU.CustomerPjIe;
            //}

            //if (oPedidoMAGALU.CustomerBirthDate != "")
            //    oCliente.psDmaNascimento = DateTime.Parse(oPedidoMAGALU.CustomerBirthDate);
            oCliente.psCep = aDados[24].Trim().Replace("-", "");
            enderecoERP oEndereco = ClasseCorreiosLocal.RetornaEnderecoPorCEP(oCliente.psCep);
            oCliente.psLogradouro = aDados[20].Trim();
            if (aDados[20].Trim().Length > 60)
            {
                oCliente.psLogradouro = aDados[20].Trim().Substring(0, 60);

            }
            oCliente.psNumero = oCliente.psLogradouro.Split(' ')[oCliente.psLogradouro.Split(' ').Length - 1];
            if (aDados[21].Trim() != null)
            {
                oCliente.psComplemento = aDados[21].Trim();
                if (aDados[21].Trim().Length > 60)
                    oCliente.psComplemento = aDados[21].Trim().Substring(0, 60);
            }
            oCliente.psBairro = aDados[8].Trim();
            if (oCliente.psBairro == "")
            {
                oCliente.psBairro = oEndereco.bairro;
            }

            oCliente.psIdUf = RetornaCodigoGlobal("UF", aDados[23 - iDiminuir]);
            oCliente.psIdMunicipio = RetornaCodigoMunicipio(RetornaStringSemAcento(aDados[22 - iDiminuir]));

            if (oCliente.psIdMunicipio == 0)
            {
                oCliente.psIdMunicipio = RetornaCodigoMunicipio(oEndereco.cidade);
            }

            oCliente.psIdPais = RetornaCodigoPais("Brasil");
            oCliente.psIdRegiao = 1;
            oCliente.psIdRota = null;
            oCliente.psEmail = "";
            oCliente.psSite = "MBL";
            if (aDados[9] != null)
                oCliente.psTelFixo = aDados[9];

            if (aDados[9] != null)
                if (aDados[9] != null)
                {
                    oCliente.psTelCelular = aDados[9];
                    if (aDados[9].Length > 20)
                        oCliente.psTelCelular = aDados[9].Substring(0, 20);
                }

            oCliente.psTelCelular = oCliente.psTelCelular.Replace("(", "").Replace(")", "").Replace("+", "");
            oCliente.psTelFax = "";
            oCliente.psTelOutros = "";
            oCliente.psContatoFixo = "";
            oCliente.psContatoCelular = "";
            oCliente.psInscricaoMunicipal = "";
            oCliente.psInscricaoEstadual = "";
            oCliente.psInscricaoSuframa = "";
            oCliente.psRegimeTributario = "1";//falta

            oCliente.psTipoInscricao = "F";
            //if (oPedidoMAGALU.CustomerPjCnpj != null)
            //    oCliente.psTipoInscricao = "J";

            oCliente.psTipoContribIcms = "9";//falta
            oCliente.psConsumidorFinal = "S";
            oCliente.psProdutorRural = "N";
            oCliente.psRecolheIss = "N";
            oCliente.psIdVendedor = RetornaVendedorFortPlus("AMAZON.COM.BR");
            oCliente.psObservacao = "";
            oCliente.psEntidade = "CLI";
            oCliente.psTipoComissao = "";
            oCliente.psPercentComissao = null;
            oCliente.idFilial = ClasseParametros.iFilial;
            oCliente.idIncluidoPor = null;
            oCliente.idAltaradoPor = null;
            oCliente.dmaInclusao = DateTime.Now;
            oCliente.dmaAlteracao = DateTime.Now;
            oCliente.ativo = "S";
            oCliente.psIdTabelaPreco = null;
            oCliente.psBaseInclui = "";
            oCliente.psGuid = Guid.NewGuid().ToString();
            oCliente.psIdClasse = null;
            oCliente.psOver = "";
            oCliente.psIdExterno = "";
            IRestResponse oResposta = null;
            ClienteFortPlus oClienteCadastrado = null;

            //if (oPedidoMAGALU.CustomerPjCnpj != null)
            //    oClienteCadastrado = ConsultaClienteFortPlus(oPedidoMAGALU.CustomerPjCnpj.Trim());
            //else
            oClienteCadastrado = ConsultaClienteFortPlus(aDados[7].Trim());

            string sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);


            if (oClienteCadastrado == null)
            {


                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.Created)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente");
                    RestRequest request = new RestRequest(Method.POST);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == HttpStatusCode.InternalServerError)
                    {
                        return null;
                    }
                }
                oRetorno = Newtonsoft.Json.JsonConvert.DeserializeObject<ClienteFortPlus>(oResposta.Content);

            }
            else
            {
                oCliente.id = oClienteCadastrado.id;
                oCliente.psCodigo = oClienteCadastrado.psCodigo;

                sJson = Newtonsoft.Json.JsonConvert.SerializeObject(oCliente);

                while (oResposta == null || oResposta.StatusCode != System.Net.HttpStatusCode.NoContent)
                {
                    RestClient client = new RestClient(ClasseParametros.sURlFortPlus + "/api/Cliente/" + oClienteCadastrado.id);
                    RestRequest request = new RestRequest(Method.PUT);
                    request.AddHeader("Cache-Control", "no-cache");
                    request.AddHeader("Accept", "*/*");
                    request.AddHeader("User-Agent", "PostmanRuntime/7.19.0");
                    request.AddHeader("Content-Type", "application/json");
                    request.AddParameter("application/json", sJson, ParameterType.RequestBody);
                    if (ClasseParametros.oJsonFortePluslogin == null)
                        ConectaForteplus(5);
                    request.AddHeader("Authorization", "Bearer " + ClasseParametros.oJsonFortePluslogin.accessToken);

                    oResposta = client.Execute(request);

                    if (oResposta.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        ClasseFuncoes.ConectaForteplus(5);
                    }
                    else if (oResposta.StatusCode == HttpStatusCode.InternalServerError)
                    {
                        return null;
                    }
                }
                //if (oPedidoMAGALU.CustomerPjCnpj != null)
                //    oClienteCadastrado = ConsultaClienteFortPlus(oPedidoMAGALU.CustomerPjCnpj.Trim());
                //else

                oClienteCadastrado = ConsultaClienteFortPlus(aDados[7].Trim());

                oRetorno = oClienteCadastrado;

            }


            return oRetorno;
        }

        public static void ServicoBlingEtiquetas(int iCodigoCliente)
        {
            string sDataOntem = DateTime.Now.AddDays(-1).ToString("dd/MM/yyyy");
            string sDataAgora = DateTime.Now.ToString("dd/MM/yyyy");


            var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/notasfiscais/json&apikey=" + ClasseParametros.sTokenBling + "&filters=dataEmissao[" + sDataOntem + " 00:00:00 TO " + sDataAgora + " 23:59:59]; situacao[6]");
            request.ContentType = "application/json";
            request.Method = "GET";
            string sNotas = "";
            var oNotas = "";
            string sSql = "";
            Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

            using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
            {
                if (response.StatusCode != HttpStatusCode.OK)
                    Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                {
                    var content = reader.ReadToEnd();
                    if (string.IsNullOrWhiteSpace(content))
                        Console.Out.WriteLine("Empty Response");
                    else
                        sNotas = content;
                }
            }

            NotaFiscaljsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<NotaFiscaljsonBling>(sNotas);

            foreach (Notasfiscai oNotaFiscal in oListXML.retorno.notasfiscais)
            {
                if (int.Parse(oNotaFiscal.notafiscal.numero) == 2556)
                {

                }
                Console.WriteLine(" Gerando Etiqueta do Pedido " + oNotaFiscal.notafiscal.numero + " - Referente ao Pedido Mercado Livre " + oNotaFiscal.notafiscal.numeroPedidoLoja);
                DataTable d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                if (d.Rows.Count == 0)
                {
                    //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                    request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                    request.ContentType = "application/json";
                    request.Method = "GET";

                    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                    {
                        if (response.StatusCode != HttpStatusCode.OK)
                            Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                        {
                            var content = reader.ReadToEnd();
                            if (string.IsNullOrWhiteSpace(content))
                                Console.Out.WriteLine("Empty Response");
                            else
                                sNotas = content;
                        }
                    }

                    string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                    if (!Directory.Exists(sPasta))
                    {
                        Directory.CreateDirectory(sPasta);
                    }
                    string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                    File.WriteAllText(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml", sNotas);

                    string sUsuarioFTP = "2eletro-varejo";
                    string sSenhaFTP = "#2eletro001#";
                    string sPastaFTP = "ftp://serrapark.dd.spiritlinux.com/04-EnvioSaida/";

                    using (var client = new WebClient())
                    {
                        client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                        client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                    }

                }


                d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT = ''");

                if (d.Rows.Count == 0)
                {
                    if (ClasseParametros.oMeli == null)
                        ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                    IRestResponse oResposta = null;

                    //ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                    List<Parameter> ps = new List<Parameter>();
                    Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                    ps.Add(p);

                    MercadoLivreEntrega oEntrega = null;

                    while (oResposta == null)
                    {
                        oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                        Result oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);

                        if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                        {
                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                        }

                        if (oResposta.StatusCode == HttpStatusCode.NotFound)
                        {
                            oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                            oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);
                        }

                        oResposta = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);


                        oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);
                        if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                        {
                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                            oResposta = null;
                        }
                        else if (oResposta.StatusCode == 0)
                        {
                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);


                            oResposta = null;
                        }
                    }

                    ps = new List<Parameter>();
                    p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                    ps.Add(p);
                    p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                    ps.Add(p);
                    p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                    ps.Add(p);



                    oResposta = null;
                    while (oResposta == null)
                    {
                        oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                        if (oResposta.Content.Contains("delivered") || oResposta.Content.Contains("shipped"))
                        {
                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                        }
                        else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                        {
                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                            oResposta = null;

                        }
                    }

                    /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                    if (oResposta.StatusCode == HttpStatusCode.OK)
                    {
                        ClasseParametros.SalvaEtiqueta(oNotaFiscal.notafiscal.chaveAcesso, oResposta.RawBytes, 5, oNotaFiscal.notafiscal.numeroPedidoLoja, "MELI");
                        sSql = "SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT = ''";
                        DataTable dtbVendas = ClasseParametros.ConsultaBancoMysql(sSql);
                        if (dtbVendas.Rows.Count == 0)
                        {
                            ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                        }
                        dtbVendas.Dispose();
                        //break;
                    }
                }


            }

        }

        public static void EnviaNotaEntrada()
        {
            for (int i = 1; i < 100; i++)
            {
                try
                {
                    var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/notasfiscais/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling +
            "&filters=situacao[6];tipo[E]");
                    request.ContentType = "application/json";
                    request.Method = "GET";
                    string sNotas = "";
                    var oNotas = "";

                    string sSql = "";
                    Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                    {
                        if (response.StatusCode != HttpStatusCode.OK)
                            Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                        {
                            var content = reader.ReadToEnd();
                            if (string.IsNullOrWhiteSpace(content))
                                Console.Out.WriteLine("Empty Response");
                            else
                                sNotas = content;
                        }
                    }

                    if (sNotas.Contains("A informacao desejada nao foi encontrada"))
                    {
                        break;
                    }
                    NotaFiscaljsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<NotaFiscaljsonBling>(sNotas);




                    foreach (Notasfiscai oNotaFiscal in oListXML.retorno.notasfiscais)
                    {
                        if (DateTime.Parse(oNotaFiscal.notafiscal.dataEmissao) < DateTime.Parse("14/01/2020"))
                        {
                            continue;
                        }
                        Console.WriteLine(" Thread Notas Entrada - Enviando nota " + oNotaFiscal.notafiscal.numero + " - Referente ao Pedido " + oNotaFiscal.notafiscal.tipoIntegracao + " " + oNotaFiscal.notafiscal.numeroPedidoLoja);
                        DataTable d = null;

                        //nota
                        try
                        {
                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                            if (d.Rows.Count == 0)
                            {
                                //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                request.ContentType = "application/json";
                                request.Method = "GET";

                                using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                {
                                    if (response.StatusCode != HttpStatusCode.OK)
                                        Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                    {
                                        var content = reader.ReadToEnd();
                                        if (string.IsNullOrWhiteSpace(content))
                                            Console.Out.WriteLine("Empty Response");
                                        else
                                            sNotas = content;
                                    }
                                }

                                string sPasta = Directory.GetCurrentDirectory() + "\\temp";

                                if (!Directory.Exists(sPasta))
                                {
                                    Directory.CreateDirectory(sPasta);
                                }
                                string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                File.WriteAllText(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml", sNotas);

                                string sUsuarioFTP = "2eletro-varejo";
                                string sSenhaFTP = "#2eletro001#";
                                string sPastaFTP = "ftp://serrapark.dd.spiritlinux.com/02-EnvioEntrada/";



                                #region ENDERECOS

                                using (var client = new WebClient())
                                {
                                    bool lEnviado = false;
                                    while (!lEnviado)
                                    {
                                        try
                                        {
                                            client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                            client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                            lEnviado = true;
                                        }
                                        catch (Exception ex)
                                        {
                                            Console.WriteLine("Erro:" + ex.Message);
                                        }
                                    }
                                }


                                #endregion

                                sSql = "INSERT INTO VENDAS(NOTAFISCAL,ENTRADA) VALUES(@NOTAFISCAL,@ENTRADA)";

                                ParametrosSQL.Add("NOTAFISCAL", oNotaFiscal.notafiscal.chaveAcesso);
                                ParametrosSQL.Add("ENTRADA", "1");

                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                            }
                        }
                        catch (Exception ex)
                        {

                            Console.WriteLine(ex.Message);
                        }



                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }
        }
        private static void EnviaNotaSaidaAutorizada(int iCodigoCliente)
        {
            //Status 6 Autorizada
            for (int i = 1; i < 100; i++)
            {
                try
                {
                    var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/notasfiscais/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling +
                        "&filters=dataEmissao[" + sDataOntem + " 00:00:00 TO " + sDataAgora + " 23:59:59];situacao[6];loja[todas];tipo[S]");
                    request.ContentType = "application/json";
                    request.Method = "GET";
                    string sNotas = "";
                    var oNotas = "";

                    string sSql = "";
                    Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                    {
                        if (response.StatusCode != HttpStatusCode.OK)
                            Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                        {
                            var content = reader.ReadToEnd();
                            if (string.IsNullOrWhiteSpace(content))
                                Console.Out.WriteLine("Empty Response");
                            else
                                sNotas = content;
                        }
                    }

                    NotaFiscaljsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<NotaFiscaljsonBling>(sNotas);

                    if (oListXML.retorno.notasfiscais == null)
                    {
                        break;
                    }

                    foreach (Notasfiscai oNotaFiscal in oListXML.retorno.notasfiscais)
                    {

                        string sCNPJ = oNotaFiscal.notafiscal.chaveAcesso.Substring(6, 14);

                        if (int.Parse(oNotaFiscal.notafiscal.numero) == 3633)
                        {

                        }

                        if (oNotaFiscal.notafiscal.numeroPedidoLoja != null && oNotaFiscal.notafiscal.numeroPedidoLoja.Contains("277430705701"))
                        {

                        }

                        Console.WriteLine(" Thread Notas Saida Autorizada -  Gerando Etiqueta do Pedido " + oNotaFiscal.notafiscal.numero + " - Referente ao Pedido " + oNotaFiscal.notafiscal.tipoIntegracao + " " + oNotaFiscal.notafiscal.numeroPedidoLoja);
                        DataTable d = null;

                        //nota
                        try
                        {
                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                            if (d.Rows.Count == 0)
                            {
                                //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                request.ContentType = "application/json";
                                request.Method = "GET";

                                using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                {
                                    if (response.StatusCode != HttpStatusCode.OK)
                                        Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                    {
                                        var content = reader.ReadToEnd();
                                        if (string.IsNullOrWhiteSpace(content))
                                            Console.Out.WriteLine("Empty Response");
                                        else
                                            sNotas = content;
                                    }
                                }

                                string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                                if (!Directory.Exists(sPasta))
                                {
                                    Directory.CreateDirectory(sPasta);
                                }
                                string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                File.WriteAllText(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml", sNotas);


                                DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                Danfe danfe = new Danfe(oDanfe);

                                string sUsuarioFTP = "";
                                string sSenhaFTP = "";
                                string sPastaFTP = "";
                                if (sCNPJ == "34036601000419")
                                {
                                    sUsuarioFTP = "2eletroftp@2eletro.com.br";
                                    sSenhaFTP = "#2eletro2020#";
                                    sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/";
                                }
                                else if (sCNPJ == "34036601000338")
                                {
                                    sUsuarioFTP = "2eletro-varejo";
                                    sSenhaFTP = "#2eletro001#";
                                    sPastaFTP = "ftp://serrapark.dd.spiritlinux.com/04-EnvioSaida/";
                                }


                                #region ENDERECOS

                                if (sCNPJ == "34036601000419")
                                {
                                    string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";


                                    danfe.Gerar();
                                    danfe.Salvar(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                    danfe.Dispose();

                                    #region cria pasta xmlbkacup
                                    try
                                    {
                                        //create the directory
                                        FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP"));
                                        requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        requestDir.UsePassive = true;
                                        requestDir.UseBinary = true;
                                        requestDir.KeepAlive = false;
                                        FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        Stream ftpStream = response.GetResponseStream();

                                        ftpStream.Close();
                                        response.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        {
                                            response.Close();
                                        }
                                        else
                                        {
                                            response.Close();
                                        }
                                    }
                                    #endregion

                                    #region cria pasta pdfbkacup
                                    try
                                    {
                                        //create the directory
                                        FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP"));
                                        requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        requestDir.UsePassive = true;
                                        requestDir.UseBinary = true;
                                        requestDir.KeepAlive = false;
                                        FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        Stream ftpStream = response.GetResponseStream();

                                        ftpStream.Close();
                                        response.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        {
                                            response.Close();
                                        }
                                        else
                                        {
                                            response.Close();
                                        }
                                    }
                                    #endregion

                                    sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP/" + sPastaDataHoje;

                                    #region cria pasta do dia
                                    try
                                    {
                                        //create the directory
                                        FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaFTP));
                                        requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        requestDir.UsePassive = true;
                                        requestDir.UseBinary = true;
                                        requestDir.KeepAlive = false;
                                        FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        Stream ftpStream = response.GetResponseStream();

                                        ftpStream.Close();
                                        response.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        {
                                            response.Close();
                                        }
                                        else
                                        {
                                            response.Close();
                                        }
                                    }

                                    #endregion

                                    string sPastaxml = "ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP/" + sPastaDataHoje;
                                    #region cria pasta do dia xml
                                    try
                                    {
                                        //create the directory
                                        FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaxml));
                                        requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        requestDir.UsePassive = true;
                                        requestDir.UseBinary = true;
                                        requestDir.KeepAlive = false;
                                        FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        Stream ftpStream = response.GetResponseStream();

                                        ftpStream.Close();
                                        response.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        {
                                            response.Close();
                                        }
                                        else
                                        {
                                            response.Close();
                                        }
                                    }

                                    #endregion

                                    #region Envia pdf
                                    using (var client = new WebClient())
                                    {
                                        client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".pdf", WebRequestMethods.Ftp.UploadFile, sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                    }

                                    #endregion

                                    #region Envia pdf
                                    using (var client = new WebClient())
                                    {
                                        client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        client.UploadFile(sPastaxml + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                    }
                                    #endregion


                                    string sChaveNota = oDanfe.ChaveAcesso;
                                    string sNota = oDanfe.NfNumero.ToString();
                                    string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                                    //string sCNPJ = oDanfe.Emitente.CnpjCpf;

                                    DateTime dEmissao = DateTime.Parse(sDataEmissao);

                                    byte[] oPDFStream = File.ReadAllBytes(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                    sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF)";
                                    ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                    ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                                    ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                                    ParametrosSQL.Add("FINALIZADO", "0");
                                    ParametrosSQL.Add("CNPJ", sCNPJ);
                                    ParametrosSQL.Add("XML", sNotas);
                                    ParametrosSQL.Add("PDF", oPDFStream);
                                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                                    foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                                    {
                                        string sEAN = oProduto.EAN;
                                        sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ) VALUES(@NOTA,@PRODUTO,@CNPJ)";
                                        ParametrosSQL.Clear();
                                        ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                        ParametrosSQL.Add("PRODUTO", sEAN);
                                        ParametrosSQL.Add("CNPJ", sCNPJ);
                                        ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                                    }

                                    oDanfe = null;
                                    GC.Collect();
                                    GC.WaitForPendingFinalizers();
                                }
                                else if (sCNPJ == "34036601000338")
                                {
                                    sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                    using (var client = new WebClient())
                                    {
                                        bool lEnviado = false;
                                        while (!lEnviado)
                                        {
                                            try
                                            {
                                                client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                                client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                                lEnviado = true;
                                            }
                                            catch (Exception ex)
                                            {
                                                Console.WriteLine("Erro:" + ex.Message);
                                            }
                                        }
                                    }


                                }

                                #endregion

                                sSql = "INSERT INTO VENDAS(NOTAFISCAL,XMLENVIADO,ETQENVIADO) VALUES(@NOTAFISCAL,@XMLENVIADO,@ETQENVIADO)";

                                ParametrosSQL.Add("NOTAFISCAL", oNotaFiscal.notafiscal.chaveAcesso);
                                ParametrosSQL.Add("XMLENVIADO", "1");
                                ParametrosSQL.Add("ETQENVIADO", "0");

                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                            }
                        }
                        catch (Exception ex)
                        {

                        }

                        //etq
                        try
                        {


                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT IS NULL");

                            if (d.Rows.Count > 0)
                            {
                                if (oNotaFiscal.notafiscal.tipoIntegracao == "MercadoLivre")
                                {

                                    ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                    IRestResponse oResposta = null;

                                    //ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                    List<Parameter> ps = new List<Parameter>();
                                    Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                    ps.Add(p);

                                    MercadoLivreEntrega oEntrega = null;

                                    while (oResposta == null)
                                    {


                                        oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                        Result oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);



                                        if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                                        }

                                        if (oResposta.StatusCode == HttpStatusCode.NotFound)
                                        {
                                            oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                            oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);
                                        }

                                        oResposta = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);


                                        oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);
                                        if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                            oResposta = null;
                                        }
                                        else if (oResposta.StatusCode == 0)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);


                                            oResposta = null;
                                        }
                                    }

                                    ps = new List<Parameter>();
                                    p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                    ps.Add(p);
                                    p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                                    ps.Add(p);
                                    p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                                    ps.Add(p);

                                    oResposta = null;
                                    while (oResposta == null)
                                    {
                                        oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                                        if (oResposta.Content.Contains("delivered") || oResposta.Content.Contains("shipped"))
                                        {
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                        }
                                        else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                                            ps = new List<Parameter>();
                                            p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                            ps.Add(p);
                                            p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                                            ps.Add(p);
                                            p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                                            ps.Add(p);
                                            oResposta = null;

                                        }
                                    }

                                    /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                                    if (oResposta.StatusCode == HttpStatusCode.OK)
                                    {
                                        ClasseParametros.SalvaEtiqueta(oNotaFiscal.notafiscal.chaveAcesso, oResposta.RawBytes, 5, oNotaFiscal.notafiscal.numeroPedidoLoja, "MELI");
                                        sSql = "SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT = ''";
                                        DataTable dtbVendas = ClasseParametros.ConsultaBancoMysql(sSql);
                                        if (dtbVendas.Rows.Count == 0)
                                        {
                                            ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                        }
                                        dtbVendas.Dispose();
                                        //break;
                                    }
                                    else
                                    {
                                        ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                    }

                                }
                                else if (oNotaFiscal.notafiscal.tipoIntegracao == "Amazon")
                                {
                                    DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);

                                    //Danfe danfe = new Danfe(oDanfe);

                                    GeraEtiquetaJADLOGBling(iCodigoCliente, oDanfe);
                                }
                                else if (oNotaFiscal.notafiscal.tipoIntegracao == "SkyHub")
                                {
                                    Console.WriteLine("Gera etiqueta do pedido " + oNotaFiscal.notafiscal.numeroPedidoLoja);

                                    try
                                    {
                                        d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                                        string sKey = d.Rows[0]["KEYB2W"].ToString();
                                        string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                        string sAccount = "0MDxaksT8d";
                                        d.Dispose();

                                        d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'  AND ETQENVIADO = 0");

                                        if (d.Rows.Count == 0)
                                        {
                                            continue;
                                        }


                                        RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                        RestRequest oRequest = new RestRequest(Method.POST);
                                        oRequest.AddHeader("Content-Length", "52");
                                        oRequest.AddHeader("Cache-Control", "no-cache");
                                        oRequest.AddHeader("Accept", "application/json");
                                        oRequest.AddHeader("Content-Type", "application/json");
                                        oRequest.AddHeader("x-Api-Key", sKey);
                                        oRequest.AddHeader("X-User-Email", sUsuario);
                                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                        string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                        oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                        IRestResponse response = client.Execute(oRequest);
                                        string sPLP = "";

                                        if (response.Content.Contains("nao tem nota fiscal"))
                                        {
                                            continue;
                                        }

                                        if (response.Content.Contains("nao localizados"))
                                        {
                                            continue;
                                        }

                                        Thread.Sleep(1000);
                                        for (int j = 0; j < 12; j++)
                                        {
                                            if (response.StatusCode == HttpStatusCode.Created)
                                            {
                                                sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                                break;
                                            }

                                            if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout || response.StatusCode == HttpStatusCode.ServiceUnavailable)
                                            {
                                                Thread.Sleep(10000);
                                                response = client.Execute(oRequest);
                                            }
                                            else if (response.StatusCode.ToString() == "429")
                                            {
                                                Thread.Sleep(20000);
                                                client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                                oRequest = new RestRequest(Method.POST);
                                                oRequest.AddHeader("Content-Length", "52");
                                                oRequest.AddHeader("Cache-Control", "no-cache");
                                                oRequest.AddHeader("Accept", "application/json");
                                                oRequest.AddHeader("Content-Type", "application/json");
                                                oRequest.AddHeader("x-Api-Key", sKey);
                                                oRequest.AddHeader("X-User-Email", sUsuario);
                                                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                                oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                                response = client.Execute(oRequest);
                                                Thread.Sleep(3000);
                                            }
                                            else
                                                break;
                                        }

                                        bool lJaGerada = false;
                                        if (response.Content.Contains("ja agrupada"))
                                        {
                                            B2WResult oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                            sPLP = oPedido.message.Split(' ')[response.Content.Split(' ').Length - 1];
                                            lJaGerada = true;
                                        }


                                        Thread.Sleep(1000);


                                        if (response.StatusCode == HttpStatusCode.Created || lJaGerada)
                                        {
                                            //sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                            response = null;
                                            while (response == null)
                                            {
                                                client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                oRequest = new RestRequest(Method.GET);
                                                oRequest.AddHeader("cache-control", "no-cache");
                                                oRequest.AddHeader("Accept", "application/json");
                                                oRequest.AddHeader("Content-Type", "application/json");
                                                oRequest.AddHeader("x-Api-Key", sKey);
                                                oRequest.AddHeader("X-User-Email", sUsuario);
                                                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                response = client.Execute(oRequest);

                                                if (response.Content.Contains("no Route matched"))
                                                {
                                                    Thread.Sleep(3000);
                                                    response = null;
                                                }
                                            }

                                            for (int j = 0; j < 12; j++)
                                            {
                                                if (response.StatusCode == HttpStatusCode.OK)
                                                    break;

                                                if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                                {
                                                    Thread.Sleep(10000);
                                                    break;
                                                }

                                                else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                                {
                                                    Thread.Sleep(20000);
                                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                    oRequest = new RestRequest(Method.GET);
                                                    oRequest.AddHeader("cache-control", "no-cache");
                                                    oRequest.AddHeader("Accept", "application/json");
                                                    oRequest.AddHeader("Content-Type", "application/json");
                                                    oRequest.AddHeader("x-Api-Key", sKey);
                                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                    response = client.Execute(oRequest);
                                                    Thread.Sleep(3000);
                                                }
                                                else
                                                    break;
                                            }

                                            Thread.Sleep(3000);
                                            EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                            if (oJsonB2W.docsExternos == null)
                                                continue;

                                            if (oJsonB2W.docsExternos.Length > 0)
                                                if (oJsonB2W.plp != null)
                                                {
                                                    string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], "PAC");
                                                    byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                                    ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], 5, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[1]);
                                                    ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                                    // salva json
                                                    if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                                        Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                                    File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                                }

                                        }
                                        else
                                        {
                                            B2WResult oJsonResult = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = '" + oJsonResult.message + "' WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                        }
                                        d.Dispose();
                                    }
                                    catch (Exception ex)
                                    {
                                        Console.WriteLine(ex.Message);

                                    }
                                }
                                else if (oNotaFiscal.notafiscal.tipoIntegracao == "IntegraCommerce")
                                {
                                    try
                                    {
                                        ClasseFuncoes.RetornaCodigoMAGALU(iCodigoCliente);

                                        //Os possíveis status são: New, Approved, Processing, Invoiced, Shipped, Delivered, Canceled, ShipmentException.
                                        RestClient client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order/" + oNotaFiscal.notafiscal.numeroPedidoLoja);
                                        RestRequest oRequestMAGALU = new RestRequest(Method.GET);
                                        oRequestMAGALU.AddHeader("cache-control", "no-cache");
                                        oRequestMAGALU.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                                        IRestResponse oResposta = client.Execute(oRequestMAGALU);

                                        Thread.Sleep(3000);
                                        InterRegraNegocio.Order oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<InterRegraNegocio.Order>(oResposta.Content);

                                        if (oPedido == null)
                                        {
                                            continue;
                                        }
                                        DataTable dtbChaves = ClasseParametros.ConsultaBancoMysql("SELECT USUARIOMAGALU,SENHAMAGALU FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());


                                        Console.WriteLine("Gerando etiqueta do pedido " + oPedido.IdOrder);

                                        if (oPedido.IdOrder == "LU-8504500673851491")
                                        {

                                        }


                                        try
                                        {
                                            // Gera tracking
                                            oPedido.CodigoCliente = 5;
                                            try
                                            {
                                                ClasseParametros.SalvaBancoPDFZPLMagalu(oPedido, dtbChaves.Rows[0]["USUARIOMAGALU"].ToString(), dtbChaves.Rows[0]["SENHAMAGALU"].ToString());
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                            }
                                            catch (Exception ex)
                                            {

                                                Console.WriteLine("Erro no pedido: " + ex.Message);

                                                if (ex.Message.Contains("não está faturado"))
                                                {

                                                    ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = 'Sem nota na marketplace' WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                }


                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            ClasseParametros.MostraErro(ex.Message, ClasseParametros.iconApp);
                                        }

                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }

                        }
                        catch (Exception ex)
                        {

                        }

                    }

                }
                catch (Exception ex)
                {

                }

            }

        }
        private static void EnviaNotaSaidaCanceladas(int iCodigoCliente)
        {
            //Status 3 Cancelada
            for (int i = 1; i < 100; i++)
            {
                try
                {
                    var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/notasfiscais/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling +
                        "&filters=dataEmissao[" + sDataOntem + " 00:00:00 TO " + sDataAgora + " 23:59:59];situacao[3];loja[todas]");
                    request.ContentType = "application/json";
                    request.Method = "GET";
                    string sNotas = "";
                    var oNotas = "";

                    string sSql = "";
                    Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                    {
                        if (response.StatusCode != HttpStatusCode.OK)
                            Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                        {
                            var content = reader.ReadToEnd();
                            if (string.IsNullOrWhiteSpace(content))
                                Console.Out.WriteLine("Empty Response");
                            else
                                sNotas = content;
                        }
                    }

                    NotaFiscaljsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<NotaFiscaljsonBling>(sNotas);

                    if (oListXML.retorno.notasfiscais == null)
                    {
                        break;
                    }

                    foreach (Notasfiscai oNotaFiscal in oListXML.retorno.notasfiscais)
                    {


                        string sCNPJ = oNotaFiscal.notafiscal.chaveAcesso.Substring(6, 14);

                        if (int.Parse(oNotaFiscal.notafiscal.numero) == 3633)
                        {

                        }

                        if (oNotaFiscal.notafiscal.numeroPedidoLoja != null && oNotaFiscal.notafiscal.numeroPedidoLoja.Contains("277430705701"))
                        {

                        }

                        Console.WriteLine(" Thread Notas Canceladas - Gerando Etiqueta do Pedido " + oNotaFiscal.notafiscal.numero + " - Referente ao Pedido " + oNotaFiscal.notafiscal.tipoIntegracao + " " + oNotaFiscal.notafiscal.numeroPedidoLoja);
                        DataTable d = null;

                        //nota
                        try
                        {
                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND CANCELADO = 0");

                            if (d.Rows.Count == 1)
                            {
                                //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                request.ContentType = "application/json";
                                request.Method = "GET";

                                using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                {
                                    if (response.StatusCode != HttpStatusCode.OK)
                                        Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                    {
                                        var content = reader.ReadToEnd();
                                        if (string.IsNullOrWhiteSpace(content))
                                            Console.Out.WriteLine("Empty Response");
                                        else
                                            sNotas = content;
                                    }
                                }

                                string sPasta = Directory.GetCurrentDirectory() + "\\temp";

                                string sUsuarioFTP = "2eletro-varejo";
                                string sSenhaFTP = "#2eletro001#";
                                string sPastaFTP = "ftp://serrapark.dd.spiritlinux.com/09-EnvioCancelamentoSaida/";



                                #region ENDERECOS


                                string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                using (var client = new WebClient())
                                {
                                    bool lEnviado = false;
                                    while (!lEnviado)
                                    {
                                        try
                                        {
                                            client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                            client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                            lEnviado = true;
                                        }
                                        catch (Exception ex)
                                        {
                                            Console.WriteLine("Erro:" + ex.Message);
                                        }
                                    }
                                }


                                #endregion

                                sSql = "UPDATE VENDAS SET CANCELADO = 1 WHERE NOTAFISCAL = @NOTAFISCAL";

                                ParametrosSQL.Add("NOTAFISCAL", oNotaFiscal.notafiscal.chaveAcesso);

                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                            }
                        }
                        catch (Exception ex)
                        {

                        }
                        //etq
                        try
                        {




                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT IS NULL");

                            if (d.Rows.Count > 0)
                            {
                                if (oNotaFiscal.notafiscal.tipoIntegracao == "MercadoLivre")
                                {

                                    ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                    IRestResponse oResposta = null;

                                    //ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                    List<Parameter> ps = new List<Parameter>();
                                    Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                    ps.Add(p);

                                    MercadoLivreEntrega oEntrega = null;

                                    while (oResposta == null)
                                    {


                                        oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                        Result oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);



                                        if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                                        }

                                        if (oResposta.StatusCode == HttpStatusCode.NotFound)
                                        {
                                            oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                            oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);
                                        }

                                        oResposta = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);


                                        oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);
                                        if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                            oResposta = null;
                                        }
                                        else if (oResposta.StatusCode == 0)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);


                                            oResposta = null;
                                        }
                                    }

                                    ps = new List<Parameter>();
                                    p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                    ps.Add(p);
                                    p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                                    ps.Add(p);
                                    p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                                    ps.Add(p);

                                    oResposta = null;
                                    while (oResposta == null)
                                    {
                                        oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                                        if (oResposta.Content.Contains("delivered") || oResposta.Content.Contains("shipped"))
                                        {
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                        }
                                        else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                            oResposta = null;

                                        }
                                    }

                                    /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                                    if (oResposta.StatusCode == HttpStatusCode.OK)
                                    {
                                        ClasseParametros.SalvaEtiqueta(oNotaFiscal.notafiscal.chaveAcesso, oResposta.RawBytes, 5, oNotaFiscal.notafiscal.numeroPedidoLoja, "MELI");
                                        sSql = "SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT = ''";
                                        DataTable dtbVendas = ClasseParametros.ConsultaBancoMysql(sSql);
                                        if (dtbVendas.Rows.Count == 0)
                                        {
                                            ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                        }
                                        dtbVendas.Dispose();
                                        //break;
                                    }

                                }
                                else if (oNotaFiscal.notafiscal.tipoIntegracao == "Amazon")
                                {
                                    DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);

                                    //Danfe danfe = new Danfe(oDanfe);

                                    GeraEtiquetaJADLOGBling(iCodigoCliente, oDanfe);
                                }
                                else if (oNotaFiscal.notafiscal.tipoIntegracao == "SkyHub")
                                {
                                    Console.WriteLine("Gera etiqueta do pedido " + oNotaFiscal.notafiscal.numeroPedidoLoja);

                                    try
                                    {
                                        d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                                        string sKey = d.Rows[0]["KEYB2W"].ToString();
                                        string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                        string sAccount = "0MDxaksT8d";
                                        d.Dispose();

                                        d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'  AND ETQENVIADO = 0");

                                        if (d.Rows.Count == 0)
                                        {
                                            continue;
                                        }


                                        RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                        RestRequest oRequest = new RestRequest(Method.POST);
                                        oRequest.AddHeader("Content-Length", "52");
                                        oRequest.AddHeader("Cache-Control", "no-cache");
                                        oRequest.AddHeader("Accept", "application/json");
                                        oRequest.AddHeader("Content-Type", "application/json");
                                        oRequest.AddHeader("x-Api-Key", sKey);
                                        oRequest.AddHeader("X-User-Email", sUsuario);
                                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                        string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                        oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                        IRestResponse response = client.Execute(oRequest);
                                        string sPLP = "";

                                        if (response.Content.Contains("nao tem nota fiscal"))
                                        {
                                            continue;
                                        }

                                        if (response.Content.Contains("nao localizados"))
                                        {
                                            continue;
                                        }

                                        Thread.Sleep(1000);
                                        for (int j = 0; j < 12; j++)
                                        {
                                            if (response.StatusCode == HttpStatusCode.Created)
                                            {
                                                sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                                break;
                                            }

                                            if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout || response.StatusCode == HttpStatusCode.ServiceUnavailable)
                                            {
                                                Thread.Sleep(10000);
                                                response = client.Execute(oRequest);
                                            }
                                            else if (response.StatusCode.ToString() == "429")
                                            {
                                                Thread.Sleep(20000);
                                                client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                                oRequest = new RestRequest(Method.POST);
                                                oRequest.AddHeader("Content-Length", "52");
                                                oRequest.AddHeader("Cache-Control", "no-cache");
                                                oRequest.AddHeader("Accept", "application/json");
                                                oRequest.AddHeader("Content-Type", "application/json");
                                                oRequest.AddHeader("x-Api-Key", sKey);
                                                oRequest.AddHeader("X-User-Email", sUsuario);
                                                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                                oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                                response = client.Execute(oRequest);
                                                Thread.Sleep(3000);
                                            }
                                            else
                                                break;
                                        }

                                        bool lJaGerada = false;
                                        if (response.Content.Contains("ja agrupada"))
                                        {
                                            B2WResult oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                            sPLP = oPedido.message.Split(' ')[response.Content.Split(' ').Length - 1];
                                            lJaGerada = true;
                                        }


                                        Thread.Sleep(1000);


                                        if (response.StatusCode == HttpStatusCode.Created || lJaGerada)
                                        {
                                            //sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                            response = null;
                                            while (response == null)
                                            {
                                                client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                oRequest = new RestRequest(Method.GET);
                                                oRequest.AddHeader("cache-control", "no-cache");
                                                oRequest.AddHeader("Accept", "application/json");
                                                oRequest.AddHeader("Content-Type", "application/json");
                                                oRequest.AddHeader("x-Api-Key", sKey);
                                                oRequest.AddHeader("X-User-Email", sUsuario);
                                                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                response = client.Execute(oRequest);

                                                if (response.Content.Contains("no Route matched"))
                                                {
                                                    Thread.Sleep(3000);
                                                    response = null;
                                                }
                                            }

                                            for (int j = 0; j < 12; j++)
                                            {
                                                if (response.StatusCode == HttpStatusCode.OK)
                                                    break;

                                                if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                                {
                                                    Thread.Sleep(10000);
                                                    break;
                                                }

                                                else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                                {
                                                    Thread.Sleep(20000);
                                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                    oRequest = new RestRequest(Method.GET);
                                                    oRequest.AddHeader("cache-control", "no-cache");
                                                    oRequest.AddHeader("Accept", "application/json");
                                                    oRequest.AddHeader("Content-Type", "application/json");
                                                    oRequest.AddHeader("x-Api-Key", sKey);
                                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                    response = client.Execute(oRequest);
                                                    Thread.Sleep(3000);
                                                }
                                                else
                                                    break;
                                            }

                                            Thread.Sleep(3000);
                                            EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                            if (oJsonB2W.docsExternos == null)
                                                continue;

                                            if (oJsonB2W.docsExternos.Length > 0)
                                                if (oJsonB2W.plp != null)
                                                {
                                                    string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], "PAC");
                                                    byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                                    ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], 5, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[1]);
                                                    ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                                    // salva json
                                                    if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                                        Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                                    File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                                }

                                        }
                                        d.Dispose();
                                    }
                                    catch (Exception ex)
                                    {
                                        Console.WriteLine(ex.Message);

                                    }

                                    //try
                                    //{
                                    //    d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = "+ iCodigoCliente.ToString());
                                    //    string sKey = d.Rows[0]["KEYB2W"].ToString();
                                    //    string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                    //    string sAccount = "0MDxaksT8d";
                                    //    d.Dispose();

                                    //    RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                    //    RestRequest oRequest = new RestRequest(Method.GET);
                                    //    oRequest.AddHeader("Content-Length", "52");
                                    //    oRequest.AddHeader("Cache-Control", "no-cache");
                                    //    oRequest.AddHeader("Accept", "application/json");
                                    //    oRequest.AddHeader("Content-Type", "application/json");
                                    //    oRequest.AddHeader("x-Api-Key", sKey);
                                    //    oRequest.AddHeader("X-User-Email", sUsuario);
                                    //    oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                                    //    //string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                    //    //oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                    //    IRestResponse response = client.Execute(oRequest);

                                    //    B2WPLP oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPLP>(response.Content);

                                    //    foreach (Plp oPLP in oPedido.plp)
                                    //    {

                                    //        string sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                    //        string sPedido = "";
                                    //        response = null;
                                    //        while (response == null)
                                    //        {
                                    //            client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                    //            oRequest = new RestRequest(Method.GET);
                                    //            oRequest.AddHeader("cache-control", "no-cache");
                                    //            oRequest.AddHeader("Accept", "application/json");
                                    //            oRequest.AddHeader("Content-Type", "application/json");
                                    //            oRequest.AddHeader("x-Api-Key", sKey);
                                    //            oRequest.AddHeader("X-User-Email", sUsuario);
                                    //            oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                    //            response = client.Execute(oRequest);

                                    //            if (response.Content.Contains("no Route matched"))
                                    //            {
                                    //                Thread.Sleep(3000);
                                    //                response = null;
                                    //            }
                                    //        }

                                    //        for (int j = 0; j < 12; i++)
                                    //        {
                                    //            if (response.StatusCode == HttpStatusCode.OK)
                                    //                break;

                                    //            if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                    //            {
                                    //                Thread.Sleep(10000);
                                    //                response = client.Execute(oRequest);
                                    //            }

                                    //            else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                    //            {
                                    //                Thread.Sleep(20000);
                                    //                client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                    //                oRequest = new RestRequest(Method.GET);
                                    //                oRequest.AddHeader("cache-control", "no-cache");
                                    //                oRequest.AddHeader("Accept", "application/json");
                                    //                oRequest.AddHeader("Content-Type", "application/json");
                                    //                oRequest.AddHeader("x-Api-Key", sKey);
                                    //                oRequest.AddHeader("X-User-Email", sUsuario);
                                    //                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                    //                response = client.Execute(oRequest);
                                    //                Thread.Sleep(3000);
                                    //            }
                                    //            else
                                    //                break;
                                    //        }

                                    //        Thread.Sleep(3000);
                                    //        EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                    //        if (oJsonB2W.docsExternos.Length > 0)
                                    //            if (oJsonB2W.plp != null)
                                    //            {
                                    //                string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, sPedido.Split('-')[0], "PAC");
                                    //                byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                    //                ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, sPedido.Split('-')[0], 5, sPedido.Split('-')[0], sPedido.Split('-')[1]);

                                    //                // salva json
                                    //                if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                    //                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                    //                File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                    //            }
                                    //    }
                                    //}
                                    //catch (Exception ex)
                                    //{

                                    //}

                                }
                                else if (oNotaFiscal.notafiscal.tipoIntegracao == "IntegraCommerce")
                                {
                                    try
                                    {
                                        ClasseFuncoes.RetornaCodigoMAGALU(iCodigoCliente);

                                        //Os possíveis status são: New, Approved, Processing, Invoiced, Shipped, Delivered, Canceled, ShipmentException.
                                        RestClient client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order/" + oNotaFiscal.notafiscal.numeroPedidoLoja);
                                        RestRequest oRequestMAGALU = new RestRequest(Method.GET);
                                        oRequestMAGALU.AddHeader("cache-control", "no-cache");
                                        oRequestMAGALU.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                                        IRestResponse oResposta = client.Execute(oRequestMAGALU);

                                        Thread.Sleep(3000);
                                        InterRegraNegocio.Order oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<InterRegraNegocio.Order>(oResposta.Content);

                                        if (oPedido == null)
                                        {
                                            continue;
                                        }
                                        DataTable dtbChaves = ClasseParametros.ConsultaBancoMysql("SELECT USUARIOMAGALU,SENHAMAGALU FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());


                                        Console.WriteLine("Gerando etiqueta do pedido " + oPedido.IdOrder);

                                        if (oPedido.IdOrder == "LU-8504500673851491")
                                        {

                                        }


                                        try
                                        {
                                            // Gera tracking
                                            oPedido.CodigoCliente = 5;
                                            try
                                            {
                                                ClasseParametros.SalvaBancoPDFZPLMagalu(oPedido, dtbChaves.Rows[0]["USUARIOMAGALU"].ToString(), dtbChaves.Rows[0]["SENHAMAGALU"].ToString());
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                            }
                                            catch (Exception ex)
                                            {

                                                Console.WriteLine("Erro no pedido: " + ex.Message);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            ClasseParametros.MostraErro(ex.Message, ClasseParametros.iconApp);
                                        }

                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }

                        }
                        catch (Exception ex)
                        {

                        }
                    }

                }
                catch (Exception ex)
                {
                    Console.WriteLine("Erro Thread Notas Entrada " + ex.Message);
                }

            }
        }
        private static void EnviaNotaSaidaEmitida(int iCodigoCliente)
        {
            for (int i = 1; i < 100; i++)
            {
                try
                {
                    var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/notasfiscais/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling +
                        "&filters=dataEmissao[" + sDataOntem + " 00:00:00 TO " + sDataAgora + " 23:59:59];situacao[7];loja[todas]");
                    request.ContentType = "application/json";
                    request.Method = "GET";
                    string sNotas = "";
                    var oNotas = "";

                    string sSql = "";
                    Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                    {
                        if (response.StatusCode != HttpStatusCode.OK)
                            Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                        {
                            var content = reader.ReadToEnd();
                            if (string.IsNullOrWhiteSpace(content))
                                Console.Out.WriteLine("Empty Response");
                            else
                                sNotas = content;
                        }
                    }

                    NotaFiscaljsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<NotaFiscaljsonBling>(sNotas);

                    if (oListXML.retorno.notasfiscais == null)
                    {
                        break;
                    }

                    foreach (Notasfiscai oNotaFiscal in oListXML.retorno.notasfiscais)
                    {

                        string sCNPJ = oNotaFiscal.notafiscal.chaveAcesso.Substring(6, 14);

                        if (int.Parse(oNotaFiscal.notafiscal.numero) == 2122 || int.Parse(oNotaFiscal.notafiscal.numero) == 2140 || int.Parse(oNotaFiscal.notafiscal.numero) == 2136 || int.Parse(oNotaFiscal.notafiscal.numero) == 2133
                            || int.Parse(oNotaFiscal.notafiscal.numero) == 2132)
                        {

                        }

                        if (oNotaFiscal.notafiscal.numeroPedidoLoja != null && oNotaFiscal.notafiscal.numeroPedidoLoja.Contains("277430705701"))
                        {

                        }

                        Console.WriteLine(" Thread Notas Emitidas - Gerando Etiqueta do Pedido " + oNotaFiscal.notafiscal.numero + " - Referente ao Pedido " + oNotaFiscal.notafiscal.tipoIntegracao + " " + oNotaFiscal.notafiscal.numeroPedidoLoja);
                        DataTable d = null;

                        //nota
                        try
                        {
                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND XMLENVIADO = 0");

                            if (d.Rows.Count == 0)
                            {
                                //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                request.ContentType = "application/json";
                                request.Method = "GET";

                                using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                {
                                    if (response.StatusCode != HttpStatusCode.OK)
                                        Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                    using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                    {
                                        var content = reader.ReadToEnd();
                                        if (string.IsNullOrWhiteSpace(content))
                                            Console.Out.WriteLine("Empty Response");
                                        else
                                            sNotas = content;
                                    }
                                }

                                string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                                if (!Directory.Exists(sPasta))
                                {
                                    Directory.CreateDirectory(sPasta);
                                }
                                string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                File.WriteAllText(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml", sNotas);


                                DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                Danfe danfe = new Danfe(oDanfe);

                                string sUsuarioFTP = "";
                                string sSenhaFTP = "";
                                string sPastaFTP = "";
                                if (sCNPJ == "34036601000419")
                                {
                                    sUsuarioFTP = "2eletroftp@2eletro.com.br";
                                    sSenhaFTP = "#2eletro2020#";
                                    sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/";
                                }
                                else if (sCNPJ == "34036601000338")
                                {
                                    sUsuarioFTP = "2eletro-varejo";
                                    sSenhaFTP = "#2eletro001#";
                                    sPastaFTP = "ftp://serrapark.dd.spiritlinux.com/04-EnvioSaida/";
                                }


                                #region ENDERECOS

                                if (sCNPJ == "34036601000419")
                                {
                                    string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";


                                    danfe.Gerar();
                                    danfe.Salvar(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                    danfe.Dispose();

                                    #region cria pasta xmlbkacup
                                    try
                                    {
                                        //create the directory
                                        FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP"));
                                        requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        requestDir.UsePassive = true;
                                        requestDir.UseBinary = true;
                                        requestDir.KeepAlive = false;
                                        FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        Stream ftpStream = response.GetResponseStream();

                                        ftpStream.Close();
                                        response.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        {
                                            response.Close();
                                        }
                                        else
                                        {
                                            response.Close();
                                        }
                                    }
                                    #endregion

                                    #region cria pasta pdfbkacup
                                    try
                                    {
                                        //create the directory
                                        FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP"));
                                        requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        requestDir.UsePassive = true;
                                        requestDir.UseBinary = true;
                                        requestDir.KeepAlive = false;
                                        FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        Stream ftpStream = response.GetResponseStream();

                                        ftpStream.Close();
                                        response.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        {
                                            response.Close();
                                        }
                                        else
                                        {
                                            response.Close();
                                        }
                                    }
                                    #endregion

                                    sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP/" + sPastaDataHoje;

                                    #region cria pasta do dia
                                    try
                                    {
                                        //create the directory
                                        FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaFTP));
                                        requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        requestDir.UsePassive = true;
                                        requestDir.UseBinary = true;
                                        requestDir.KeepAlive = false;
                                        FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        Stream ftpStream = response.GetResponseStream();

                                        ftpStream.Close();
                                        response.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        {
                                            response.Close();
                                        }
                                        else
                                        {
                                            response.Close();
                                        }
                                    }

                                    #endregion

                                    string sPastaxml = "ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP/" + sPastaDataHoje;
                                    #region cria pasta do dia xml
                                    try
                                    {
                                        //create the directory
                                        FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaxml));
                                        requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        requestDir.UsePassive = true;
                                        requestDir.UseBinary = true;
                                        requestDir.KeepAlive = false;
                                        FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        Stream ftpStream = response.GetResponseStream();

                                        ftpStream.Close();
                                        response.Close();
                                    }
                                    catch (WebException ex)
                                    {
                                        FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        {
                                            response.Close();
                                        }
                                        else
                                        {
                                            response.Close();
                                        }
                                    }

                                    #endregion

                                    #region Envia pdf
                                    using (var client = new WebClient())
                                    {
                                        client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".pdf", WebRequestMethods.Ftp.UploadFile, sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                    }

                                    #endregion

                                    #region Envia pdf
                                    using (var client = new WebClient())
                                    {
                                        client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        client.UploadFile(sPastaxml + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                    }
                                    #endregion


                                    string sChaveNota = oDanfe.ChaveAcesso;
                                    string sNota = oDanfe.NfNumero.ToString();
                                    string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                                    //string sCNPJ = oDanfe.Emitente.CnpjCpf;

                                    DateTime dEmissao = DateTime.Parse(sDataEmissao);

                                    byte[] oPDFStream = File.ReadAllBytes(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                    sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF)";
                                    ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                    ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                                    ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                                    ParametrosSQL.Add("FINALIZADO", "0");
                                    ParametrosSQL.Add("CNPJ", sCNPJ);
                                    ParametrosSQL.Add("XML", sNotas);
                                    ParametrosSQL.Add("PDF", oPDFStream);
                                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                                    foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                                    {
                                        string sEAN = oProduto.EAN;
                                        sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ) VALUES(@NOTA,@PRODUTO,@CNPJ)";
                                        ParametrosSQL.Clear();
                                        ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                        ParametrosSQL.Add("PRODUTO", sEAN);
                                        ParametrosSQL.Add("CNPJ", sCNPJ);
                                        ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                                    }

                                    oDanfe = null;
                                    GC.Collect();
                                    GC.WaitForPendingFinalizers();
                                }
                                else if (sCNPJ == "34036601000338")
                                {
                                    sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                    using (var client = new WebClient())
                                    {
                                        bool lEnviado = false;
                                        while (!lEnviado)
                                        {
                                            try
                                            {
                                                client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                                client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                                lEnviado = true;
                                            }
                                            catch (Exception ex)
                                            {
                                                Console.WriteLine("Erro:" + ex.Message);
                                            }
                                        }
                                    }


                                }

                                #endregion

                                sSql = "INSERT INTO VENDAS(NOTAFISCAL,XMLENVIADO,ETQENVIADO) VALUES(@NOTAFISCAL,@XMLENVIADO,@ETQENVIADO)";

                                ParametrosSQL.Add("NOTAFISCAL", oNotaFiscal.notafiscal.chaveAcesso);
                                ParametrosSQL.Add("XMLENVIADO", "1");
                                ParametrosSQL.Add("ETQENVIADO", "0");

                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                            }
                        }
                        catch (Exception ex)
                        {

                        }
                        //etq
                        try
                        {



                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETQENVIADO = 0");

                            if (d.Rows.Count > 0)
                            {
                                if (oNotaFiscal.notafiscal.tipoIntegracao == "MercadoLivre")
                                {

                                    ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                    IRestResponse oResposta = null;

                                    //ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                    List<Parameter> ps = new List<Parameter>();
                                    Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                    ps.Add(p);

                                    MercadoLivreEntrega oEntrega = null;

                                    while (oResposta == null)
                                    {


                                        oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                        Result oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);



                                        if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                                        }

                                        if (oResposta.StatusCode == HttpStatusCode.NotFound)
                                        {
                                            oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                            oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);
                                        }

                                        oResposta = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);


                                        oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);
                                        if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                            oResposta = null;
                                        }
                                        else if (oResposta.StatusCode == 0)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);


                                            oResposta = null;
                                        }
                                    }

                                    ps = new List<Parameter>();
                                    p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                    ps.Add(p);
                                    p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                                    ps.Add(p);
                                    p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                                    ps.Add(p);

                                    oResposta = null;
                                    while (oResposta == null)
                                    {
                                        oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                                        if (oResposta.Content.Contains("delivered") || oResposta.Content.Contains("shipped"))
                                        {
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                        }
                                        else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                        {
                                            ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                            oResposta = null;

                                        }
                                    }

                                    /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                                    if (oResposta.StatusCode == HttpStatusCode.OK)
                                    {
                                        ClasseParametros.SalvaEtiqueta(oNotaFiscal.notafiscal.chaveAcesso, oResposta.RawBytes, 5, oNotaFiscal.notafiscal.numeroPedidoLoja, "MELI");
                                        sSql = "SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT = ''";
                                        DataTable dtbVendas = ClasseParametros.ConsultaBancoMysql(sSql);
                                        if (dtbVendas.Rows.Count == 0)
                                        {
                                            ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                        }
                                        dtbVendas.Dispose();
                                        //break;
                                    }

                                }
                                else if (oNotaFiscal.notafiscal.tipoIntegracao == "Amazon")
                                {
                                    DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);

                                    //Danfe danfe = new Danfe(oDanfe);

                                    GeraEtiquetaJADLOGBling(iCodigoCliente, oDanfe);
                                }
                                else if (oNotaFiscal.notafiscal.tipoIntegracao == "SkyHub")
                                {
                                    Console.WriteLine("Gera etiqueta do pedido " + oNotaFiscal.notafiscal.numeroPedidoLoja);

                                    try
                                    {
                                        d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                                        string sKey = d.Rows[0]["KEYB2W"].ToString();
                                        string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                        string sAccount = "0MDxaksT8d";
                                        d.Dispose();

                                        d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'  AND ETQENVIADO = 0");

                                        if (d.Rows.Count == 0)
                                        {
                                            continue;
                                        }


                                        RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                        RestRequest oRequest = new RestRequest(Method.POST);
                                        oRequest.AddHeader("Content-Length", "52");
                                        oRequest.AddHeader("Cache-Control", "no-cache");
                                        oRequest.AddHeader("Accept", "application/json");
                                        oRequest.AddHeader("Content-Type", "application/json");
                                        oRequest.AddHeader("x-Api-Key", sKey);
                                        oRequest.AddHeader("X-User-Email", sUsuario);
                                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                        string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                        oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                        IRestResponse response = client.Execute(oRequest);
                                        string sPLP = "";

                                        if (response.Content.Contains("nao tem nota fiscal"))
                                        {
                                            continue;
                                        }

                                        if (response.Content.Contains("nao localizados"))
                                        {
                                            continue;
                                        }

                                        Thread.Sleep(1000);
                                        for (int j = 0; j < 12; j++)
                                        {
                                            if (response.StatusCode == HttpStatusCode.Created)
                                            {
                                                sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                                break;
                                            }

                                            if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout || response.StatusCode == HttpStatusCode.ServiceUnavailable)
                                            {
                                                Thread.Sleep(10000);
                                                response = client.Execute(oRequest);
                                            }
                                            else if (response.StatusCode.ToString() == "429")
                                            {
                                                Thread.Sleep(20000);
                                                client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                                oRequest = new RestRequest(Method.POST);
                                                oRequest.AddHeader("Content-Length", "52");
                                                oRequest.AddHeader("Cache-Control", "no-cache");
                                                oRequest.AddHeader("Accept", "application/json");
                                                oRequest.AddHeader("Content-Type", "application/json");
                                                oRequest.AddHeader("x-Api-Key", sKey);
                                                oRequest.AddHeader("X-User-Email", sUsuario);
                                                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                                oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                                response = client.Execute(oRequest);
                                                Thread.Sleep(3000);
                                            }
                                            else
                                                break;
                                        }

                                        bool lJaGerada = false;
                                        if (response.Content.Contains("ja agrupada"))
                                        {
                                            B2WResult oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                            sPLP = oPedido.message.Split(' ')[response.Content.Split(' ').Length - 1];
                                            lJaGerada = true;
                                        }


                                        Thread.Sleep(1000);


                                        if (response.StatusCode == HttpStatusCode.Created || lJaGerada)
                                        {
                                            //sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                            response = null;
                                            while (response == null)
                                            {
                                                client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                oRequest = new RestRequest(Method.GET);
                                                oRequest.AddHeader("cache-control", "no-cache");
                                                oRequest.AddHeader("Accept", "application/json");
                                                oRequest.AddHeader("Content-Type", "application/json");
                                                oRequest.AddHeader("x-Api-Key", sKey);
                                                oRequest.AddHeader("X-User-Email", sUsuario);
                                                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                response = client.Execute(oRequest);

                                                if (response.Content.Contains("no Route matched"))
                                                {
                                                    Thread.Sleep(3000);
                                                    response = null;
                                                }
                                            }

                                            for (int j = 0; j < 12; j++)
                                            {
                                                if (response.StatusCode == HttpStatusCode.OK)
                                                    break;

                                                if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                                {
                                                    Thread.Sleep(10000);
                                                    break;
                                                }

                                                else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                                {
                                                    Thread.Sleep(20000);
                                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                    oRequest = new RestRequest(Method.GET);
                                                    oRequest.AddHeader("cache-control", "no-cache");
                                                    oRequest.AddHeader("Accept", "application/json");
                                                    oRequest.AddHeader("Content-Type", "application/json");
                                                    oRequest.AddHeader("x-Api-Key", sKey);
                                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                    response = client.Execute(oRequest);
                                                    Thread.Sleep(3000);
                                                }
                                                else
                                                    break;
                                            }

                                            Thread.Sleep(3000);
                                            EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                            if (oJsonB2W.docsExternos == null)
                                                continue;

                                            if (oJsonB2W.docsExternos.Length > 0)
                                                if (oJsonB2W.plp != null)
                                                {
                                                    string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], "PAC");
                                                    byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                                    ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], 5, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[1]);
                                                    ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                                    // salva json
                                                    if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                                        Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                                    File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                                }

                                        }
                                        d.Dispose();
                                    }
                                    catch (Exception ex)
                                    {
                                        Console.WriteLine(ex.Message);

                                    }









                                    //try
                                    //{
                                    //    d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = "+ iCodigoCliente.ToString());
                                    //    string sKey = d.Rows[0]["KEYB2W"].ToString();
                                    //    string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                    //    string sAccount = "0MDxaksT8d";
                                    //    d.Dispose();

                                    //    RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                    //    RestRequest oRequest = new RestRequest(Method.GET);
                                    //    oRequest.AddHeader("Content-Length", "52");
                                    //    oRequest.AddHeader("Cache-Control", "no-cache");
                                    //    oRequest.AddHeader("Accept", "application/json");
                                    //    oRequest.AddHeader("Content-Type", "application/json");
                                    //    oRequest.AddHeader("x-Api-Key", sKey);
                                    //    oRequest.AddHeader("X-User-Email", sUsuario);
                                    //    oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                                    //    //string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                    //    //oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                    //    IRestResponse response = client.Execute(oRequest);

                                    //    B2WPLP oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPLP>(response.Content);

                                    //    foreach (Plp oPLP in oPedido.plp)
                                    //    {

                                    //        string sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                    //        string sPedido = "";
                                    //        response = null;
                                    //        while (response == null)
                                    //        {
                                    //            client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                    //            oRequest = new RestRequest(Method.GET);
                                    //            oRequest.AddHeader("cache-control", "no-cache");
                                    //            oRequest.AddHeader("Accept", "application/json");
                                    //            oRequest.AddHeader("Content-Type", "application/json");
                                    //            oRequest.AddHeader("x-Api-Key", sKey);
                                    //            oRequest.AddHeader("X-User-Email", sUsuario);
                                    //            oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                    //            response = client.Execute(oRequest);

                                    //            if (response.Content.Contains("no Route matched"))
                                    //            {
                                    //                Thread.Sleep(3000);
                                    //                response = null;
                                    //            }
                                    //        }

                                    //        for (int j = 0; j < 12; i++)
                                    //        {
                                    //            if (response.StatusCode == HttpStatusCode.OK)
                                    //                break;

                                    //            if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                    //            {
                                    //                Thread.Sleep(10000);
                                    //                response = client.Execute(oRequest);
                                    //            }

                                    //            else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                    //            {
                                    //                Thread.Sleep(20000);
                                    //                client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                    //                oRequest = new RestRequest(Method.GET);
                                    //                oRequest.AddHeader("cache-control", "no-cache");
                                    //                oRequest.AddHeader("Accept", "application/json");
                                    //                oRequest.AddHeader("Content-Type", "application/json");
                                    //                oRequest.AddHeader("x-Api-Key", sKey);
                                    //                oRequest.AddHeader("X-User-Email", sUsuario);
                                    //                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                    //                response = client.Execute(oRequest);
                                    //                Thread.Sleep(3000);
                                    //            }
                                    //            else
                                    //                break;
                                    //        }

                                    //        Thread.Sleep(3000);
                                    //        EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                    //        if (oJsonB2W.docsExternos.Length > 0)
                                    //            if (oJsonB2W.plp != null)
                                    //            {
                                    //                string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, sPedido.Split('-')[0], "PAC");
                                    //                byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                    //                ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, sPedido.Split('-')[0], 5, sPedido.Split('-')[0], sPedido.Split('-')[1]);

                                    //                // salva json
                                    //                if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                    //                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                    //                File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                    //            }
                                    //    }
                                    //}
                                    //catch (Exception ex)
                                    //{

                                    //}
                                }
                                else if (oNotaFiscal.notafiscal.tipoIntegracao == "IntegraCommerce" || oNotaFiscal.notafiscal.tipoIntegracao == "MAGALU")
                                {
                                    try
                                    {
                                        ClasseFuncoes.RetornaCodigoMAGALU(iCodigoCliente);

                                        //Os possíveis status são: New, Approved, Processing, Invoiced, Shipped, Delivered, Canceled, ShipmentException.
                                        RestClient client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order/" + oNotaFiscal.notafiscal.numeroPedidoLoja);
                                        RestRequest oRequestMAGALU = new RestRequest(Method.GET);
                                        oRequestMAGALU.AddHeader("cache-control", "no-cache");
                                        oRequestMAGALU.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                                        IRestResponse oResposta = client.Execute(oRequestMAGALU);

                                        Thread.Sleep(3000);
                                        InterRegraNegocio.Order oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<InterRegraNegocio.Order>(oResposta.Content);

                                        if (oPedido == null)
                                        {
                                            continue;
                                        }
                                        DataTable dtbChaves = ClasseParametros.ConsultaBancoMysql("SELECT USUARIOMAGALU,SENHAMAGALU FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());


                                        Console.WriteLine("Gerando etiqueta do pedido " + oPedido.IdOrder);

                                        if (oPedido.IdOrder == "LU-8504500673851491")
                                        {

                                        }

                                        d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oPedido.InvoicedKey + "' AND ETQENVIADO = 0");
                                        if (d.Rows.Count == 0)
                                            continue;

                                        try
                                        {
                                            // Gera tracking
                                            oPedido.CodigoCliente = 5;
                                            ClasseParametros.SalvaBancoPDFZPLMagalu(oPedido, dtbChaves.Rows[0]["USUARIOMAGALU"].ToString(), dtbChaves.Rows[0]["SENHAMAGALU"].ToString());
                                            ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                        }
                                        catch (Exception ex)
                                        {
                                            ClasseParametros.MostraErro(ex.Message, ClasseParametros.iconApp);
                                        }

                                    }
                                    catch (Exception ex)
                                    {

                                    }
                                }
                            }
                            //
                        }
                        catch (Exception ex)
                        {

                        }

                        //if (d.Rows.Count > 0)
                        //{
                        //    sSql = "UPDATE VENDAS SET ETIQUETATXTTXT = @ETIQUETATXTTXT, ETIQUETATXT=@ETQ,LOJA=@LOJA,CODIGOCLIENTE=@CODIGOCLIENTE WHERE NOTAFISCAL = @NOTA";
                        //}
                        //else
                        //{
                        //    sSql = "INSERT INTO VENDAS(NOTAFISCAL,ETIQUETATXT,ETIQUETATXTTXT,LOJA,DATACRIADO,LOTE,CODIGOCLIENTE) VALUES(@NOTA,@ETQ,@ETIQUETATXTTXT,@LOJA,@DATACRIADO,@LOTE,@CODIGOCLIENTE)";
                        //    ParametrosSQL.Add("@DATACRIADO", DateTime.Now);
                        //    ParametrosSQL.Add("@LOTE", ClasseParametros.PegaLote("MELI", "5".ToString()));
                        //}
                        //d.Dispose();

                        //File.WriteAllBytes(Directory.GetCurrentDirectory() + "\\XMLETQ\\" + oNotaFiscal.notafiscal.chaveAcesso + ".TXT", aEtiqueta); // Requires System.IO

                        //ParametrosSQL.Add("@ETQ", aEtiqueta);
                        //ParametrosSQL.Add("@ETIQUETATXTTXT", sEtiqueta);
                        //ParametrosSQL.Add("@NOTA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0]);
                        //ParametrosSQL.Add("@LOJA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1]);
                        //ParametrosSQL.Add("@CODIGOCLIENTE", iCliente);
                        //ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                    }

                }
                catch (Exception ex)
                {

                }


            }

        }

        public static async Task LancaNotasManual(int iCodigoCliente)
        {
            string sPastaXMLManual = Directory.GetCurrentDirectory() + "\\xmlmanual";
            if (!Directory.Exists(sPastaXMLManual))
            {
                Directory.CreateDirectory(sPastaXMLManual);
            }

            string[] aXMLManual = Directory.GetFiles(sPastaXMLManual);

            foreach (string sXMLManual in aXMLManual)
            {
                string sXMLNota = File.ReadAllText(sXMLManual);

                DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sXMLNota);
                Danfe danfe = new Danfe(oDanfe);

                Console.WriteLine(" Gerando Etiqueta do Pedido " + oDanfe.NfNumero.ToString());
                DataTable d = null;

                //nota
                try
                {
                    string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                    if (!Directory.Exists(sPasta))
                    {
                        Directory.CreateDirectory(sPasta);
                    }
                    string sArquivoXML = sPasta + "\\" + oDanfe.ChaveAcesso + ".xml";

                    File.WriteAllText(sPasta + "\\" + oDanfe.ChaveAcesso + ".xml", sXMLNota);

                    string sCNPJ = oDanfe.Emitente.CnpjCpf;

                    string sUsuarioFTP = "";
                    string sSenhaFTP = "";
                    string sPastaFTP = "";
                    if (sCNPJ == "34036601000419")
                    {
                        sUsuarioFTP = "2eletroftp@2eletro.com.br";
                        sSenhaFTP = "#2eletro2020#";
                        sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/";
                    }
                    else if (sCNPJ == "34036601000338")
                    {
                        sUsuarioFTP = "2eletro-varejo";
                        sSenhaFTP = "#2eletro001#";
                        sPastaFTP = "ftp://serrapark.dd.spiritlinux.com/04-EnvioSaida/";
                    }

                    #region ENDERECOS

                    if (sCNPJ == "34036601000419")
                    {
                        #region ORLA
                        //st
                        #endregion
                    }
                    else if (sCNPJ == "34036601000338" && oDanfe.NfSerie != 3)
                    {
                        sArquivoXML = sPasta + "\\" + oDanfe.ChaveAcesso + ".xml";

                        using (var client = new WebClient())
                        {
                            bool lEnviado = false;
                            while (!lEnviado)
                            {
                                try
                                {
                                    client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                    client.UploadFile(sPastaFTP + oDanfe.ChaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                    lEnviado = true;
                                }
                                catch (Exception ex)
                                {
                                    Console.WriteLine("Erro:" + ex.Message);
                                }
                            }
                        }


                    }

                    #endregion

                    Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                    string sSql = "INSERT INTO VENDAS(NOTAFISCAL,XMLENVIADO,ETQENVIADO) VALUES(@NOTAFISCAL,@XMLENVIADO,@ETQENVIADO)";

                    ParametrosSQL.Add("NOTAFISCAL", oDanfe.ChaveAcesso);
                    ParametrosSQL.Add("XMLENVIADO", "1");
                    ParametrosSQL.Add("ETQENVIADO", "0");

                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                    sSql = @"SELECT NM.NOTA, ND.PRODUTO FROM NOTAMASTER NM
                                              LEFT OUTER JOIN NOTADETALHE ND
                                                ON NM.NOTA = ND.NOTA AND NM.CNPJ = ND.CNPJ WHERE CHAVENOTA = '" + oDanfe.ChaveAcesso + "'";

                    d = ClasseParametros.ConsultaBancoMysql(sSql);

                    if (d.Rows.Count == 0)
                    {

                        #region SALVA NOTAMASTER E NOTADETALHE

                        try
                        {


                            string sChaveNota = oDanfe.ChaveAcesso;
                            string sNota = oDanfe.NfNumero.ToString();
                            string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                            string sCNPJNota = oDanfe.Emitente.CnpjCpf;
                            string sNomeCliente = oDanfe.Destinatario.NomeFantasia;
                            string sSerie = oDanfe.NfSerie.ToString();

                            if (sCNPJNota == "34036601000419")
                            {

                            }

                            if (sNota == "3038")
                            {

                            }

                            danfe.Gerar();
                            danfe.Salvar(sPasta + "\\" + sChaveNota + ".pdf");

                            DateTime dEmissao = DateTime.Parse(sDataEmissao);

                            byte[] oPDFStream = File.ReadAllBytes(sPasta + "\\" + sChaveNota + ".pdf");


                            if (d.Rows.Count == 0)
                            {
                                sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF,NOMECLIENTE,NOTASERIE) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF,@NOMECLIENTE,@NOTASERIE)";
                                ParametrosSQL.Clear();
                                ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                                ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                                ParametrosSQL.Add("FINALIZADO", "0");
                                ParametrosSQL.Add("CNPJ", sCNPJNota);
                                ParametrosSQL.Add("XML", sXMLNota);
                                ParametrosSQL.Add("PDF", oPDFStream);
                                ParametrosSQL.Add("NOMECLIENTE", sNomeCliente);
                                ParametrosSQL.Add("NOTASERIE", sSerie);
                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                                {
                                    string sEAN = oProduto.EAN;
                                    string sCodigoSku = oProduto.Codigo;
                                    string sDescricao = oProduto.Descricao;
                                    string sQuantidade = oProduto.Quantidade.ToString();
                                    sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ,DESCRICAO,QUANTIDADE,SKU) VALUES(@NOTA,@PRODUTO,@CNPJ,@DESCRICAO,@QUANTIDADE,@SKU)";
                                    ParametrosSQL.Clear();
                                    ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                    ParametrosSQL.Add("PRODUTO", sEAN);
                                    ParametrosSQL.Add("CNPJ", sCNPJNota);
                                    ParametrosSQL.Add("DESCRICAO", sDescricao);
                                    ParametrosSQL.Add("QUANTIDADE", sQuantidade);
                                    ParametrosSQL.Add("SKU", sCodigoSku);

                                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                }
                                //oDanfe = null;
                                GC.Collect();
                                GC.WaitForPendingFinalizers();

                                //string sPastaXMLBACKUP = sPastaXML + "XMLBACKUP\\";

                                //if (!Directory.Exists(sPastaXMLBACKUP))
                                //{
                                //    Directory.CreateDirectory(sPastaXMLBACKUP);
                                //}

                                //if (!Directory.Exists(sPastaXMLBACKUP + sPastaDataHoje))
                                //{
                                //    Directory.CreateDirectory(sPastaXMLBACKUP + sPastaDataHoje);
                                //}

                                //File.Copy(sArquivo, sPastaXMLBACKUP + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                            }
                            //File.Delete(sArquivo);
                        }

                        catch (Exception ex)
                        {
                            //ClasseParametros.MostraErro(ex.Message, iconApp);
                        }


                        #endregion

                    }


                    sSql = @"SELECT NM.NOTA, ND.PRODUTO FROM NOTAMASTER NM
                                              LEFT OUTER JOIN NOTADETALHE ND
                                                ON NM.NOTA = ND.NOTA AND NM.CNPJ = ND.CNPJ WHERE CHAVENOTA = '" + oDanfe.ChaveAcesso + "'";

                    d = ClasseParametros.ConsultaBancoMysql(sSql);
                    if (d.Rows[0]["PRODUTO"].ToString() == "")
                    {
                        #region SALVA NOTADETALHE

                        try
                        {


                            string sChaveNota = oDanfe.ChaveAcesso;
                            string sNota = oDanfe.NfNumero.ToString();
                            string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                            string sCNPJNota = oDanfe.Emitente.CnpjCpf;
                            string sNomeCliente = oDanfe.Destinatario.NomeFantasia;
                            string sSerie = oDanfe.NfSerie.ToString();

                            foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                            {
                                string sEAN = oProduto.EAN;
                                string sCodigoSku = oProduto.Codigo;
                                string sDescricao = oProduto.Descricao;
                                string sQuantidade = oProduto.Quantidade.ToString();
                                sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ,DESCRICAO,QUANTIDADE,SKU) VALUES(@NOTA,@PRODUTO,@CNPJ,@DESCRICAO,@QUANTIDADE,@SKU)";
                                ParametrosSQL.Clear();
                                ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                ParametrosSQL.Add("PRODUTO", sEAN);
                                ParametrosSQL.Add("CNPJ", sCNPJNota);
                                ParametrosSQL.Add("DESCRICAO", sDescricao);
                                ParametrosSQL.Add("QUANTIDADE", sQuantidade);
                                ParametrosSQL.Add("SKU", sCodigoSku);

                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                            }
                            oDanfe = null;
                            GC.Collect();
                            GC.WaitForPendingFinalizers();

                        }

                        catch (Exception ex)
                        {
                            //ClasseParametros.MostraErro(ex.Message, iconApp);
                        }


                        #endregion

                    }



                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }

                //etq
                try
                {
                    d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oDanfe.ChaveAcesso + "' AND ETIQUETATXT IS NULL");

                    if (d.Rows.Count > 0)
                    {
                        Console.WriteLine("Gera etiqueta do pedido " + oDanfe.Pedido);

                        try
                        {
                            IRestResponse response = null;


                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                            string sKey = d.Rows[0]["KEYB2W"].ToString();
                            string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                            string sAccount = "0MDxaksT8d";
                            d.Dispose();

                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oDanfe.ChaveAcesso + "'  AND ETQENVIADO = 0");

                            if (d.Rows.Count == 0)
                            {
                                continue;
                            }


                            RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                            RestRequest oRequest = new RestRequest(Method.POST);
                            oRequest.AddHeader("Content-Length", "52");
                            oRequest.AddHeader("Cache-Control", "no-cache");
                            oRequest.AddHeader("Accept", "application/json");
                            oRequest.AddHeader("Content-Type", "application/json");
                            oRequest.AddHeader("x-Api-Key", sKey);
                            oRequest.AddHeader("X-User-Email", sUsuario);
                            oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                            string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oDanfe.Pedido, @"[^\d]")) + "\"\n  ]\n}";
                            oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                            response = client.Execute(oRequest);
                            string sPLP = "";

                            if (response.Content.Contains("nao tem nota fiscal"))
                            {
                                continue;
                            }

                            if (response.Content.Contains("nao localizados"))
                            {
                                continue;
                            }

                            Thread.Sleep(1000);
                            for (int j = 0; j < 12; j++)
                            {
                                if (response.StatusCode == HttpStatusCode.Created)
                                {
                                    sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                    break;
                                }

                                if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout || response.StatusCode == HttpStatusCode.ServiceUnavailable)
                                {
                                    Thread.Sleep(10000);
                                    response = client.Execute(oRequest);
                                }
                                else if (response.StatusCode.ToString() == "429")
                                {
                                    Thread.Sleep(20000);
                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                    oRequest = new RestRequest(Method.POST);
                                    oRequest.AddHeader("Content-Length", "52");
                                    oRequest.AddHeader("Cache-Control", "no-cache");
                                    oRequest.AddHeader("Accept", "application/json");
                                    oRequest.AddHeader("Content-Type", "application/json");
                                    oRequest.AddHeader("x-Api-Key", sKey);
                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                    sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oDanfe.Pedido, @"[^\d]")) + "\"\n  ]\n}";
                                    oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                    response = client.Execute(oRequest);
                                    Thread.Sleep(3000);
                                }
                                else
                                    break;
                            }

                            bool lJaGerada = false;
                            if (response.Content.Contains("ja agrupada") || response.StatusCode == HttpStatusCode.OK)
                            {
                                B2WResult oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                sPLP = oPedido.message.Split(' ')[response.Content.Split(' ').Length - 1];
                                //sPLP = oPedido.plp[0].id.ToString(); 


                                lJaGerada = true;
                            }


                            Thread.Sleep(1000);


                            if (response.StatusCode == HttpStatusCode.Created || lJaGerada)
                            {
                                //sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                response = null;
                                while (response == null)
                                {
                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                    oRequest = new RestRequest(Method.GET);
                                    oRequest.AddHeader("cache-control", "no-cache");
                                    oRequest.AddHeader("Accept", "application/json");
                                    oRequest.AddHeader("Content-Type", "application/json");
                                    oRequest.AddHeader("x-Api-Key", sKey);
                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                    response = client.Execute(oRequest);

                                    if (response.Content.Contains("no Route matched"))
                                    {
                                        Thread.Sleep(3000);
                                        response = null;
                                    }
                                }

                                for (int j = 0; j < 12; j++)
                                {
                                    if (response.StatusCode == HttpStatusCode.OK)
                                        break;

                                    if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                    {
                                        Thread.Sleep(10000);
                                        break;
                                    }

                                    else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                    {
                                        Thread.Sleep(20000);
                                        client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                        oRequest = new RestRequest(Method.GET);
                                        oRequest.AddHeader("cache-control", "no-cache");
                                        oRequest.AddHeader("Accept", "application/json");
                                        oRequest.AddHeader("Content-Type", "application/json");
                                        oRequest.AddHeader("x-Api-Key", sKey);
                                        oRequest.AddHeader("X-User-Email", sUsuario);
                                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                        response = client.Execute(oRequest);
                                        Thread.Sleep(3000);
                                    }
                                    else
                                        break;
                                }

                                Thread.Sleep(3000);
                                EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                if (oJsonB2W.docsExternos == null)
                                    continue;

                                if (oJsonB2W.docsExternos.Length > 0)
                                    if (oJsonB2W.plp != null)
                                    {
                                        string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, oDanfe.Pedido, "PAC");
                                        byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                        ClasseParametros.SalvaEtiquetaAnyMarket(oDanfe.ChaveAcesso, aEtiqueta, oDanfe.Pedido, 5, oDanfe.Pedido, "B2W");
                                        ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oDanfe.ChaveAcesso + "'");
                                        ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = 'OK' WHERE NOTAFISCAL = '" + oDanfe.ChaveAcesso + "'");

                                        // salva json
                                        if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                            Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                        File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oDanfe.ChaveAcesso + ".json", response.Content); // Requires System.IO
                                    }
                            }
                            else
                            {
                                B2WResult oJsonResult = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = '" + oJsonResult.message + "' WHERE NOTAFISCAL = '" + oDanfe.ChaveAcesso + "'");
                            }
                            d.Dispose();
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine(ex.Message);

                        }
                    }

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);

                }

                File.Delete(sXMLNota);
            }

        }


        public static async Task ExecuteGetFiscalDocumentsAsync(int iCodigoCliente)
        {
            while (true)
            {
                DateTime dAgora = DateTime.Now;
                if ((dAgora.Hour < 5) || (dAgora.Hour > 22))
                {

                    Console.WriteLine("Fora do horário de funcionamento!!! GET OUT!!");
                    Thread.Sleep(3600000);
                    continue;
                }
                else
                {
                    Thread.Sleep(60000);
                }



                //Situações da nota
                //Código  Mensagem Descrição
                //1   Pendente
                //2   Emitida
                //3   Cancelada
                //4   Enviada
                //5   Rejeitada
                //6   Autorizada
                //7   Emitida DANFE
                //8   Registrada
                //9   Enviada
                //10  Denegada
                //11  Consultar situação
                //12  Bloqueada

                //if (oThreadNotaEntrada == null || !oThreadNotaEntrada.IsAlive)
                //{
                //    oThreadNotaEntrada = new Thread(new ThreadStart(EnviaNotaEntrada));
                //    oThreadNotaEntrada.Start();
                //}

                //Thread.Sleep(1000);

                //////Status 6 auttorizada
                //if (oThreadNotaSaidaAutorizadas == null || !oThreadNotaSaidaAutorizadas.IsAlive)
                //{
                //    oThreadNotaSaidaAutorizadas = new Thread(new ThreadStart(EnviaNotaSaidaAutorizada));
                //    oThreadNotaSaidaAutorizadas.Start();
                //}

                //Thread.Sleep(1000);
                //////Status 3 Canceladas
                //if (oThreadNotaSaidaCanceladas == null || !oThreadNotaSaidaCanceladas.IsAlive)
                //{
                //    oThreadNotaSaidaCanceladas = new Thread(new ThreadStart(EnviaNotaSaidaCanceladas));
                //    oThreadNotaSaidaCanceladas.Start();
                //}

                //Thread.Sleep(1000);
                //////Status 7 Emitidas
                //if (oThreadNotaSaidaEmitidas == null || !oThreadNotaSaidaEmitidas.IsAlive)
                //{
                //    oThreadNotaSaidaEmitidas = new Thread(new ThreadStart(EnviaNotaSaidaEmitida));
                //    oThreadNotaSaidaEmitidas.Start();
                //}


                int i = 1;
                #region Salva Pedidos de troca
                while (true)
                {
                    try
                    {
                        sDataAgora = DateTime.Now.ToString("dd/MM/yyyy");

                        var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/pedidos/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling +
                            "&filters=dataEmissao[" + sDataOntem + " TO " + sDataAgora + "]");
                        request.ContentType = "application/json";
                        request.Method = "GET";
                        string sNotas = "";
                        var oNotas = "";

                        string sSql = "";
                        Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                        {
                            if (response.StatusCode != HttpStatusCode.OK)
                                Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                            {
                                var content = reader.ReadToEnd();
                                if (string.IsNullOrWhiteSpace(content))
                                    Console.Out.WriteLine("Empty Response");
                                else
                                    sNotas = content;
                            }
                        }

                        PedidoJsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<PedidoJsonBling>(sNotas);

                        if (oListXML.retorno.pedidos == null)
                        {
                            break;
                        }

                        foreach (PedidoBling oPedido in oListXML.retorno.pedidos)
                        {
                            if (oPedido.pedido.tipoIntegracao == "SkyHub")
                            {
                                string sPedido = String.Join("", System.Text.RegularExpressions.Regex.Split(oPedido.pedido.numeroPedidoLoja, @"[^\d]"));
                                if (sPedido[0] == '4')
                                {
                                    string sDataPedido = oPedido.pedido.data;
                                    string sCPFCNPJ = oPedido.pedido.cliente.cnpj;
                                    sSql = "SELECT * FROM TROCASB2W WHERE PEDIDO = '" + sPedido + "'";
                                    DataTable dtbPedido = ClasseParametros.ConsultaBancoMysql(sSql);
                                    if (dtbPedido.Rows.Count == 0)
                                    {
                                        sSql = "INSERT INTO TROCASB2W VALUES('" + sPedido + "','" + sDataPedido + "','" + sCPFCNPJ + "')";
                                        ClasseParametros.ExecutabancoMySql(sSql);
                                    }
                                }
                            }
                        }
                        i++;
                    }
                    catch (Exception ex)
                    {
                        Console.Write("Erro: " + ex.Message);
                    }
                }
                #endregion

                i = 1;
                #region notas saidas autorizadas - 6
                //Status 6 auttorizada
                while (true)
                {
                    try
                    {
                        sDataAgora = DateTime.Now.ToString("dd/MM/yyyy");


                        var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/notasfiscais/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling +
                            "&filters=dataEmissao[" + sDataOntem + " 00:00:00 TO " + sDataAgora + " 23:59:59]; situacao[6];loja[todas];tipo[S]");
                        request.ContentType = "application/json";
                        request.Method = "GET";
                        string sNotas = "";
                        var oNotas = "";

                        string sSql = "";
                        Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                        {
                            if (response.StatusCode != HttpStatusCode.OK)
                                Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                            {
                                var content = reader.ReadToEnd();
                                if (string.IsNullOrWhiteSpace(content))
                                    Console.Out.WriteLine("Empty Response");
                                else
                                    sNotas = content;
                            }
                        }

                        NotaFiscaljsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<NotaFiscaljsonBling>(sNotas);

                        if (oListXML.retorno.notasfiscais == null)
                        {
                            break;
                        }

                        foreach (Notasfiscai oNotaFiscal in oListXML.retorno.notasfiscais)
                        {

                            string sCNPJ = oNotaFiscal.notafiscal.chaveAcesso.Substring(6, 14);

                            if (sCNPJ == "34036601000419")
                            {

                            }

                            if (int.Parse(oNotaFiscal.notafiscal.numero) == 306 || int.Parse(oNotaFiscal.notafiscal.numero) == 307)
                            {

                            }

                            if (oNotaFiscal.notafiscal.numeroPedidoLoja != null && oNotaFiscal.notafiscal.numeroPedidoLoja.Contains("277430705701"))
                            {

                            }

                            Console.WriteLine(" Gerando Etiqueta do Pedido " + oNotaFiscal.notafiscal.numero + " - Referente ao Pedido " + oNotaFiscal.notafiscal.tipoIntegracao + " " + oNotaFiscal.notafiscal.numeroPedidoLoja);
                            DataTable d = null;

                            //nota
                            try
                            {
                                d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                if (d.Rows.Count == 0)
                                {
                                    //https://www.bling.com.br/relatorios/nfe.xml.php&apikey="++"&chaveAcesso=32201034036601000338550020000001461303144558
                                    request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                    request.ContentType = "application/json";
                                    request.Method = "GET";

                                    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                    {
                                        if (response.StatusCode != HttpStatusCode.OK)
                                            Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                        {
                                            var content = reader.ReadToEnd();
                                            if (string.IsNullOrWhiteSpace(content))
                                                Console.Out.WriteLine("Empty Response");
                                            else
                                                sNotas = content;
                                        }
                                    }

                                    string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                                    if (!Directory.Exists(sPasta))
                                    {
                                        Directory.CreateDirectory(sPasta);
                                    }
                                    string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                    File.WriteAllText(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml", sNotas);


                                    DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                    Danfe danfe = new Danfe(oDanfe);


                                    string sUsuarioFTP = "";
                                    string sSenhaFTP = "";
                                    string sPastaFTP = "";
                                    if (sCNPJ == "34036601000419")
                                    {
                                        sUsuarioFTP = "2eletroftp@2eletro.com.br";
                                        sSenhaFTP = "#2eletro2020#";
                                        sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/";
                                    }
                                    else if (sCNPJ == "34036601000338")
                                    {
                                        sUsuarioFTP = "2eletro-varejo";
                                        sSenhaFTP = "#2eletro001#";
                                        sPastaFTP = "ftp://serrapark.dd.spiritlinux.com/04-EnvioSaida/";
                                    }

                                    #region ENDERECOS

                                    if (sCNPJ == "34036601000419")
                                    {
                                        #region ORLA
                                        //string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";


                                        //danfe.Gerar();
                                        //danfe.Salvar(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                        //danfe.Dispose();

                                        //#region cria pasta xmlbkacup
                                        //try
                                        //{
                                        //    //create the directory
                                        //    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP"));
                                        //    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        //    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    requestDir.UsePassive = true;
                                        //    requestDir.UseBinary = true;
                                        //    requestDir.KeepAlive = false;
                                        //    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        //    Stream ftpStream = response.GetResponseStream();

                                        //    ftpStream.Close();
                                        //    response.Close();
                                        //}
                                        //catch (WebException ex)
                                        //{
                                        //    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        //    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //    else
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //}
                                        //#endregion

                                        //#region cria pasta pdfbkacup
                                        //try
                                        //{
                                        //    //create the directory
                                        //    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP"));
                                        //    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        //    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    requestDir.UsePassive = true;
                                        //    requestDir.UseBinary = true;
                                        //    requestDir.KeepAlive = false;
                                        //    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        //    Stream ftpStream = response.GetResponseStream();

                                        //    ftpStream.Close();
                                        //    response.Close();
                                        //}
                                        //catch (WebException ex)
                                        //{
                                        //    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        //    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //    else
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //}
                                        //#endregion

                                        //sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP/" + sPastaDataHoje;

                                        //#region cria pasta do dia
                                        //try
                                        //{
                                        //    //create the directory
                                        //    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaFTP));
                                        //    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        //    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    requestDir.UsePassive = true;
                                        //    requestDir.UseBinary = true;
                                        //    requestDir.KeepAlive = false;
                                        //    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        //    Stream ftpStream = response.GetResponseStream();

                                        //    ftpStream.Close();
                                        //    response.Close();
                                        //}
                                        //catch (WebException ex)
                                        //{
                                        //    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        //    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //    else
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //}

                                        //#endregion

                                        //string sPastaxml = "ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP/" + sPastaDataHoje;
                                        //#region cria pasta do dia xml
                                        //try
                                        //{
                                        //    //create the directory
                                        //    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaxml));
                                        //    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        //    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    requestDir.UsePassive = true;
                                        //    requestDir.UseBinary = true;
                                        //    requestDir.KeepAlive = false;
                                        //    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        //    Stream ftpStream = response.GetResponseStream();

                                        //    ftpStream.Close();
                                        //    response.Close();
                                        //}
                                        //catch (WebException ex)
                                        //{
                                        //    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        //    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //    else
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //}

                                        //#endregion

                                        //#region Envia pdf
                                        //using (var client = new WebClient())
                                        //{
                                        //    client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".pdf", WebRequestMethods.Ftp.UploadFile, sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                        //}

                                        //#endregion

                                        //#region Envia pdf
                                        //using (var client = new WebClient())
                                        //{
                                        //    client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    client.UploadFile(sPastaxml + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                        //}
                                        //#endregion


                                        //string sChaveNota = oDanfe.ChaveAcesso;
                                        //string sNota = oDanfe.NfNumero.ToString();
                                        //string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                                        ////string sCNPJ = oDanfe.Emitente.CnpjCpf;

                                        //DateTime dEmissao = DateTime.Parse(sDataEmissao);

                                        //byte[] oPDFStream = File.ReadAllBytes(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                        //sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF)";
                                        //ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                        //ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                                        //ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                                        //ParametrosSQL.Add("FINALIZADO", "0");
                                        //ParametrosSQL.Add("CNPJ", sCNPJ);
                                        //ParametrosSQL.Add("XML", sNotas);
                                        //ParametrosSQL.Add("PDF", oPDFStream);
                                        //ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                                        //foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                                        //{
                                        //    string sEAN = oProduto.EAN;
                                        //    sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ) VALUES(@NOTA,@PRODUTO,@CNPJ)";
                                        //    ParametrosSQL.Clear();
                                        //    ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                        //    ParametrosSQL.Add("PRODUTO", sEAN);
                                        //    ParametrosSQL.Add("CNPJ", sCNPJ);
                                        //    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                                        //}

                                        //oDanfe = null;
                                        //GC.Collect();
                                        //GC.WaitForPendingFinalizers();
                                        #endregion
                                    }
                                    else if (sCNPJ == "34036601000338" && oDanfe.NfSerie != 3)
                                    {
                                        sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                        using (var client = new WebClient())
                                        {
                                            bool lEnviado = false;
                                            while (!lEnviado)
                                            {
                                                try
                                                {
                                                    client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                                    client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                                    lEnviado = true;
                                                }
                                                catch (Exception ex)
                                                {
                                                    Console.WriteLine("Erro:" + ex.Message);
                                                }
                                            }
                                        }


                                    }

                                    #endregion

                                    sSql = "INSERT INTO VENDAS(NOTAFISCAL,XMLENVIADO,ETQENVIADO) VALUES(@NOTAFISCAL,@XMLENVIADO,@ETQENVIADO)";

                                    ParametrosSQL.Add("NOTAFISCAL", oNotaFiscal.notafiscal.chaveAcesso);
                                    ParametrosSQL.Add("XMLENVIADO", "1");
                                    ParametrosSQL.Add("ETQENVIADO", "0");

                                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                    //

                                }

                                sSql = @"SELECT NM.NOTA, ND.PRODUTO FROM NOTAMASTER NM
                                              LEFT OUTER JOIN NOTADETALHE ND
                                                ON NM.NOTA = ND.NOTA AND NM.CNPJ = ND.CNPJ WHERE CHAVENOTA = '" + oNotaFiscal.notafiscal.chaveAcesso + "'";

                                d = ClasseParametros.ConsultaBancoMysql(sSql);

                                if (d.Rows.Count == 0)
                                {

                                    #region SALVA NOTAMASTER E NOTADETALHE

                                    try
                                    {
                                        //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                        request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                        request.ContentType = "application/json";
                                        request.Method = "GET";

                                        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                        {
                                            if (response.StatusCode != HttpStatusCode.OK)
                                                Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                            {
                                                var content = reader.ReadToEnd();
                                                if (string.IsNullOrWhiteSpace(content))
                                                    Console.Out.WriteLine("Empty Response");
                                                else
                                                    sNotas = content;
                                            }
                                        }

                                        string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                                        string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                        DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                        Danfe danfe = new Danfe(oDanfe);

                                        string sChaveNota = oDanfe.ChaveAcesso;
                                        string sNota = oDanfe.NfNumero.ToString();
                                        string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                                        string sCNPJNota = oDanfe.Emitente.CnpjCpf;
                                        string sNomeCliente = oDanfe.Destinatario.NomeFantasia;

                                        if (sNomeCliente == string.Empty || sNomeCliente == null)
                                            sNomeCliente = oDanfe.Destinatario.RazaoSocial;

                                        string sSerie = oDanfe.NfSerie.ToString();

                                        if (sCNPJNota == "34036601000419")
                                        {

                                        }

                                        if (sNota == "3038")
                                        {

                                        }

                                        danfe.Gerar();
                                        danfe.Salvar(sPasta + "\\" + sChaveNota + ".pdf");

                                        DateTime dEmissao = DateTime.Parse(sDataEmissao);

                                        byte[] oPDFStream = File.ReadAllBytes(sPasta + "\\" + sChaveNota + ".pdf");

                                        if (d.Rows.Count == 0)
                                        {
                                            sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF,NOMECLIENTE,NOTASERIE) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF,@NOMECLIENTE,@NOTASERIE)";
                                            ParametrosSQL.Clear();
                                            ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                            ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                                            ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                                            ParametrosSQL.Add("FINALIZADO", "0");
                                            ParametrosSQL.Add("CNPJ", sCNPJNota);
                                            ParametrosSQL.Add("XML", sNotas);
                                            ParametrosSQL.Add("PDF", oPDFStream);
                                            ParametrosSQL.Add("NOMECLIENTE", sNomeCliente);
                                            ParametrosSQL.Add("NOTASERIE", sSerie);
                                            ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                            foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                                            {
                                                string sEAN = oProduto.EAN;
                                                string sCodigoSku = oProduto.Codigo;
                                                string sDescricao = oProduto.Descricao;
                                                string sQuantidade = oProduto.Quantidade.ToString();
                                                sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ,DESCRICAO,QUANTIDADE,SKU) VALUES(@NOTA,@PRODUTO,@CNPJ,@DESCRICAO,@QUANTIDADE,@SKU)";
                                                ParametrosSQL.Clear();
                                                ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                                ParametrosSQL.Add("PRODUTO", sEAN);
                                                ParametrosSQL.Add("CNPJ", sCNPJNota);
                                                ParametrosSQL.Add("DESCRICAO", sDescricao);
                                                ParametrosSQL.Add("QUANTIDADE", sQuantidade);
                                                ParametrosSQL.Add("SKU", sCodigoSku);

                                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                            }
                                            oDanfe = null;
                                            GC.Collect();
                                            GC.WaitForPendingFinalizers();

                                            //string sPastaXMLBACKUP = sPastaXML + "XMLBACKUP\\";

                                            //if (!Directory.Exists(sPastaXMLBACKUP))
                                            //{
                                            //    Directory.CreateDirectory(sPastaXMLBACKUP);
                                            //}

                                            //if (!Directory.Exists(sPastaXMLBACKUP + sPastaDataHoje))
                                            //{
                                            //    Directory.CreateDirectory(sPastaXMLBACKUP + sPastaDataHoje);
                                            //}

                                            //File.Copy(sArquivo, sPastaXMLBACKUP + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                                        }
                                        //File.Delete(sArquivo);
                                    }

                                    catch (Exception ex)
                                    {
                                        //ClasseParametros.MostraErro(ex.Message, iconApp);
                                    }


                                    #endregion

                                }


                                sSql = @"SELECT NM.NOTA, ND.PRODUTO FROM NOTAMASTER NM
                                              LEFT OUTER JOIN NOTADETALHE ND
                                                ON NM.NOTA = ND.NOTA AND NM.CNPJ = ND.CNPJ WHERE CHAVENOTA = '" + oNotaFiscal.notafiscal.chaveAcesso + "'";

                                d = ClasseParametros.ConsultaBancoMysql(sSql);
                                if (d.Rows[0]["PRODUTO"].ToString() == "")
                                {
                                    #region SALVA NOTADETALHE

                                    try
                                    {
                                        //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                        request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                        request.ContentType = "application/json";
                                        request.Method = "GET";

                                        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                        {
                                            if (response.StatusCode != HttpStatusCode.OK)
                                                Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                            {
                                                var content = reader.ReadToEnd();
                                                if (string.IsNullOrWhiteSpace(content))
                                                    Console.Out.WriteLine("Empty Response");
                                                else
                                                    sNotas = content;
                                            }
                                        }

                                        string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                                        string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                        DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                        Danfe danfe = new Danfe(oDanfe);

                                        danfe.Gerar();

                                        string sChaveNota = oDanfe.ChaveAcesso;
                                        string sNota = oDanfe.NfNumero.ToString();
                                        string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                                        string sCNPJNota = oDanfe.Emitente.CnpjCpf;
                                        string sNomeCliente = oDanfe.Destinatario.NomeFantasia;
                                        string sSerie = oDanfe.NfSerie.ToString();

                                        foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                                        {
                                            string sEAN = oProduto.EAN;
                                            string sCodigoSku = oProduto.Codigo;
                                            string sDescricao = oProduto.Descricao;
                                            string sQuantidade = oProduto.Quantidade.ToString();
                                            sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ,DESCRICAO,QUANTIDADE,SKU) VALUES(@NOTA,@PRODUTO,@CNPJ,@DESCRICAO,@QUANTIDADE,@SKU)";
                                            ParametrosSQL.Clear();
                                            ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                            ParametrosSQL.Add("PRODUTO", sEAN);
                                            ParametrosSQL.Add("CNPJ", sCNPJNota);
                                            ParametrosSQL.Add("DESCRICAO", sDescricao);
                                            ParametrosSQL.Add("QUANTIDADE", sQuantidade);
                                            ParametrosSQL.Add("SKU", sCodigoSku);

                                            ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                        }
                                        oDanfe = null;
                                        GC.Collect();
                                        GC.WaitForPendingFinalizers();

                                    }

                                    catch (Exception ex)
                                    {
                                        //ClasseParametros.MostraErro(ex.Message, iconApp);
                                    }


                                    #endregion

                                }



                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);
                            }

                            //etq
                            try
                            {
                                d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT IS NULL");

                                if (d.Rows.Count > 0)
                                {
                                    if (oNotaFiscal.notafiscal.tipoIntegracao == "MercadoLivre")
                                    {
                                        DataTable dtbNota = ClasseParametros.ConsultaBancoMysql("SELECT * FROM NOTAMASTER WHERE CHAVENOTA = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                        sNotas = Encoding.ASCII.GetString((byte[])dtbNota.Rows[0]["XML"]);

                                        DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                        Danfe danfe = new Danfe(oDanfe);

                                        //if (oDanfe.Emitente.CnpjCpf == "34036601000419")
                                        //{
                                        //    iCodigoCliente = 6;
                                        //}
                                        //else if (oDanfe.Emitente.CnpjCpf == "34036601000338")
                                        //{
                                        //    iCodigoCliente = 5;
                                        //}

                                        ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                        IRestResponse oResposta = null;

                                        //ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                        List<Parameter> ps = new List<Parameter>();
                                        Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                        ps.Add(p);

                                        MercadoLivreEntrega oEntrega = null;

                                        while (oResposta == null)
                                        {
                                            oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                            Result oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);

                                            if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                                            }

                                            if (oResposta.StatusCode == HttpStatusCode.NotFound)
                                            {
                                                oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                                oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);
                                            }

                                            oResposta = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);

                                            oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);
                                            if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                                oResposta = null;
                                            }
                                            else if (oResposta.StatusCode == 0)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                                oResposta = null;
                                            }
                                        }

                                        ps = new List<Parameter>();
                                        p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                        ps.Add(p);
                                        p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                                        ps.Add(p);
                                        p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                                        ps.Add(p);

                                        oResposta = null;
                                        while (oResposta == null)
                                        {
                                            oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                                            if (oResposta.Content.Contains("delivered") || oResposta.Content.Contains("shipped"))
                                            {
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                            }
                                            else if (oResposta.Content.Contains("status is cancelled"))
                                            {
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = 'Pedido Cancelado' WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");

                                                break;
                                            }
                                            else if (oResposta.Content.Contains("status is ready_to_ship"))
                                            {
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = 'Etq não encontrada' WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");

                                                break;
                                            }
                                            else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                            {
                                                break;

                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                                ps = new List<Parameter>();
                                                p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                                ps.Add(p);
                                                p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                                                ps.Add(p);
                                                p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                                                ps.Add(p);

                                                oResposta = null;

                                            }
                                        }

                                        /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                                        if (oResposta.StatusCode == HttpStatusCode.OK)
                                        {
                                            ClasseParametros.SalvaEtiqueta(oNotaFiscal.notafiscal.chaveAcesso, oResposta.RawBytes, 5, oNotaFiscal.notafiscal.numeroPedidoLoja, "MELI");
                                            sSql = "SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT IS NULL";
                                            DataTable dtbVendas = ClasseParametros.ConsultaBancoMysql(sSql);
                                            if (dtbVendas.Rows.Count == 0)
                                            {
                                                //ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1, MOTIVO='OK' WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                //ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                            }
                                            dtbVendas.Dispose();
                                        }
                                        else
                                        {
                                            ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                        }
                                    }
                                    else if (oNotaFiscal.notafiscal.tipoIntegracao == "Amazon")
                                    {
                                        DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);

                                        //Danfe danfe = new Danfe(oDanfe);

                                        GeraEtiquetaJADLOGBling(iCodigoCliente, oDanfe);
                                    }
                                    else if (oNotaFiscal.notafiscal.tipoIntegracao == "SkyHub")
                                    {
                                        Console.WriteLine("Gera etiqueta do pedido " + oNotaFiscal.notafiscal.numeroPedidoLoja);

                                        try
                                        {
                                            IRestResponse response = null;


                                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                                            string sKey = d.Rows[0]["KEYB2W"].ToString();
                                            string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                            string sAccount = "0MDxaksT8d";
                                            d.Dispose();

                                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'  AND ETQENVIADO = 0");

                                            if (d.Rows.Count == 0)
                                            {
                                                continue;
                                            }


                                            RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                            RestRequest oRequest = new RestRequest(Method.POST);
                                            oRequest.AddHeader("Content-Length", "52");
                                            oRequest.AddHeader("Cache-Control", "no-cache");
                                            oRequest.AddHeader("Accept", "application/json");
                                            oRequest.AddHeader("Content-Type", "application/json");
                                            oRequest.AddHeader("x-Api-Key", sKey);
                                            oRequest.AddHeader("X-User-Email", sUsuario);
                                            oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                            string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                            oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                            response = client.Execute(oRequest);
                                            string sPLP = "";

                                            if (response.Content.Contains("nao tem nota fiscal"))
                                            {
                                                continue;
                                            }

                                            if (response.Content.Contains("nao localizados"))
                                            {
                                                continue;
                                            }

                                            Thread.Sleep(1000);
                                            for (int j = 0; j < 12; j++)
                                            {
                                                if (response.StatusCode == HttpStatusCode.Created)
                                                {
                                                    sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                                    break;
                                                }

                                                if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout || response.StatusCode == HttpStatusCode.ServiceUnavailable)
                                                {
                                                    Thread.Sleep(10000);
                                                    response = client.Execute(oRequest);
                                                }
                                                else if (response.StatusCode.ToString() == "429")
                                                {
                                                    Thread.Sleep(20000);
                                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                                    oRequest = new RestRequest(Method.POST);
                                                    oRequest.AddHeader("Content-Length", "52");
                                                    oRequest.AddHeader("Cache-Control", "no-cache");
                                                    oRequest.AddHeader("Accept", "application/json");
                                                    oRequest.AddHeader("Content-Type", "application/json");
                                                    oRequest.AddHeader("x-Api-Key", sKey);
                                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                    sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                                    oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                                    response = client.Execute(oRequest);
                                                    Thread.Sleep(3000);
                                                }
                                                else
                                                    break;
                                            }

                                            bool lJaGerada = false;
                                            if (response.Content.Contains("ja agrupada") || response.StatusCode == HttpStatusCode.OK)
                                            {
                                                B2WResult oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                                sPLP = oPedido.message.Split(' ')[response.Content.Split(' ').Length - 1];
                                                //sPLP = oPedido.plp[0].id.ToString(); 


                                                lJaGerada = true;
                                            }


                                            Thread.Sleep(1000);


                                            if (response.StatusCode == HttpStatusCode.Created || lJaGerada)
                                            {
                                                //sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                                response = null;
                                                while (response == null)
                                                {
                                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                    oRequest = new RestRequest(Method.GET);
                                                    oRequest.AddHeader("cache-control", "no-cache");
                                                    oRequest.AddHeader("Accept", "application/json");
                                                    oRequest.AddHeader("Content-Type", "application/json");
                                                    oRequest.AddHeader("x-Api-Key", sKey);
                                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                    response = client.Execute(oRequest);

                                                    if (response.Content.Contains("no Route matched"))
                                                    {
                                                        Thread.Sleep(3000);
                                                        response = null;
                                                    }
                                                }

                                                for (int j = 0; j < 12; j++)
                                                {
                                                    if (response.StatusCode == HttpStatusCode.OK)
                                                        break;

                                                    if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                                    {
                                                        Thread.Sleep(10000);
                                                        break;
                                                    }

                                                    else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                                    {
                                                        Thread.Sleep(20000);
                                                        client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                        oRequest = new RestRequest(Method.GET);
                                                        oRequest.AddHeader("cache-control", "no-cache");
                                                        oRequest.AddHeader("Accept", "application/json");
                                                        oRequest.AddHeader("Content-Type", "application/json");
                                                        oRequest.AddHeader("x-Api-Key", sKey);
                                                        oRequest.AddHeader("X-User-Email", sUsuario);
                                                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                        response = client.Execute(oRequest);
                                                        Thread.Sleep(3000);
                                                    }
                                                    else
                                                        break;
                                                }

                                                Thread.Sleep(3000);
                                                EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                                if (oJsonB2W.docsExternos == null)
                                                    continue;

                                                if (oJsonB2W.docsExternos.Length > 0)
                                                    if (oJsonB2W.plp != null)
                                                    {
                                                        string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], oJsonB2W.docsExternos[0].tpServico);
                                                        byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                                        ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], 5, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[1]);
                                                        ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                        ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = 'OK' WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                                        // salva json
                                                        if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                                            Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                                        File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                                    }
                                            }
                                            else
                                            {
                                                B2WResult oJsonResult = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = '" + oJsonResult.message + "' WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                            }
                                            d.Dispose();
                                        }
                                        catch (Exception ex)
                                        {
                                            Console.WriteLine(ex.Message);

                                        }
                                    }
                                    else if (oNotaFiscal.notafiscal.tipoIntegracao == "IntegraCommerce")
                                    {
                                        try
                                        {
                                            ClasseFuncoes.RetornaCodigoMAGALU(iCodigoCliente);

                                            //Os possíveis status são: New, Approved, Processing, Invoiced, Shipped, Delivered, Canceled, ShipmentException.
                                            RestClient client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order/" + oNotaFiscal.notafiscal.numeroPedidoLoja);
                                            RestRequest oRequestMAGALU = new RestRequest(Method.GET);
                                            oRequestMAGALU.AddHeader("cache-control", "no-cache");
                                            oRequestMAGALU.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                                            IRestResponse oResposta = client.Execute(oRequestMAGALU);

                                            Thread.Sleep(3000);
                                            InterRegraNegocio.Order oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<InterRegraNegocio.Order>(oResposta.Content);

                                            if (oPedido == null)
                                            {
                                                continue;
                                            }
                                            DataTable dtbChaves = ClasseParametros.ConsultaBancoMysql("SELECT USUARIOMAGALU,SENHAMAGALU FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());


                                            Console.WriteLine("Gerando etiqueta do pedido " + oPedido.IdOrder);

                                            if (oPedido.IdOrder == "LU-8504500673851491")
                                            {

                                            }


                                            try
                                            {
                                                // Gera tracking
                                                oPedido.CodigoCliente = 5;
                                                try
                                                {
                                                    ClasseParametros.SalvaBancoPDFZPLMagalu(oPedido, dtbChaves.Rows[0]["USUARIOMAGALU"].ToString(), dtbChaves.Rows[0]["SENHAMAGALU"].ToString());
                                                    ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                    ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = 'OK' WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                }
                                                catch (Exception ex)
                                                {

                                                    Console.WriteLine("Erro no pedido: " + ex.Message);

                                                    if (ex.Message.Contains("não está faturado"))
                                                    {
                                                        ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET MOTIVO = 'Sem nota na market+place' WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                    }
                                                }

                                            }
                                            catch (Exception ex)
                                            {
                                                Console.WriteLine(ex.Message);

                                                //ClasseParametros.MostraErro(ex.Message, ClasseParametros.iconApp);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            Console.WriteLine(ex.Message);

                                        }
                                    }
                                }

                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);

                            }

                            //if (d.Rows.Count > 0)
                            //{
                            //    sSql = "UPDATE VENDAS SET ETIQUETATXTTXT = @ETIQUETATXTTXT, ETIQUETATXT=@ETQ,LOJA=@LOJA,CODIGOCLIENTE=@CODIGOCLIENTE WHERE NOTAFISCAL = @NOTA";
                            //}
                            //else
                            //{
                            //    sSql = "INSERT INTO VENDAS(NOTAFISCAL,ETIQUETATXT,ETIQUETATXTTXT,LOJA,DATACRIADO,LOTE,CODIGOCLIENTE) VALUES(@NOTA,@ETQ,@ETIQUETATXTTXT,@LOJA,@DATACRIADO,@LOTE,@CODIGOCLIENTE)";
                            //    ParametrosSQL.Add("@DATACRIADO", DateTime.Now);
                            //    ParametrosSQL.Add("@LOTE", ClasseParametros.PegaLote("MELI", "5".ToString()));
                            //}
                            //d.Dispose();

                            //File.WriteAllBytes(Directory.GetCurrentDirectory() + "\\XMLETQ\\" + oNotaFiscal.notafiscal.chaveAcesso + ".TXT", aEtiqueta); // Requires System.IO

                            //ParametrosSQL.Add("@ETQ", aEtiqueta);
                            //ParametrosSQL.Add("@ETIQUETATXTTXT", sEtiqueta);
                            //ParametrosSQL.Add("@NOTA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0]);
                            //ParametrosSQL.Add("@LOJA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1]);
                            //ParametrosSQL.Add("@CODIGOCLIENTE", iCliente);
                            //ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        //if(ex.Message == )
                    }

                    i++;
                }
                #endregion
                i = 1;

                #region Notas saidas canceladas = 3
                i = 1;
                //Status 3 Cancelada
                while (true)
                {
                    try
                    {
                        var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/notasfiscais/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling +
                            "&filters=dataEmissao[" + sDataOntem + " 00:00:00 TO " + sDataAgora + " 23:59:59]; situacao[3];loja[todas]");
                        request.ContentType = "application/json";
                        request.Method = "GET";
                        string sNotas = "";
                        var oNotas = "";

                        string sSql = "";
                        Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                        {
                            if (response.StatusCode != HttpStatusCode.OK)
                                Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                            {
                                var content = reader.ReadToEnd();
                                if (string.IsNullOrWhiteSpace(content))
                                    Console.Out.WriteLine("Empty Response");
                                else
                                    sNotas = content;
                            }
                        }

                        NotaFiscaljsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<NotaFiscaljsonBling>(sNotas);

                        if (oListXML.retorno.notasfiscais == null)
                        {
                            break;
                        }

                        foreach (Notasfiscai oNotaFiscal in oListXML.retorno.notasfiscais)
                        {

                            string sCNPJ = oNotaFiscal.notafiscal.chaveAcesso.Substring(6, 14);

                            if (int.Parse(oNotaFiscal.notafiscal.numero) == 3633)
                            {

                            }

                            if (oNotaFiscal.notafiscal.numeroPedidoLoja != null && oNotaFiscal.notafiscal.numeroPedidoLoja.Contains("277430705701"))
                            {

                            }

                            Console.WriteLine(" Gerando Etiqueta do Pedido " + oNotaFiscal.notafiscal.numero + " - Referente ao Pedido " + oNotaFiscal.notafiscal.tipoIntegracao + " " + oNotaFiscal.notafiscal.numeroPedidoLoja);
                            DataTable d = null;

                            //nota
                            try
                            {
                                d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND CANCELADO = 0");

                                if (d.Rows.Count == 1)
                                {
                                    //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                    request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                    request.ContentType = "application/json";
                                    request.Method = "GET";

                                    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                    {
                                        if (response.StatusCode != HttpStatusCode.OK)
                                            Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                        {
                                            var content = reader.ReadToEnd();
                                            if (string.IsNullOrWhiteSpace(content))
                                                Console.Out.WriteLine("Empty Response");
                                            else
                                                sNotas = content;
                                        }
                                    }

                                    string sPasta = Directory.GetCurrentDirectory() + "\\temp";

                                    string sUsuarioFTP = "2eletro-varejo";
                                    string sSenhaFTP = "#2eletro001#";
                                    string sPastaFTP = "ftp://serrapark.dd.spiritlinux.com/09-EnvioCancelamentoSaida/";

                                    #region ENDERECOS

                                    File.WriteAllText(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml", sNotas);

                                    string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                    using (var client = new WebClient())
                                    {
                                        bool lEnviado = false;
                                        while (!lEnviado)
                                        {
                                            try
                                            {
                                                client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                                client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                                lEnviado = true;
                                            }
                                            catch (Exception ex)
                                            {
                                                Console.WriteLine("Erro:" + ex.Message);
                                            }
                                        }
                                    }


                                    #endregion

                                    sSql = "UPDATE VENDAS SET CANCELADO = 1 WHERE NOTAFISCAL = @NOTAFISCAL";

                                    ParametrosSQL.Add("NOTAFISCAL", oNotaFiscal.notafiscal.chaveAcesso);

                                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                }
                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);

                            }
                            //etq
                            try
                            {



                                d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT IS NULL");

                                if (d.Rows.Count > 0)
                                {
                                    if (oNotaFiscal.notafiscal.tipoIntegracao == "MercadoLivre")
                                    {

                                        ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                        IRestResponse oResposta = null;

                                        //ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                        List<Parameter> ps = new List<Parameter>();
                                        Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                        ps.Add(p);

                                        MercadoLivreEntrega oEntrega = null;

                                        while (oResposta == null)
                                        {


                                            oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                            Result oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);

                                            if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                                            }

                                            if (oResposta.StatusCode == HttpStatusCode.NotFound)
                                            {
                                                oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                                oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);
                                            }

                                            oResposta = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);


                                            oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);
                                            if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                                oResposta = null;
                                            }
                                            else if (oResposta.StatusCode == 0)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);


                                                oResposta = null;
                                            }
                                        }

                                        ps = new List<Parameter>();
                                        p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                        ps.Add(p);
                                        p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                                        ps.Add(p);
                                        p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                                        ps.Add(p);

                                        oResposta = null;
                                        while (oResposta == null)
                                        {
                                            oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                                            if (oResposta.Content.Contains("delivered") || oResposta.Content.Contains("shipped"))
                                            {
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                            }
                                            else if (oResposta.Content.Contains("cancelled"))
                                            {
                                                //ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                            }
                                            else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                                oResposta = null;

                                            }
                                        }

                                        /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                                        if (oResposta.StatusCode == HttpStatusCode.OK)
                                        {
                                            ClasseParametros.SalvaEtiqueta(oNotaFiscal.notafiscal.chaveAcesso, oResposta.RawBytes, 5, oNotaFiscal.notafiscal.numeroPedidoLoja, "MELI");
                                            sSql = "SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT = ''";
                                            DataTable dtbVendas = ClasseParametros.ConsultaBancoMysql(sSql);
                                            if (dtbVendas.Rows.Count == 0)
                                            {
                                                ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                            }
                                            dtbVendas.Dispose();
                                            //break;
                                        }

                                    }
                                    else if (oNotaFiscal.notafiscal.tipoIntegracao == "Amazon")
                                    {
                                        DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);

                                        //Danfe danfe = new Danfe(oDanfe);

                                        GeraEtiquetaJADLOGBling(iCodigoCliente, oDanfe);
                                    }
                                    else if (oNotaFiscal.notafiscal.tipoIntegracao == "SkyHub")
                                    {
                                        Console.WriteLine("Gera etiqueta do pedido " + oNotaFiscal.notafiscal.numeroPedidoLoja);

                                        try
                                        {
                                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                                            string sKey = d.Rows[0]["KEYB2W"].ToString();
                                            string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                            string sAccount = "0MDxaksT8d";
                                            d.Dispose();

                                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'  AND ETQENVIADO = 0");

                                            if (d.Rows.Count == 0)
                                            {
                                                continue;
                                            }


                                            RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                            RestRequest oRequest = new RestRequest(Method.POST);
                                            oRequest.AddHeader("Content-Length", "52");
                                            oRequest.AddHeader("Cache-Control", "no-cache");
                                            oRequest.AddHeader("Accept", "application/json");
                                            oRequest.AddHeader("Content-Type", "application/json");
                                            oRequest.AddHeader("x-Api-Key", sKey);
                                            oRequest.AddHeader("X-User-Email", sUsuario);
                                            oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                            string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                            oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                            IRestResponse response = client.Execute(oRequest);
                                            string sPLP = "";

                                            if (response.Content.Contains("nao tem nota fiscal"))
                                            {
                                                continue;
                                            }

                                            if (response.Content.Contains("nao localizados"))
                                            {
                                                continue;
                                            }

                                            Thread.Sleep(1000);
                                            for (int j = 0; j < 12; j++)
                                            {
                                                if (response.StatusCode == HttpStatusCode.Created)
                                                {
                                                    sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                                    break;
                                                }

                                                if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout || response.StatusCode == HttpStatusCode.ServiceUnavailable)
                                                {
                                                    Thread.Sleep(10000);
                                                    response = client.Execute(oRequest);
                                                }
                                                else if (response.StatusCode.ToString() == "429")
                                                {
                                                    Thread.Sleep(20000);
                                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                                    oRequest = new RestRequest(Method.POST);
                                                    oRequest.AddHeader("Content-Length", "52");
                                                    oRequest.AddHeader("Cache-Control", "no-cache");
                                                    oRequest.AddHeader("Accept", "application/json");
                                                    oRequest.AddHeader("Content-Type", "application/json");
                                                    oRequest.AddHeader("x-Api-Key", sKey);
                                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                    sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                                    oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                                    response = client.Execute(oRequest);
                                                    Thread.Sleep(3000);
                                                }
                                                else
                                                    break;
                                            }

                                            bool lJaGerada = false;
                                            if (response.Content.Contains("ja agrupada"))
                                            {
                                                B2WResult oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                                sPLP = oPedido.message.Split(' ')[response.Content.Split(' ').Length - 1];
                                                lJaGerada = true;
                                            }


                                            Thread.Sleep(1000);


                                            if (response.StatusCode == HttpStatusCode.Created || lJaGerada)
                                            {
                                                //sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                                response = null;
                                                while (response == null)
                                                {
                                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                    oRequest = new RestRequest(Method.GET);
                                                    oRequest.AddHeader("cache-control", "no-cache");
                                                    oRequest.AddHeader("Accept", "application/json");
                                                    oRequest.AddHeader("Content-Type", "application/json");
                                                    oRequest.AddHeader("x-Api-Key", sKey);
                                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                    response = client.Execute(oRequest);

                                                    if (response.Content.Contains("no Route matched"))
                                                    {
                                                        Thread.Sleep(3000);
                                                        response = null;
                                                    }
                                                }

                                                for (int j = 0; j < 12; j++)
                                                {
                                                    if (response.StatusCode == HttpStatusCode.OK)
                                                        break;

                                                    if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                                    {
                                                        Thread.Sleep(10000);
                                                        break;
                                                    }

                                                    else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                                    {
                                                        Thread.Sleep(20000);
                                                        client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                        oRequest = new RestRequest(Method.GET);
                                                        oRequest.AddHeader("cache-control", "no-cache");
                                                        oRequest.AddHeader("Accept", "application/json");
                                                        oRequest.AddHeader("Content-Type", "application/json");
                                                        oRequest.AddHeader("x-Api-Key", sKey);
                                                        oRequest.AddHeader("X-User-Email", sUsuario);
                                                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                        response = client.Execute(oRequest);
                                                        Thread.Sleep(3000);
                                                    }
                                                    else
                                                        break;
                                                }

                                                Thread.Sleep(3000);
                                                EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                                if (oJsonB2W.docsExternos == null)
                                                    continue;

                                                if (oJsonB2W.docsExternos.Length > 0)
                                                    if (oJsonB2W.plp != null)
                                                    {
                                                        string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], "PAC");
                                                        byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                                        ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], 5, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[1]);
                                                        ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                                        // salva json
                                                        if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                                            Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                                        File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                                    }

                                            }
                                            d.Dispose();
                                        }
                                        catch (Exception ex)
                                        {
                                            Console.WriteLine(ex.Message);

                                        }

                                        //try
                                        //{
                                        //    d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = "+ iCodigoCliente.ToString());
                                        //    string sKey = d.Rows[0]["KEYB2W"].ToString();
                                        //    string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                        //    string sAccount = "0MDxaksT8d";
                                        //    d.Dispose();

                                        //    RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                        //    RestRequest oRequest = new RestRequest(Method.GET);
                                        //    oRequest.AddHeader("Content-Length", "52");
                                        //    oRequest.AddHeader("Cache-Control", "no-cache");
                                        //    oRequest.AddHeader("Accept", "application/json");
                                        //    oRequest.AddHeader("Content-Type", "application/json");
                                        //    oRequest.AddHeader("x-Api-Key", sKey);
                                        //    oRequest.AddHeader("X-User-Email", sUsuario);
                                        //    oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                                        //    //string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                        //    //oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                        //    IRestResponse response = client.Execute(oRequest);

                                        //    B2WPLP oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPLP>(response.Content);

                                        //    foreach (Plp oPLP in oPedido.plp)
                                        //    {

                                        //        string sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                        //        string sPedido = "";
                                        //        response = null;
                                        //        while (response == null)
                                        //        {
                                        //            client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                        //            oRequest = new RestRequest(Method.GET);
                                        //            oRequest.AddHeader("cache-control", "no-cache");
                                        //            oRequest.AddHeader("Accept", "application/json");
                                        //            oRequest.AddHeader("Content-Type", "application/json");
                                        //            oRequest.AddHeader("x-Api-Key", sKey);
                                        //            oRequest.AddHeader("X-User-Email", sUsuario);
                                        //            oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                        //            response = client.Execute(oRequest);

                                        //            if (response.Content.Contains("no Route matched"))
                                        //            {
                                        //                Thread.Sleep(3000);
                                        //                response = null;
                                        //            }
                                        //        }

                                        //        for (int j = 0; j < 12; i++)
                                        //        {
                                        //            if (response.StatusCode == HttpStatusCode.OK)
                                        //                break;

                                        //            if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                        //            {
                                        //                Thread.Sleep(10000);
                                        //                response = client.Execute(oRequest);
                                        //            }

                                        //            else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                        //            {
                                        //                Thread.Sleep(20000);
                                        //                client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                        //                oRequest = new RestRequest(Method.GET);
                                        //                oRequest.AddHeader("cache-control", "no-cache");
                                        //                oRequest.AddHeader("Accept", "application/json");
                                        //                oRequest.AddHeader("Content-Type", "application/json");
                                        //                oRequest.AddHeader("x-Api-Key", sKey);
                                        //                oRequest.AddHeader("X-User-Email", sUsuario);
                                        //                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                        //                response = client.Execute(oRequest);
                                        //                Thread.Sleep(3000);
                                        //            }
                                        //            else
                                        //                break;
                                        //        }

                                        //        Thread.Sleep(3000);
                                        //        EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                        //        if (oJsonB2W.docsExternos.Length > 0)
                                        //            if (oJsonB2W.plp != null)
                                        //            {
                                        //                string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, sPedido.Split('-')[0], "PAC");
                                        //                byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                        //                ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, sPedido.Split('-')[0], 5, sPedido.Split('-')[0], sPedido.Split('-')[1]);

                                        //                // salva json
                                        //                if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                        //                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                        //                File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                        //            }
                                        //    }
                                        //}
                                        //catch (Exception ex)
                                        //{

                                        //}

                                    }
                                    else if (oNotaFiscal.notafiscal.tipoIntegracao == "IntegraCommerce")
                                    {
                                        try
                                        {
                                            ClasseFuncoes.RetornaCodigoMAGALU(iCodigoCliente);

                                            //Os possíveis status são: New, Approved, Processing, Invoiced, Shipped, Delivered, Canceled, ShipmentException.
                                            RestClient client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order/" + oNotaFiscal.notafiscal.numeroPedidoLoja);
                                            RestRequest oRequestMAGALU = new RestRequest(Method.GET);
                                            oRequestMAGALU.AddHeader("cache-control", "no-cache");
                                            oRequestMAGALU.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                                            IRestResponse oResposta = client.Execute(oRequestMAGALU);

                                            Thread.Sleep(3000);
                                            InterRegraNegocio.Order oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<InterRegraNegocio.Order>(oResposta.Content);

                                            if (oPedido == null)
                                            {
                                                continue;
                                            }
                                            DataTable dtbChaves = ClasseParametros.ConsultaBancoMysql("SELECT USUARIOMAGALU,SENHAMAGALU FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());


                                            Console.WriteLine("Gerando etiqueta do pedido " + oPedido.IdOrder);

                                            if (oPedido.IdOrder == "LU-8504500673851491")
                                            {

                                            }


                                            try
                                            {
                                                // Gera tracking
                                                oPedido.CodigoCliente = 5;
                                                try
                                                {
                                                    ClasseParametros.SalvaBancoPDFZPLMagalu(oPedido, dtbChaves.Rows[0]["USUARIOMAGALU"].ToString(), dtbChaves.Rows[0]["SENHAMAGALU"].ToString());
                                                    ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                }
                                                catch (Exception ex)
                                                {

                                                    Console.WriteLine("Erro no pedido: " + ex.Message);
                                                }

                                            }
                                            catch (Exception ex)
                                            {
                                                ClasseParametros.MostraErro(ex.Message, ClasseParametros.iconApp);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            Console.WriteLine(ex.Message);

                                        }
                                    }
                                }

                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);

                            }






                            //if (d.Rows.Count > 0)
                            //{
                            //    sSql = "UPDATE VENDAS SET ETIQUETATXTTXT = @ETIQUETATXTTXT, ETIQUETATXT=@ETQ,LOJA=@LOJA,CODIGOCLIENTE=@CODIGOCLIENTE WHERE NOTAFISCAL = @NOTA";
                            //}
                            //else
                            //{
                            //    sSql = "INSERT INTO VENDAS(NOTAFISCAL,ETIQUETATXT,ETIQUETATXTTXT,LOJA,DATACRIADO,LOTE,CODIGOCLIENTE) VALUES(@NOTA,@ETQ,@ETIQUETATXTTXT,@LOJA,@DATACRIADO,@LOTE,@CODIGOCLIENTE)";
                            //    ParametrosSQL.Add("@DATACRIADO", DateTime.Now);
                            //    ParametrosSQL.Add("@LOTE", ClasseParametros.PegaLote("MELI", "5".ToString()));
                            //}
                            //d.Dispose();

                            //File.WriteAllBytes(Directory.GetCurrentDirectory() + "\\XMLETQ\\" + oNotaFiscal.notafiscal.chaveAcesso + ".TXT", aEtiqueta); // Requires System.IO

                            //ParametrosSQL.Add("@ETQ", aEtiqueta);
                            //ParametrosSQL.Add("@ETIQUETATXTTXT", sEtiqueta);
                            //ParametrosSQL.Add("@NOTA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0]);
                            //ParametrosSQL.Add("@LOJA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1]);
                            //ParametrosSQL.Add("@CODIGOCLIENTE", iCliente);
                            //ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);

                    }

                    i++;
                }
                #endregion
                i = 1;

                #region Notas Saidas Emitidas - 7

                //Status 7 emitida
                while (true)
                {
                    try
                    {
                        var request = HttpWebRequest.Create(@"https://bling.com.br/Api/v2/notasfiscais/page=" + i.ToString() + "/json&apikey=" + ClasseParametros.sTokenBling +
                            "&filters=dataEmissao[" + sDataOntem + " 00:00:00 TO " + sDataAgora + " 23:59:59]; situacao[7];loja[todas]");
                        request.ContentType = "application/json";
                        request.Method = "GET";
                        string sNotas = "";
                        var oNotas = "";

                        string sSql = "";
                        Dictionary<string, object> ParametrosSQL = new Dictionary<string, object>();

                        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                        {
                            if (response.StatusCode != HttpStatusCode.OK)
                                Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                            {
                                var content = reader.ReadToEnd();
                                if (string.IsNullOrWhiteSpace(content))
                                    Console.Out.WriteLine("Empty Response");
                                else
                                    sNotas = content;
                            }
                        }

                        NotaFiscaljsonBling oListXML = Newtonsoft.Json.JsonConvert.DeserializeObject<NotaFiscaljsonBling>(sNotas);

                        if (oListXML.retorno.notasfiscais == null)
                        {
                            break;
                        }

                        foreach (Notasfiscai oNotaFiscal in oListXML.retorno.notasfiscais)
                        {

                            string sCNPJ = oNotaFiscal.notafiscal.chaveAcesso.Substring(6, 14);

                            if (
                                int.Parse(oNotaFiscal.notafiscal.numero) == 17255 ||
                                int.Parse(oNotaFiscal.notafiscal.numero) == 14295 ||
                                int.Parse(oNotaFiscal.notafiscal.numero) == 14308)
                            {

                            }

                            if (oNotaFiscal.notafiscal.numeroPedidoLoja != null && oNotaFiscal.notafiscal.numeroPedidoLoja.Contains("277430705701"))
                            {

                            }

                            Console.WriteLine(" Gerando Etiqueta do Pedido " + oNotaFiscal.notafiscal.numero + " - Referente ao Pedido " + oNotaFiscal.notafiscal.tipoIntegracao + " " + oNotaFiscal.notafiscal.numeroPedidoLoja);
                            DataTable d = null;

                            //nota
                            try
                            {
                                d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                if (d.Rows.Count == 0)
                                //if (d.Rows.Count == 1)
                                {
                                    //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                    request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                    request.ContentType = "application/json";
                                    request.Method = "GET";

                                    using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                    {
                                        if (response.StatusCode != HttpStatusCode.OK)
                                            Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                        using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                        {
                                            var content = reader.ReadToEnd();
                                            if (string.IsNullOrWhiteSpace(content))
                                                Console.Out.WriteLine("Empty Response");
                                            else
                                                sNotas = content;
                                        }
                                    }

                                    string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                                    if (!Directory.Exists(sPasta))
                                    {
                                        Directory.CreateDirectory(sPasta);
                                    }
                                    string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                    File.WriteAllText(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml", sNotas);


                                    DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                    Danfe danfe = new Danfe(oDanfe);

                                    string sUsuarioFTP = "";
                                    string sSenhaFTP = "";
                                    string sPastaFTP = "";
                                    if (sCNPJ == "34036601000419")
                                    {
                                        sUsuarioFTP = "2eletroftp@2eletro.com.br";
                                        sSenhaFTP = "#2eletro2020#";
                                        sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/";
                                    }
                                    else if (sCNPJ == "34036601000338")
                                    {
                                        sUsuarioFTP = "2eletro-varejo";
                                        sSenhaFTP = "#2eletro001#";
                                        sPastaFTP = "ftp://serrapark.dd.spiritlinux.com/04-EnvioSaida/";
                                    }

                                    #region ENDERECOS

                                    if (sCNPJ == "34036601000419")
                                    {

                                        #region orla
                                        //string sPastaDataHoje = DateTime.Now.Day.ToString() + "_" + DateTime.Now.Month + "_" + DateTime.Now.Year + "\\";


                                        //danfe.Gerar();
                                        //danfe.Salvar(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                        //danfe.Dispose();

                                        //#region cria pasta xmlbkacup
                                        //try
                                        //{
                                        //    //create the directory
                                        //    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP"));
                                        //    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        //    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    requestDir.UsePassive = true;
                                        //    requestDir.UseBinary = true;
                                        //    requestDir.KeepAlive = false;
                                        //    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        //    Stream ftpStream = response.GetResponseStream();

                                        //    ftpStream.Close();
                                        //    response.Close();
                                        //}
                                        //catch (WebException ex)
                                        //{
                                        //    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        //    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //    else
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //}
                                        //#endregion

                                        //#region cria pasta pdfbkacup
                                        //try
                                        //{
                                        //    //create the directory
                                        //    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri("ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP"));
                                        //    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        //    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    requestDir.UsePassive = true;
                                        //    requestDir.UseBinary = true;
                                        //    requestDir.KeepAlive = false;
                                        //    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        //    Stream ftpStream = response.GetResponseStream();

                                        //    ftpStream.Close();
                                        //    response.Close();
                                        //}
                                        //catch (WebException ex)
                                        //{
                                        //    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        //    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //    else
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //}
                                        //#endregion

                                        //sPastaFTP = "ftp://50.116.87.79/07-EnvioSaidaNF/PDFBACKUP/" + sPastaDataHoje;

                                        //#region cria pasta do dia
                                        //try
                                        //{
                                        //    //create the directory
                                        //    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaFTP));
                                        //    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        //    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    requestDir.UsePassive = true;
                                        //    requestDir.UseBinary = true;
                                        //    requestDir.KeepAlive = false;
                                        //    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        //    Stream ftpStream = response.GetResponseStream();

                                        //    ftpStream.Close();
                                        //    response.Close();
                                        //}
                                        //catch (WebException ex)
                                        //{
                                        //    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        //    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //    else
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //}

                                        //#endregion

                                        //string sPastaxml = "ftp://50.116.87.79/07-EnvioSaidaNF/XMLBACKUP/" + sPastaDataHoje;
                                        //#region cria pasta do dia xml
                                        //try
                                        //{
                                        //    //create the directory
                                        //    FtpWebRequest requestDir = (FtpWebRequest)FtpWebRequest.Create(new Uri(sPastaxml));
                                        //    requestDir.Method = WebRequestMethods.Ftp.MakeDirectory;
                                        //    requestDir.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    requestDir.UsePassive = true;
                                        //    requestDir.UseBinary = true;
                                        //    requestDir.KeepAlive = false;
                                        //    FtpWebResponse response = (FtpWebResponse)requestDir.GetResponse();
                                        //    Stream ftpStream = response.GetResponseStream();

                                        //    ftpStream.Close();
                                        //    response.Close();
                                        //}
                                        //catch (WebException ex)
                                        //{
                                        //    FtpWebResponse response = (FtpWebResponse)ex.Response;
                                        //    if (response.StatusCode == FtpStatusCode.ActionNotTakenFileUnavailable)
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //    else
                                        //    {
                                        //        response.Close();
                                        //    }
                                        //}

                                        //#endregion

                                        //#region Envia pdf
                                        //using (var client = new WebClient())
                                        //{
                                        //    client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".pdf", WebRequestMethods.Ftp.UploadFile, sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                        //}

                                        //#endregion

                                        //#region Envia pdf
                                        //using (var client = new WebClient())
                                        //{
                                        //    client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                        //    client.UploadFile(sPastaxml + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                        //}
                                        //#endregion


                                        //string sChaveNota = oDanfe.ChaveAcesso;
                                        //string sNota = oDanfe.NfNumero.ToString();
                                        //string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                                        ////string sCNPJ = oDanfe.Emitente.CnpjCpf;

                                        //DateTime dEmissao = DateTime.Parse(sDataEmissao);

                                        //byte[] oPDFStream = File.ReadAllBytes(sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".pdf");
                                        //sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF)";
                                        //ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                        //ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                                        //ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                                        //ParametrosSQL.Add("FINALIZADO", "0");
                                        //ParametrosSQL.Add("CNPJ", sCNPJ);
                                        //ParametrosSQL.Add("XML", sNotas);
                                        //ParametrosSQL.Add("PDF", oPDFStream);
                                        //ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);


                                        //foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                                        //{
                                        //    string sEAN = oProduto.EAN;
                                        //    sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ) VALUES(@NOTA,@PRODUTO,@CNPJ)";
                                        //    ParametrosSQL.Clear();
                                        //    ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                        //    ParametrosSQL.Add("PRODUTO", sEAN);
                                        //    ParametrosSQL.Add("CNPJ", sCNPJ);
                                        //    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);
                                        //}

                                        //oDanfe = null;
                                        //GC.Collect();
                                        //GC.WaitForPendingFinalizers();
                                        #endregion

                                    }
                                    else if (sCNPJ == "34036601000338" && oDanfe.NfSerie != 3)
                                    {
                                        sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                        using (var client = new WebClient())
                                        {
                                            bool lEnviado = false;
                                            while (!lEnviado)
                                            {
                                                try
                                                {
                                                    client.Credentials = new NetworkCredential(sUsuarioFTP, sSenhaFTP);
                                                    client.UploadFile(sPastaFTP + oNotaFiscal.notafiscal.chaveAcesso + ".xml", WebRequestMethods.Ftp.UploadFile, sArquivoXML);
                                                    lEnviado = true;
                                                }
                                                catch (Exception ex)
                                                {
                                                    Console.WriteLine("Erro:" + ex.Message);
                                                }
                                            }
                                        }
                                    }

                                    #endregion

                                    sSql = "INSERT INTO VENDAS(NOTAFISCAL,XMLENVIADO,ETQENVIADO) VALUES(@NOTAFISCAL,@XMLENVIADO,@ETQENVIADO)";

                                    ParametrosSQL.Add("NOTAFISCAL", oNotaFiscal.notafiscal.chaveAcesso);
                                    ParametrosSQL.Add("XMLENVIADO", "1");
                                    ParametrosSQL.Add("ETQENVIADO", "0");

                                    ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);



                                }


                                sSql = @"SELECT NM.NOTA, ND.PRODUTO FROM NOTAMASTER NM
                                              LEFT OUTER JOIN NOTADETALHE ND
                                                ON NM.NOTA = ND.NOTA AND NM.CNPJ = ND.CNPJ WHERE CHAVENOTA = '" + oNotaFiscal.notafiscal.chaveAcesso + "'";

                                d = ClasseParametros.ConsultaBancoMysql(sSql);

                                if (d.Rows.Count == 0)
                                {

                                    #region SALVA NOTAMASTER E NOTADETALHE

                                    try
                                    {
                                        //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                        request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                        request.ContentType = "application/json";
                                        request.Method = "GET";

                                        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                        {
                                            if (response.StatusCode != HttpStatusCode.OK)
                                                Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                            {
                                                var content = reader.ReadToEnd();
                                                if (string.IsNullOrWhiteSpace(content))
                                                    Console.Out.WriteLine("Empty Response");
                                                else
                                                    sNotas = content;
                                            }
                                        }

                                        string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                                        string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                        DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                        Danfe danfe = new Danfe(oDanfe);

                                        string sChaveNota = oDanfe.ChaveAcesso;
                                        string sNota = oDanfe.NfNumero.ToString();
                                        string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                                        string sCNPJNota = oDanfe.Emitente.CnpjCpf;
                                        string sNomeCliente = oDanfe.Destinatario.NomeFantasia;
                                        string sSerie = oDanfe.NfSerie.ToString();

                                        if (sCNPJNota == "34036601000419")
                                        {

                                        }

                                        if (sNota == "3038")
                                        {

                                        }

                                        danfe.Gerar();
                                        danfe.Salvar(sPasta + "\\" + sChaveNota + ".pdf");

                                        DateTime dEmissao = DateTime.Parse(sDataEmissao);

                                        byte[] oPDFStream = File.ReadAllBytes(sPasta + "\\" + sChaveNota + ".pdf");


                                        if (d.Rows.Count == 0)
                                        {
                                            sSql = "INSERT INTO NOTAMASTER(NOTA,CHAVENOTA,DATA,FINALIZADO,CNPJ,XML,PDF,NOMECLIENTE,NOTASERIE) VALUES(@NOTA,@CHAVENOTA,@DATA,@FINALIZADO,@CNPJ,@XML,@PDF,@NOMECLIENTE,@NOTASERIE)";
                                            ParametrosSQL.Clear();
                                            ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                            ParametrosSQL.Add("CHAVENOTA", sChaveNota);
                                            ParametrosSQL.Add("DATA", dEmissao.ToString("yyyy-MM-dd HH:mm:ss"));
                                            ParametrosSQL.Add("FINALIZADO", "0");
                                            ParametrosSQL.Add("CNPJ", sCNPJNota);
                                            ParametrosSQL.Add("XML", sNotas);
                                            ParametrosSQL.Add("PDF", oPDFStream);
                                            ParametrosSQL.Add("NOMECLIENTE", sNomeCliente);
                                            ParametrosSQL.Add("NOTASERIE", sSerie);
                                            ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                            foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                                            {
                                                string sEAN = oProduto.EAN;
                                                string sCodigoSku = oProduto.Codigo;
                                                string sDescricao = oProduto.Descricao;
                                                string sQuantidade = oProduto.Quantidade.ToString();
                                                sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ,DESCRICAO,QUANTIDADE,SKU) VALUES(@NOTA,@PRODUTO,@CNPJ,@DESCRICAO,@QUANTIDADE,@SKU)";
                                                ParametrosSQL.Clear();
                                                ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                                ParametrosSQL.Add("PRODUTO", sEAN);
                                                ParametrosSQL.Add("CNPJ", sCNPJNota);
                                                ParametrosSQL.Add("DESCRICAO", sDescricao);
                                                ParametrosSQL.Add("QUANTIDADE", sQuantidade);
                                                ParametrosSQL.Add("SKU", sCodigoSku);

                                                ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                            }
                                            oDanfe = null;
                                            GC.Collect();
                                            GC.WaitForPendingFinalizers();

                                            //string sPastaXMLBACKUP = sPastaXML + "XMLBACKUP\\";

                                            //if (!Directory.Exists(sPastaXMLBACKUP))
                                            //{
                                            //    Directory.CreateDirectory(sPastaXMLBACKUP);
                                            //}

                                            //if (!Directory.Exists(sPastaXMLBACKUP + sPastaDataHoje))
                                            //{
                                            //    Directory.CreateDirectory(sPastaXMLBACKUP + sPastaDataHoje);
                                            //}

                                            //File.Copy(sArquivo, sPastaXMLBACKUP + sPastaDataHoje + Path.GetFileName(sArquivo), true);
                                        }
                                        //File.Delete(sArquivo);
                                    }

                                    catch (Exception ex)
                                    {
                                        //ClasseParametros.MostraErro(ex.Message, iconApp);
                                    }


                                    #endregion

                                }


                                sSql = @"SELECT NM.NOTA, ND.PRODUTO FROM NOTAMASTER NM
                                              LEFT OUTER JOIN NOTADETALHE ND
                                                ON NM.NOTA = ND.NOTA AND NM.CNPJ = ND.CNPJ WHERE CHAVENOTA = '" + oNotaFiscal.notafiscal.chaveAcesso + "'";

                                d = ClasseParametros.ConsultaBancoMysql(sSql);
                                if (d.Rows[0]["PRODUTO"].ToString() == "")
                                {
                                    #region SALVA NOTADETALHE

                                    try
                                    {
                                        //https://www.bling.com.br/relatorios/nfe.xml.php&apikey=e61079a5031cc2b5065c5bc34b46b03a4983b34e694f7203f2f71b5cddaba2e9950bb934&chaveAcesso=32201034036601000338550020000001461303144558
                                        request = HttpWebRequest.Create(@"https://www.bling.com.br/relatorios/nfe.xml.php?apikey=" + ClasseParametros.sTokenBling + "&chaveAcesso=" + oNotaFiscal.notafiscal.chaveAcesso);
                                        request.ContentType = "application/json";
                                        request.Method = "GET";

                                        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)
                                        {
                                            if (response.StatusCode != HttpStatusCode.OK)
                                                Console.Out.WriteLine("Error. Server returned status code: {0}", response.StatusCode);

                                            using (StreamReader reader = new StreamReader(response.GetResponseStream()))
                                            {
                                                var content = reader.ReadToEnd();
                                                if (string.IsNullOrWhiteSpace(content))
                                                    Console.Out.WriteLine("Empty Response");
                                                else
                                                    sNotas = content;
                                            }
                                        }

                                        string sPasta = Directory.GetCurrentDirectory() + "\\temp";
                                        string sArquivoXML = sPasta + "\\" + oNotaFiscal.notafiscal.chaveAcesso + ".xml";

                                        DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                        Danfe danfe = new Danfe(oDanfe);

                                        danfe.Gerar();

                                        string sChaveNota = oDanfe.ChaveAcesso;
                                        string sNota = oDanfe.NfNumero.ToString();
                                        string sDataEmissao = oDanfe.DataHoraEmissao.ToString();
                                        string sCNPJNota = oDanfe.Emitente.CnpjCpf;
                                        string sNomeCliente = oDanfe.Destinatario.NomeFantasia;
                                        string sSerie = oDanfe.NfSerie.ToString();

                                        foreach (ProdutoViewModel oProduto in oDanfe.Produtos)
                                        {
                                            string sEAN = oProduto.EAN;
                                            string sCodigoSku = oProduto.Codigo;
                                            string sDescricao = oProduto.Descricao;
                                            string sQuantidade = oProduto.Quantidade.ToString();
                                            sSql = "INSERT INTO NOTADETALHE(NOTA,PRODUTO,CNPJ,DESCRICAO,QUANTIDADE,SKU) VALUES(@NOTA,@PRODUTO,@CNPJ,@DESCRICAO,@QUANTIDADE,@SKU)";
                                            ParametrosSQL.Clear();
                                            ParametrosSQL.Add("NOTA", int.Parse(sNota).ToString());
                                            ParametrosSQL.Add("PRODUTO", sEAN);
                                            ParametrosSQL.Add("CNPJ", sCNPJNota);
                                            ParametrosSQL.Add("DESCRICAO", sDescricao);
                                            ParametrosSQL.Add("QUANTIDADE", sQuantidade);
                                            ParametrosSQL.Add("SKU", sCodigoSku);

                                            ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                                        }
                                        oDanfe = null;
                                        GC.Collect();
                                        GC.WaitForPendingFinalizers();

                                    }

                                    catch (Exception ex)
                                    {
                                        //ClasseParametros.MostraErro(ex.Message, iconApp);
                                    }


                                    #endregion

                                }



                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);

                            }

                            //etq
                            try
                            {
                                d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETQENVIADO = 0");

                                if (d.Rows.Count > 0)
                                {

                                    //34036601000419
                                    DataTable dtbNota = ClasseParametros.ConsultaBancoMysql("SELECT * FROM NOTAMASTER WHERE CHAVENOTA = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                    //sNotas = ((byte[])dtbNota.Rows[0]["XML"]).ToString();

                                    sNotas = Encoding.ASCII.GetString((byte[])dtbNota.Rows[0]["XML"]);



                                    if (oNotaFiscal.notafiscal.tipoIntegracao == "MercadoLivre")
                                    {
                                        DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);
                                        Danfe danfe = new Danfe(oDanfe);

                                        //if(oDanfe.Emitente.CnpjCpf== "34036601000419")
                                        //{
                                        //    iCodigoCliente = 6;
                                        //}
                                        //else if (oDanfe.Emitente.CnpjCpf == "34036601000338")
                                        //{
                                        //    iCodigoCliente = 5;
                                        //}

                                        ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                        IRestResponse oResposta = null;

                                        //ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                        List<Parameter> ps = new List<Parameter>();
                                        Parameter p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                        ps.Add(p);

                                        MercadoLivreEntrega oEntrega = null;

                                        while (oResposta == null)
                                        {
                                            oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                            Result oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);

                                            if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);
                                            }

                                            if (oResposta.StatusCode == HttpStatusCode.NotFound)
                                            {
                                                oResposta = ClasseParametros.oMeli.Get("orders/" + oNotaFiscal.notafiscal.numeroPedidoLoja, ps);

                                                oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<Result>(oResposta.Content);
                                            }

                                            if (oResposta.StatusCode == HttpStatusCode.Forbidden)
                                            {
                                                break;
                                            }

                                            oResposta = ClasseParametros.oMeli.Get("/shipments/" + oPedido.shipping.id.ToString(), ps);


                                            oEntrega = Newtonsoft.Json.JsonConvert.DeserializeObject<MercadoLivreEntrega>(oResposta.Content);
                                            if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                                oResposta = null;
                                            }
                                            else if (oResposta.StatusCode == 0)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                                oResposta = null;
                                            }
                                        }

                                        ps = new List<Parameter>();
                                        p = new Parameter("access_token", ClasseParametros.oMeli.AccessToken, ParameterType.QueryString);
                                        ps.Add(p);
                                        p = new Parameter("shipment_ids", oEntrega.id.ToString().Trim(), ParameterType.QueryString);
                                        ps.Add(p);
                                        p = new Parameter("response_type", "zpl2", ParameterType.QueryString);
                                        ps.Add(p);

                                        oResposta = null;
                                        while (oResposta == null)
                                        {
                                            oResposta = ClasseParametros.oMeli.Get("shipment_labels", ps);
                                            if (oResposta.Content.Contains("delivered") || oResposta.Content.Contains("shipped"))
                                            {
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                            }
                                            else if (oResposta.Content.Contains("dropped_off"))
                                            {
                                                break;
                                            }
                                            else if (oResposta.StatusCode == HttpStatusCode.Unauthorized)
                                            {
                                                ClasseFuncoes.ConectaMercadoLivreAsync(iCodigoCliente);

                                                oResposta = null;

                                            }
                                        }

                                        /////shipment_labels?shipment_ids=21527708516&response_type=zpl2&access_token=$ACCESS_TOKEN"
                                        if (oResposta.StatusCode == HttpStatusCode.OK)
                                        {
                                            ClasseParametros.SalvaEtiqueta(oNotaFiscal.notafiscal.chaveAcesso, oResposta.RawBytes, 5, oNotaFiscal.notafiscal.numeroPedidoLoja, "MELI");
                                            sSql = "SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "' AND ETIQUETATXT = ''";
                                            DataTable dtbVendas = ClasseParametros.ConsultaBancoMysql(sSql);
                                            if (dtbVendas.Rows.Count == 0)
                                            {
                                                ClasseParametros.ExecutabancoMySql("UPDATE XMLVENDAS SET STATUS = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAMARKETPLACE SET STATUS = 2 WHERE ID = '" + oNotaFiscal.notafiscal.numeroPedidoLoja + "'");
                                            }
                                            dtbVendas.Dispose();
                                            //break;
                                        }

                                    }
                                    else if (oNotaFiscal.notafiscal.tipoIntegracao == "Amazon")
                                    {
                                        DanfeViewModel oDanfe = DanfeViewModelCreator.CriarDeStringXml(sNotas);

                                        //Danfe danfe = new Danfe(oDanfe);

                                        GeraEtiquetaJADLOGBling(iCodigoCliente, oDanfe);
                                    }
                                    else if (oNotaFiscal.notafiscal.tipoIntegracao == "SkyHub")
                                    {
                                        Console.WriteLine("Gera etiqueta do pedido " + oNotaFiscal.notafiscal.numeroPedidoLoja);

                                        try
                                        {
                                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());
                                            string sKey = d.Rows[0]["KEYB2W"].ToString();
                                            string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                            string sAccount = "0MDxaksT8d";
                                            d.Dispose();

                                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'  AND ETQENVIADO = 0");

                                            if (d.Rows.Count == 0)
                                            {
                                                continue;
                                            }


                                            RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                            RestRequest oRequest = new RestRequest(Method.POST);
                                            oRequest.AddHeader("Content-Length", "52");
                                            oRequest.AddHeader("Cache-Control", "no-cache");
                                            oRequest.AddHeader("Accept", "application/json");
                                            oRequest.AddHeader("Content-Type", "application/json");
                                            oRequest.AddHeader("x-Api-Key", sKey);
                                            oRequest.AddHeader("X-User-Email", sUsuario);
                                            oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                            string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                            oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                            IRestResponse response = client.Execute(oRequest);
                                            string sPLP = "";

                                            if (response.Content.Contains("nao tem nota fiscal"))
                                            {
                                                continue;
                                            }

                                            if (response.Content.Contains("nao localizados"))
                                            {
                                                continue;
                                            }

                                            Thread.Sleep(1000);
                                            for (int j = 0; j < 12; j++)
                                            {
                                                if (response.StatusCode == HttpStatusCode.Created)
                                                {
                                                    sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                                    break;
                                                }

                                                if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout || response.StatusCode == HttpStatusCode.ServiceUnavailable)
                                                {
                                                    Thread.Sleep(10000);
                                                    response = client.Execute(oRequest);
                                                }
                                                else if (response.StatusCode.ToString() == "429")
                                                {
                                                    Thread.Sleep(20000);
                                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                                    oRequest = new RestRequest(Method.POST);
                                                    oRequest.AddHeader("Content-Length", "52");
                                                    oRequest.AddHeader("Cache-Control", "no-cache");
                                                    oRequest.AddHeader("Accept", "application/json");
                                                    oRequest.AddHeader("Content-Type", "application/json");
                                                    oRequest.AddHeader("x-Api-Key", sKey);
                                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                    sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                                    oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                                    response = client.Execute(oRequest);
                                                    Thread.Sleep(3000);
                                                }
                                                else
                                                    break;
                                            }

                                            bool lJaGerada = false;
                                            if (response.Content.Contains("ja agrupada") || response.StatusCode == HttpStatusCode.OK)
                                            {
                                                //B2WPLP oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPLP>(response.Content);
                                                //sPLP = oPedido.plp[0].id.ToString();


                                                B2WResult oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WResult>(response.Content);
                                                sPLP = oPedido.message.Split(' ')[response.Content.Split(' ').Length - 1];

                                                lJaGerada = true;
                                            }


                                            Thread.Sleep(1000);


                                            if (response.StatusCode == HttpStatusCode.Created || lJaGerada)
                                            {
                                                //sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                                response = null;
                                                while (response == null)
                                                {
                                                    client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                    oRequest = new RestRequest(Method.GET);
                                                    oRequest.AddHeader("cache-control", "no-cache");
                                                    oRequest.AddHeader("Accept", "application/json");
                                                    oRequest.AddHeader("Content-Type", "application/json");
                                                    oRequest.AddHeader("x-Api-Key", sKey);
                                                    oRequest.AddHeader("X-User-Email", sUsuario);
                                                    oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                    response = client.Execute(oRequest);

                                                    if (response.Content.Contains("no Route matched"))
                                                    {
                                                        Thread.Sleep(3000);
                                                        response = null;
                                                    }
                                                }

                                                for (int j = 0; j < 12; j++)
                                                {
                                                    if (response.StatusCode == HttpStatusCode.OK)
                                                        break;

                                                    if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                                    {
                                                        Thread.Sleep(10000);
                                                        break;
                                                    }

                                                    else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                                    {
                                                        Thread.Sleep(20000);
                                                        client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                                        oRequest = new RestRequest(Method.GET);
                                                        oRequest.AddHeader("cache-control", "no-cache");
                                                        oRequest.AddHeader("Accept", "application/json");
                                                        oRequest.AddHeader("Content-Type", "application/json");
                                                        oRequest.AddHeader("x-Api-Key", sKey);
                                                        oRequest.AddHeader("X-User-Email", sUsuario);
                                                        oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                                        response = client.Execute(oRequest);
                                                        Thread.Sleep(3000);
                                                    }
                                                    else
                                                        break;
                                                }

                                                Thread.Sleep(3000);
                                                EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                                if (oJsonB2W.docsExternos == null)
                                                    continue;

                                                if (oJsonB2W.docsExternos.Length > 0)
                                                    if (oJsonB2W.plp != null)
                                                    {
                                                        string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], "PAC");
                                                        byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                                        ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], 5, oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[0], oNotaFiscal.notafiscal.numeroPedidoLoja.Split('-')[1]);
                                                        ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                                        // salva json
                                                        if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                                            Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                                        File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                                    }

                                            }
                                            d.Dispose();
                                        }
                                        catch (Exception ex)
                                        {
                                            Console.WriteLine(ex.Message);

                                        }









                                        //try
                                        //{
                                        //    d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM CLIENTE WHERE CODIGO = "+ iCodigoCliente.ToString());
                                        //    string sKey = d.Rows[0]["KEYB2W"].ToString();
                                        //    string sUsuario = d.Rows[0]["USUARIOB2W"].ToString();
                                        //    string sAccount = "0MDxaksT8d";
                                        //    d.Dispose();

                                        //    RestClient client = new RestClient("https://api.skyhub.com.br/shipments/b2w");
                                        //    RestRequest oRequest = new RestRequest(Method.GET);
                                        //    oRequest.AddHeader("Content-Length", "52");
                                        //    oRequest.AddHeader("Cache-Control", "no-cache");
                                        //    oRequest.AddHeader("Accept", "application/json");
                                        //    oRequest.AddHeader("Content-Type", "application/json");
                                        //    oRequest.AddHeader("x-Api-Key", sKey);
                                        //    oRequest.AddHeader("X-User-Email", sUsuario);
                                        //    oRequest.AddHeader("X-Accountmanager-Key", sAccount);
                                        //    //string sPost = "{\n  \"order_remote_codes\": [\n    \"" + String.Join("", System.Text.RegularExpressions.Regex.Split(oNotaFiscal.notafiscal.numeroPedidoLoja, @"[^\d]")) + "\"\n  ]\n}";
                                        //    //oRequest.AddParameter("application/json", sPost, ParameterType.RequestBody);
                                        //    IRestResponse response = client.Execute(oRequest);

                                        //    B2WPLP oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<B2WPLP>(response.Content);

                                        //    foreach (Plp oPLP in oPedido.plp)
                                        //    {

                                        //        string sPLP = String.Join("", System.Text.RegularExpressions.Regex.Split(response.Content, @"[^\d]"));
                                        //        string sPedido = "";
                                        //        response = null;
                                        //        while (response == null)
                                        //        {
                                        //            client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                        //            oRequest = new RestRequest(Method.GET);
                                        //            oRequest.AddHeader("cache-control", "no-cache");
                                        //            oRequest.AddHeader("Accept", "application/json");
                                        //            oRequest.AddHeader("Content-Type", "application/json");
                                        //            oRequest.AddHeader("x-Api-Key", sKey);
                                        //            oRequest.AddHeader("X-User-Email", sUsuario);
                                        //            oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                        //            response = client.Execute(oRequest);

                                        //            if (response.Content.Contains("no Route matched"))
                                        //            {
                                        //                Thread.Sleep(3000);
                                        //                response = null;
                                        //            }
                                        //        }

                                        //        for (int j = 0; j < 12; i++)
                                        //        {
                                        //            if (response.StatusCode == HttpStatusCode.OK)
                                        //                break;

                                        //            if (response.StatusCode.ToString() == "422" || response.StatusCode.ToString() == "InternalServerError" || response.StatusCode == HttpStatusCode.GatewayTimeout)
                                        //            {
                                        //                Thread.Sleep(10000);
                                        //                response = client.Execute(oRequest);
                                        //            }

                                        //            else if (response.StatusCode.ToString() == "429" || response.StatusCode == System.Net.HttpStatusCode.BadGateway || response.StatusCode == System.Net.HttpStatusCode.Forbidden || response.StatusCode == System.Net.HttpStatusCode.NotFound)
                                        //            {
                                        //                Thread.Sleep(20000);
                                        //                client = new RestClient("https://api.skyhub.com.br/shipments/b2w/view?plp_id=" + sPLP);
                                        //                oRequest = new RestRequest(Method.GET);
                                        //                oRequest.AddHeader("cache-control", "no-cache");
                                        //                oRequest.AddHeader("Accept", "application/json");
                                        //                oRequest.AddHeader("Content-Type", "application/json");
                                        //                oRequest.AddHeader("x-Api-Key", sKey);
                                        //                oRequest.AddHeader("X-User-Email", sUsuario);
                                        //                oRequest.AddHeader("X-Accountmanager-Key", sAccount);

                                        //                response = client.Execute(oRequest);
                                        //                Thread.Sleep(3000);
                                        //            }
                                        //            else
                                        //                break;
                                        //        }

                                        //        Thread.Sleep(3000);
                                        //        EtiquetaJSON oJsonB2W = Newtonsoft.Json.JsonConvert.DeserializeObject<EtiquetaJSON>(response.Content);
                                        //        if (oJsonB2W.docsExternos.Length > 0)
                                        //            if (oJsonB2W.plp != null)
                                        //            {
                                        //                string sEtiqueta = ClasseFuncoes.GeraEtiquetaB2W(oJsonB2W, sPedido.Split('-')[0], "PAC");
                                        //                byte[] aEtiqueta = Encoding.UTF8.GetBytes(sEtiqueta);
                                        //                ClasseParametros.SalvaEtiquetaAnyMarket(oNotaFiscal.notafiscal.chaveAcesso, aEtiqueta, sPedido.Split('-')[0], 5, sPedido.Split('-')[0], sPedido.Split('-')[1]);

                                        //                // salva json
                                        //                if (!Directory.Exists(Directory.GetCurrentDirectory() + "\\json"))
                                        //                    Directory.CreateDirectory(Directory.GetCurrentDirectory() + "\\json");

                                        //                File.WriteAllText(Directory.GetCurrentDirectory() + "\\json\\" + oNotaFiscal.notafiscal.chaveAcesso + ".json", response.Content); // Requires System.IO
                                        //            }
                                        //    }
                                        //}
                                        //catch (Exception ex)
                                        //{

                                        //}








                                    }
                                    else if (oNotaFiscal.notafiscal.tipoIntegracao == "IntegraCommerce")
                                    {
                                        try
                                        {
                                            ClasseFuncoes.RetornaCodigoMAGALU(iCodigoCliente);

                                            //Os possíveis status são: New, Approved, Processing, Invoiced, Shipped, Delivered, Canceled, ShipmentException.
                                            RestClient client = new RestClient(ClasseParametros.sEnderecoMagalu + "/api/Order/" + oNotaFiscal.notafiscal.numeroPedidoLoja);
                                            RestRequest oRequestMAGALU = new RestRequest(Method.GET);
                                            oRequestMAGALU.AddHeader("cache-control", "no-cache");
                                            oRequestMAGALU.AddHeader("authorization", "Basic " + ClasseParametros.sTokenMAGALU);
                                            IRestResponse oResposta = client.Execute(oRequestMAGALU);

                                            Thread.Sleep(3000);
                                            InterRegraNegocio.Order oPedido = Newtonsoft.Json.JsonConvert.DeserializeObject<InterRegraNegocio.Order>(oResposta.Content);

                                            if (oPedido == null)
                                            {
                                                continue;
                                            }
                                            DataTable dtbChaves = ClasseParametros.ConsultaBancoMysql("SELECT USUARIOMAGALU,SENHAMAGALU FROM CLIENTE WHERE CODIGO = " + iCodigoCliente.ToString());


                                            Console.WriteLine("Gerando etiqueta do pedido " + oPedido.IdOrder);

                                            if (oPedido.IdOrder == "LU-8504500673851491")
                                            {

                                            }

                                            d = ClasseParametros.ConsultaBancoMysql("SELECT * FROM VENDAS WHERE NOTAFISCAL = '" + oPedido.InvoicedKey + "' AND ETQENVIADO = 0");
                                            if (d.Rows.Count == 0)
                                                continue;

                                            try
                                            {
                                                // Gera tracking
                                                oPedido.CodigoCliente = 5;
                                                ClasseParametros.SalvaBancoPDFZPLMagalu(oPedido, dtbChaves.Rows[0]["USUARIOMAGALU"].ToString(), dtbChaves.Rows[0]["SENHAMAGALU"].ToString());
                                                ClasseParametros.ExecutabancoMySql("UPDATE VENDAS SET ETQENVIADO = 1 WHERE NOTAFISCAL = '" + oNotaFiscal.notafiscal.chaveAcesso + "'");

                                            }
                                            catch (Exception ex)
                                            {
                                                Console.WriteLine(ex.Message);

                                                //ClasseParametros.MostraErro(ex.Message, ClasseParametros.iconApp);
                                            }

                                        }
                                        catch (Exception ex)
                                        {
                                            Console.WriteLine(ex.Message);

                                        }
                                    }
                                }

                            }
                            catch (Exception ex)
                            {
                                Console.WriteLine(ex.Message);

                            }

                            //if (d.Rows.Count > 0)
                            //{
                            //    sSql = "UPDATE VENDAS SET ETIQUETATXTTXT = @ETIQUETATXTTXT, ETIQUETATXT=@ETQ,LOJA=@LOJA,CODIGOCLIENTE=@CODIGOCLIENTE WHERE NOTAFISCAL = @NOTA";
                            //}
                            //else
                            //{
                            //    sSql = "INSERT INTO VENDAS(NOTAFISCAL,ETIQUETATXT,ETIQUETATXTTXT,LOJA,DATACRIADO,LOTE,CODIGOCLIENTE) VALUES(@NOTA,@ETQ,@ETIQUETATXTTXT,@LOJA,@DATACRIADO,@LOTE,@CODIGOCLIENTE)";
                            //    ParametrosSQL.Add("@DATACRIADO", DateTime.Now);
                            //    ParametrosSQL.Add("@LOTE", ClasseParametros.PegaLote("MELI", "5".ToString()));
                            //}
                            //d.Dispose();

                            //File.WriteAllBytes(Directory.GetCurrentDirectory() + "\\XMLETQ\\" + oNotaFiscal.notafiscal.chaveAcesso + ".TXT", aEtiqueta); // Requires System.IO

                            //ParametrosSQL.Add("@ETQ", aEtiqueta);
                            //ParametrosSQL.Add("@ETIQUETATXTTXT", sEtiqueta);
                            //ParametrosSQL.Add("@NOTA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[0]);
                            //ParametrosSQL.Add("@LOJA", Path.GetFileName(sArquivo).ToLower().Replace(".json", "").Replace(".txt", "").Replace(".pdf", "").Split('_')[1]);
                            //ParametrosSQL.Add("@CODIGOCLIENTE", iCliente);
                            //ClasseParametros.ExecutabancoMySql(sSql, ParametrosSQL);

                        }

                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);

                    }

                    i++;
                }
                #endregion

                ClasseFuncoes.SolicitaDirect(iCodigoCliente);
            }
        }
    }
}